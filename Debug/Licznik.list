
Licznik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005510  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  080055d0  080055d0  000155d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   0000000c  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005ab4  08005ab4  00015ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08005ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000027c  20000070  08005b28  00020070  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200002ec  08005b28  000202ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001481f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000048d0  00000000  00000000  000348b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001228  00000000  00000000  00039188  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000ff8  00000000  00000000  0003a3b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007c4f  00000000  00000000  0003b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000711a  00000000  00000000  00042ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0004a111  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003fd0  00000000  00000000  0004a190  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  0004e160  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  0004e19c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080055b8 	.word	0x080055b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080055b8 	.word	0x080055b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	2102      	movs	r1, #2
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2003      	movs	r0, #3
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f000 fe9c 	bl	8000f86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f931 	bl	80004e8 <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8fd 	bl	800049c <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200002cc 	.word	0x200002cc

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	200002cc 	.word	0x200002cc

080002e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b084      	sub	sp, #16
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002e8:	f7ff fff0 	bl	80002cc <HAL_GetTick>
 80002ec:	0003      	movs	r3, r0
 80002ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	3301      	adds	r3, #1
 80002f8:	d002      	beq.n	8000300 <HAL_Delay+0x20>
  {
    wait++;
 80002fa:	68fb      	ldr	r3, [r7, #12]
 80002fc:	3301      	adds	r3, #1
 80002fe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000300:	46c0      	nop			; (mov r8, r8)
 8000302:	f7ff ffe3 	bl	80002cc <HAL_GetTick>
 8000306:	0002      	movs	r2, r0
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	1ad2      	subs	r2, r2, r3
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	429a      	cmp	r2, r3
 8000310:	d3f7      	bcc.n	8000302 <HAL_Delay+0x22>
  {
  }
}
 8000312:	46c0      	nop			; (mov r8, r8)
 8000314:	46bd      	mov	sp, r7
 8000316:	b004      	add	sp, #16
 8000318:	bd80      	pop	{r7, pc}
	...

0800031c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	0002      	movs	r2, r0
 8000324:	1dfb      	adds	r3, r7, #7
 8000326:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000328:	4b06      	ldr	r3, [pc, #24]	; (8000344 <NVIC_EnableIRQ+0x28>)
 800032a:	1dfa      	adds	r2, r7, #7
 800032c:	7812      	ldrb	r2, [r2, #0]
 800032e:	0011      	movs	r1, r2
 8000330:	221f      	movs	r2, #31
 8000332:	400a      	ands	r2, r1
 8000334:	2101      	movs	r1, #1
 8000336:	4091      	lsls	r1, r2
 8000338:	000a      	movs	r2, r1
 800033a:	601a      	str	r2, [r3, #0]
}
 800033c:	46c0      	nop			; (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b002      	add	sp, #8
 8000342:	bd80      	pop	{r7, pc}
 8000344:	e000e100 	.word	0xe000e100

08000348 <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	0002      	movs	r2, r0
 8000350:	1dfb      	adds	r3, r7, #7
 8000352:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000354:	4907      	ldr	r1, [pc, #28]	; (8000374 <NVIC_ClearPendingIRQ+0x2c>)
 8000356:	1dfb      	adds	r3, r7, #7
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	001a      	movs	r2, r3
 800035c:	231f      	movs	r3, #31
 800035e:	4013      	ands	r3, r2
 8000360:	2201      	movs	r2, #1
 8000362:	409a      	lsls	r2, r3
 8000364:	23c0      	movs	r3, #192	; 0xc0
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	50ca      	str	r2, [r1, r3]
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b002      	add	sp, #8
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	e000e100 	.word	0xe000e100

08000378 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000378:	b5b0      	push	{r4, r5, r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	0002      	movs	r2, r0
 8000380:	6039      	str	r1, [r7, #0]
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000386:	1dfb      	adds	r3, r7, #7
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	2b7f      	cmp	r3, #127	; 0x7f
 800038c:	d932      	bls.n	80003f4 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800038e:	4c2f      	ldr	r4, [pc, #188]	; (800044c <NVIC_SetPriority+0xd4>)
 8000390:	1dfb      	adds	r3, r7, #7
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	001a      	movs	r2, r3
 8000396:	230f      	movs	r3, #15
 8000398:	4013      	ands	r3, r2
 800039a:	3b08      	subs	r3, #8
 800039c:	0899      	lsrs	r1, r3, #2
 800039e:	4a2b      	ldr	r2, [pc, #172]	; (800044c <NVIC_SetPriority+0xd4>)
 80003a0:	1dfb      	adds	r3, r7, #7
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	0018      	movs	r0, r3
 80003a6:	230f      	movs	r3, #15
 80003a8:	4003      	ands	r3, r0
 80003aa:	3b08      	subs	r3, #8
 80003ac:	089b      	lsrs	r3, r3, #2
 80003ae:	3306      	adds	r3, #6
 80003b0:	009b      	lsls	r3, r3, #2
 80003b2:	18d3      	adds	r3, r2, r3
 80003b4:	3304      	adds	r3, #4
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	1dfa      	adds	r2, r7, #7
 80003ba:	7812      	ldrb	r2, [r2, #0]
 80003bc:	0010      	movs	r0, r2
 80003be:	2203      	movs	r2, #3
 80003c0:	4002      	ands	r2, r0
 80003c2:	00d2      	lsls	r2, r2, #3
 80003c4:	20ff      	movs	r0, #255	; 0xff
 80003c6:	4090      	lsls	r0, r2
 80003c8:	0002      	movs	r2, r0
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	019b      	lsls	r3, r3, #6
 80003d2:	20ff      	movs	r0, #255	; 0xff
 80003d4:	4018      	ands	r0, r3
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	001d      	movs	r5, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	402b      	ands	r3, r5
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	4098      	lsls	r0, r3
 80003e4:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e6:	431a      	orrs	r2, r3
 80003e8:	1d8b      	adds	r3, r1, #6
 80003ea:	009b      	lsls	r3, r3, #2
 80003ec:	18e3      	adds	r3, r4, r3
 80003ee:	3304      	adds	r3, #4
 80003f0:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80003f2:	e027      	b.n	8000444 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003f4:	4c16      	ldr	r4, [pc, #88]	; (8000450 <NVIC_SetPriority+0xd8>)
 80003f6:	1dfb      	adds	r3, r7, #7
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	b25b      	sxtb	r3, r3
 80003fc:	089b      	lsrs	r3, r3, #2
 80003fe:	4914      	ldr	r1, [pc, #80]	; (8000450 <NVIC_SetPriority+0xd8>)
 8000400:	1dfa      	adds	r2, r7, #7
 8000402:	7812      	ldrb	r2, [r2, #0]
 8000404:	b252      	sxtb	r2, r2
 8000406:	0892      	lsrs	r2, r2, #2
 8000408:	32c0      	adds	r2, #192	; 0xc0
 800040a:	0092      	lsls	r2, r2, #2
 800040c:	5852      	ldr	r2, [r2, r1]
 800040e:	1df9      	adds	r1, r7, #7
 8000410:	7809      	ldrb	r1, [r1, #0]
 8000412:	0008      	movs	r0, r1
 8000414:	2103      	movs	r1, #3
 8000416:	4001      	ands	r1, r0
 8000418:	00c9      	lsls	r1, r1, #3
 800041a:	20ff      	movs	r0, #255	; 0xff
 800041c:	4088      	lsls	r0, r1
 800041e:	0001      	movs	r1, r0
 8000420:	43c9      	mvns	r1, r1
 8000422:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000424:	683a      	ldr	r2, [r7, #0]
 8000426:	0192      	lsls	r2, r2, #6
 8000428:	20ff      	movs	r0, #255	; 0xff
 800042a:	4010      	ands	r0, r2
 800042c:	1dfa      	adds	r2, r7, #7
 800042e:	7812      	ldrb	r2, [r2, #0]
 8000430:	0015      	movs	r5, r2
 8000432:	2203      	movs	r2, #3
 8000434:	402a      	ands	r2, r5
 8000436:	00d2      	lsls	r2, r2, #3
 8000438:	4090      	lsls	r0, r2
 800043a:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800043c:	430a      	orrs	r2, r1
 800043e:	33c0      	adds	r3, #192	; 0xc0
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	511a      	str	r2, [r3, r4]
}
 8000444:	46c0      	nop			; (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	b002      	add	sp, #8
 800044a:	bdb0      	pop	{r4, r5, r7, pc}
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	e000e100 	.word	0xe000e100

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	4a0c      	ldr	r2, [pc, #48]	; (8000494 <SysTick_Config+0x40>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d901      	bls.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e010      	b.n	800048c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4b0b      	ldr	r3, [pc, #44]	; (8000498 <SysTick_Config+0x44>)
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	3a01      	subs	r2, #1
 8000470:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	2301      	movs	r3, #1
 8000474:	425b      	negs	r3, r3
 8000476:	2103      	movs	r1, #3
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff ff7d 	bl	8000378 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <SysTick_Config+0x44>)
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000484:	4b04      	ldr	r3, [pc, #16]	; (8000498 <SysTick_Config+0x44>)
 8000486:	2207      	movs	r2, #7
 8000488:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800048a:	2300      	movs	r3, #0
}
 800048c:	0018      	movs	r0, r3
 800048e:	46bd      	mov	sp, r7
 8000490:	b002      	add	sp, #8
 8000492:	bd80      	pop	{r7, pc}
 8000494:	00ffffff 	.word	0x00ffffff
 8000498:	e000e010 	.word	0xe000e010

0800049c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800049c:	b580      	push	{r7, lr}
 800049e:	b084      	sub	sp, #16
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60b9      	str	r1, [r7, #8]
 80004a4:	607a      	str	r2, [r7, #4]
 80004a6:	230f      	movs	r3, #15
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	1c02      	adds	r2, r0, #0
 80004ac:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80004ae:	68ba      	ldr	r2, [r7, #8]
 80004b0:	230f      	movs	r3, #15
 80004b2:	18fb      	adds	r3, r7, r3
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	b25b      	sxtb	r3, r3
 80004b8:	0011      	movs	r1, r2
 80004ba:	0018      	movs	r0, r3
 80004bc:	f7ff ff5c 	bl	8000378 <NVIC_SetPriority>
}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	b004      	add	sp, #16
 80004c6:	bd80      	pop	{r7, pc}

080004c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	0002      	movs	r2, r0
 80004d0:	1dfb      	adds	r3, r7, #7
 80004d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004d4:	1dfb      	adds	r3, r7, #7
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	b25b      	sxtb	r3, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	f7ff ff1e 	bl	800031c <NVIC_EnableIRQ>
}
 80004e0:	46c0      	nop			; (mov r8, r8)
 80004e2:	46bd      	mov	sp, r7
 80004e4:	b002      	add	sp, #8
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	0018      	movs	r0, r3
 80004f4:	f7ff ffae 	bl	8000454 <SysTick_Config>
 80004f8:	0003      	movs	r3, r0
}
 80004fa:	0018      	movs	r0, r3
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}

08000502 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{ 
 8000502:	b580      	push	{r7, lr}
 8000504:	b082      	sub	sp, #8
 8000506:	af00      	add	r7, sp, #0
 8000508:	0002      	movs	r2, r0
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	701a      	strb	r2, [r3, #0]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	0018      	movs	r0, r3
 8000516:	f7ff ff17 	bl	8000348 <NVIC_ClearPendingIRQ>
}
 800051a:	46c0      	nop			; (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800052c:	f7ff fece 	bl	80002cc <HAL_GetTick>
 8000530:	0003      	movs	r3, r0
 8000532:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000534:	e00f      	b.n	8000556 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	3301      	adds	r3, #1
 800053a:	d00c      	beq.n	8000556 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d007      	beq.n	8000552 <FLASH_WaitForLastOperation+0x2e>
 8000542:	f7ff fec3 	bl	80002cc <HAL_GetTick>
 8000546:	0002      	movs	r2, r0
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	1ad2      	subs	r2, r2, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	429a      	cmp	r2, r3
 8000550:	d901      	bls.n	8000556 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000552:	2303      	movs	r3, #3
 8000554:	e052      	b.n	80005fc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000556:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	2201      	movs	r2, #1
 800055c:	4013      	ands	r3, r2
 800055e:	2b01      	cmp	r3, #1
 8000560:	d0e9      	beq.n	8000536 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000562:	4b28      	ldr	r3, [pc, #160]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	2202      	movs	r2, #2
 8000568:	4013      	ands	r3, r2
 800056a:	2b02      	cmp	r3, #2
 800056c:	d102      	bne.n	8000574 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 8000570:	2202      	movs	r2, #2
 8000572:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 8000576:	699a      	ldr	r2, [r3, #24]
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	401a      	ands	r2, r3
 800057e:	2380      	movs	r3, #128	; 0x80
 8000580:	005b      	lsls	r3, r3, #1
 8000582:	429a      	cmp	r2, r3
 8000584:	d035      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 8000588:	699a      	ldr	r2, [r3, #24]
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8000590:	2380      	movs	r3, #128	; 0x80
 8000592:	009b      	lsls	r3, r3, #2
 8000594:	429a      	cmp	r2, r3
 8000596:	d02c      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 800059a:	699a      	ldr	r2, [r3, #24]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	00db      	lsls	r3, r3, #3
 80005a0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80005a2:	2380      	movs	r3, #128	; 0x80
 80005a4:	00db      	lsls	r3, r3, #3
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d023      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 80005ac:	699a      	ldr	r2, [r3, #24]
 80005ae:	2380      	movs	r3, #128	; 0x80
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d01a      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 80005be:	699a      	ldr	r2, [r3, #24]
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	019b      	lsls	r3, r3, #6
 80005c4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80005c6:	2380      	movs	r3, #128	; 0x80
 80005c8:	019b      	lsls	r3, r3, #6
 80005ca:	429a      	cmp	r2, r3
 80005cc:	d011      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 80005d0:	699a      	ldr	r2, [r3, #24]
 80005d2:	2380      	movs	r3, #128	; 0x80
 80005d4:	029b      	lsls	r3, r3, #10
 80005d6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80005d8:	2380      	movs	r3, #128	; 0x80
 80005da:	029b      	lsls	r3, r3, #10
 80005dc:	429a      	cmp	r2, r3
 80005de:	d008      	beq.n	80005f2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <FLASH_WaitForLastOperation+0xe0>)
 80005e2:	699a      	ldr	r2, [r3, #24]
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	025b      	lsls	r3, r3, #9
 80005e8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80005ea:	2380      	movs	r3, #128	; 0x80
 80005ec:	025b      	lsls	r3, r3, #9
 80005ee:	429a      	cmp	r2, r3
 80005f0:	d103      	bne.n	80005fa <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80005f2:	f000 f809 	bl	8000608 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80005f6:	2301      	movs	r3, #1
 80005f8:	e000      	b.n	80005fc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	0018      	movs	r0, r3
 80005fe:	46bd      	mov	sp, r7
 8000600:	b004      	add	sp, #16
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40022000 	.word	0x40022000

08000608 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800060e:	2300      	movs	r3, #0
 8000610:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000612:	4b49      	ldr	r3, [pc, #292]	; (8000738 <FLASH_SetErrorCode+0x130>)
 8000614:	699a      	ldr	r2, [r3, #24]
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	005b      	lsls	r3, r3, #1
 800061a:	401a      	ands	r2, r3
 800061c:	2380      	movs	r3, #128	; 0x80
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	429a      	cmp	r2, r3
 8000622:	d10a      	bne.n	800063a <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000624:	4b45      	ldr	r3, [pc, #276]	; (800073c <FLASH_SetErrorCode+0x134>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	2202      	movs	r2, #2
 800062a:	431a      	orrs	r2, r3
 800062c:	4b43      	ldr	r3, [pc, #268]	; (800073c <FLASH_SetErrorCode+0x134>)
 800062e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	2280      	movs	r2, #128	; 0x80
 8000634:	0052      	lsls	r2, r2, #1
 8000636:	4313      	orrs	r3, r2
 8000638:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800063a:	4b3f      	ldr	r3, [pc, #252]	; (8000738 <FLASH_SetErrorCode+0x130>)
 800063c:	699a      	ldr	r2, [r3, #24]
 800063e:	2380      	movs	r3, #128	; 0x80
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	401a      	ands	r2, r3
 8000644:	2380      	movs	r3, #128	; 0x80
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	429a      	cmp	r2, r3
 800064a:	d10a      	bne.n	8000662 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800064c:	4b3b      	ldr	r3, [pc, #236]	; (800073c <FLASH_SetErrorCode+0x134>)
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	2201      	movs	r2, #1
 8000652:	431a      	orrs	r2, r3
 8000654:	4b39      	ldr	r3, [pc, #228]	; (800073c <FLASH_SetErrorCode+0x134>)
 8000656:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	2280      	movs	r2, #128	; 0x80
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	4313      	orrs	r3, r2
 8000660:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8000662:	4b35      	ldr	r3, [pc, #212]	; (8000738 <FLASH_SetErrorCode+0x130>)
 8000664:	699a      	ldr	r2, [r3, #24]
 8000666:	2380      	movs	r3, #128	; 0x80
 8000668:	00db      	lsls	r3, r3, #3
 800066a:	401a      	ands	r2, r3
 800066c:	2380      	movs	r3, #128	; 0x80
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	429a      	cmp	r2, r3
 8000672:	d10a      	bne.n	800068a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8000674:	4b31      	ldr	r3, [pc, #196]	; (800073c <FLASH_SetErrorCode+0x134>)
 8000676:	695b      	ldr	r3, [r3, #20]
 8000678:	2208      	movs	r2, #8
 800067a:	431a      	orrs	r2, r3
 800067c:	4b2f      	ldr	r3, [pc, #188]	; (800073c <FLASH_SetErrorCode+0x134>)
 800067e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	2280      	movs	r2, #128	; 0x80
 8000684:	00d2      	lsls	r2, r2, #3
 8000686:	4313      	orrs	r3, r2
 8000688:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800068a:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <FLASH_SetErrorCode+0x130>)
 800068c:	699a      	ldr	r2, [r3, #24]
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	011b      	lsls	r3, r3, #4
 8000692:	401a      	ands	r2, r3
 8000694:	2380      	movs	r3, #128	; 0x80
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	429a      	cmp	r2, r3
 800069a:	d10a      	bne.n	80006b2 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <FLASH_SetErrorCode+0x134>)
 800069e:	695b      	ldr	r3, [r3, #20]
 80006a0:	2204      	movs	r2, #4
 80006a2:	431a      	orrs	r2, r3
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <FLASH_SetErrorCode+0x134>)
 80006a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2280      	movs	r2, #128	; 0x80
 80006ac:	0112      	lsls	r2, r2, #4
 80006ae:	4313      	orrs	r3, r2
 80006b0:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <FLASH_SetErrorCode+0x130>)
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	2380      	movs	r3, #128	; 0x80
 80006b8:	019b      	lsls	r3, r3, #6
 80006ba:	401a      	ands	r2, r3
 80006bc:	2380      	movs	r3, #128	; 0x80
 80006be:	019b      	lsls	r3, r3, #6
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d10a      	bne.n	80006da <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80006c4:	4b1d      	ldr	r3, [pc, #116]	; (800073c <FLASH_SetErrorCode+0x134>)
 80006c6:	695b      	ldr	r3, [r3, #20]
 80006c8:	2210      	movs	r2, #16
 80006ca:	431a      	orrs	r2, r3
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <FLASH_SetErrorCode+0x134>)
 80006ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	4313      	orrs	r3, r2
 80006d8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80006da:	4b17      	ldr	r3, [pc, #92]	; (8000738 <FLASH_SetErrorCode+0x130>)
 80006dc:	699a      	ldr	r2, [r3, #24]
 80006de:	2380      	movs	r3, #128	; 0x80
 80006e0:	029b      	lsls	r3, r3, #10
 80006e2:	401a      	ands	r2, r3
 80006e4:	2380      	movs	r3, #128	; 0x80
 80006e6:	029b      	lsls	r3, r3, #10
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d109      	bne.n	8000700 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <FLASH_SetErrorCode+0x134>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	2220      	movs	r2, #32
 80006f2:	431a      	orrs	r2, r3
 80006f4:	4b11      	ldr	r3, [pc, #68]	; (800073c <FLASH_SetErrorCode+0x134>)
 80006f6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	2220      	movs	r2, #32
 80006fc:	4313      	orrs	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <FLASH_SetErrorCode+0x130>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	025b      	lsls	r3, r3, #9
 8000708:	401a      	ands	r2, r3
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	025b      	lsls	r3, r3, #9
 800070e:	429a      	cmp	r2, r3
 8000710:	d10a      	bne.n	8000728 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8000712:	4b0a      	ldr	r3, [pc, #40]	; (800073c <FLASH_SetErrorCode+0x134>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	2240      	movs	r2, #64	; 0x40
 8000718:	431a      	orrs	r2, r3
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <FLASH_SetErrorCode+0x134>)
 800071c:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2280      	movs	r2, #128	; 0x80
 8000722:	0252      	lsls	r2, r2, #9
 8000724:	4313      	orrs	r3, r2
 8000726:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <FLASH_SetErrorCode+0x130>)
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	619a      	str	r2, [r3, #24]
}  
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	46bd      	mov	sp, r7
 8000732:	b002      	add	sp, #8
 8000734:	bd80      	pop	{r7, pc}
 8000736:	46c0      	nop			; (mov r8, r8)
 8000738:	40022000 	.word	0x40022000
 800073c:	200002d0 	.word	0x200002d0

08000740 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b084      	sub	sp, #16
 8000744:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	d017      	beq.n	8000780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000750:	f3ef 8310 	mrs	r3, PRIMASK
 8000754:	607b      	str	r3, [r7, #4]
  return(result);
 8000756:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000758:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800075a:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800075c:	4b0b      	ldr	r3, [pc, #44]	; (800078c <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800075e:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8000760:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8000762:	4b0a      	ldr	r3, [pc, #40]	; (800078c <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8000764:	4a0b      	ldr	r2, [pc, #44]	; (8000794 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	2201      	movs	r2, #1
 8000778:	4013      	ands	r3, r2
 800077a:	d001      	beq.n	8000780 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
    {
      return HAL_ERROR;
 800077c:	2301      	movs	r3, #1
 800077e:	e000      	b.n	8000782 <HAL_FLASHEx_DATAEEPROM_Unlock+0x42>
    }
  }

  return HAL_OK;  
 8000780:	2300      	movs	r3, #0
}
 8000782:	0018      	movs	r0, r3
 8000784:	46bd      	mov	sp, r7
 8000786:	b004      	add	sp, #16
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	40022000 	.word	0x40022000
 8000790:	89abcdef 	.word	0x89abcdef
 8000794:	02030405 	.word	0x02030405

08000798 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800079c:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800079e:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80007a0:	6852      	ldr	r2, [r2, #4]
 80007a2:	2101      	movs	r1, #1
 80007a4:	430a      	orrs	r2, r1
 80007a6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80007a8:	2300      	movs	r3, #0
}
 80007aa:	0018      	movs	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40022000 	.word	0x40022000

080007b4 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80007b4:	b590      	push	{r4, r7, lr}
 80007b6:	b087      	sub	sp, #28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80007c0:	2317      	movs	r3, #23
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80007ca:	7c1b      	ldrb	r3, [r3, #16]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d101      	bne.n	80007d4 <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80007d0:	2302      	movs	r3, #2
 80007d2:	e040      	b.n	8000856 <HAL_FLASHEx_DATAEEPROM_Program+0xa2>
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80007da:	2317      	movs	r3, #23
 80007dc:	18fc      	adds	r4, r7, r3
 80007de:	4b21      	ldr	r3, [pc, #132]	; (8000864 <HAL_FLASHEx_DATAEEPROM_Program+0xb0>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff fe9f 	bl	8000524 <FLASH_WaitForLastOperation>
 80007e6:	0003      	movs	r3, r0
 80007e8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80007ea:	2317      	movs	r3, #23
 80007ec:	18fb      	adds	r3, r7, r3
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d12a      	bne.n	800084a <HAL_FLASHEx_DATAEEPROM_Program+0x96>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	2b02      	cmp	r3, #2
 80007fe:	d103      	bne.n	8000808 <HAL_FLASHEx_DATAEEPROM_Program+0x54>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	e013      	b.n	8000830 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d104      	bne.n	8000818 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800080e:	68bb      	ldr	r3, [r7, #8]
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	b292      	uxth	r2, r2
 8000814:	801a      	strh	r2, [r3, #0]
 8000816:	e00b      	b.n	8000830 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d104      	bne.n	8000828 <HAL_FLASHEx_DATAEEPROM_Program+0x74>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	687a      	ldr	r2, [r7, #4]
 8000822:	b2d2      	uxtb	r2, r2
 8000824:	701a      	strb	r2, [r3, #0]
 8000826:	e003      	b.n	8000830 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else
    {
      status = HAL_ERROR;
 8000828:	2317      	movs	r3, #23
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8000830:	2317      	movs	r3, #23
 8000832:	18fb      	adds	r3, r7, r3
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d007      	beq.n	800084a <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800083a:	2317      	movs	r3, #23
 800083c:	18fc      	adds	r4, r7, r3
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_FLASHEx_DATAEEPROM_Program+0xb0>)
 8000840:	0018      	movs	r0, r3
 8000842:	f7ff fe6f 	bl	8000524 <FLASH_WaitForLastOperation>
 8000846:	0003      	movs	r3, r0
 8000848:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800084c:	2200      	movs	r2, #0
 800084e:	741a      	strb	r2, [r3, #16]

  return status;
 8000850:	2317      	movs	r3, #23
 8000852:	18fb      	adds	r3, r7, r3
 8000854:	781b      	ldrb	r3, [r3, #0]
}
 8000856:	0018      	movs	r0, r3
 8000858:	46bd      	mov	sp, r7
 800085a:	b007      	add	sp, #28
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	200002d0 	.word	0x200002d0
 8000864:	0000c350 	.word	0x0000c350

08000868 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b086      	sub	sp, #24
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800087e:	e14f      	b.n	8000b20 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	697a      	ldr	r2, [r7, #20]
 8000888:	4091      	lsls	r1, r2
 800088a:	000a      	movs	r2, r1
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d100      	bne.n	8000898 <HAL_GPIO_Init+0x30>
 8000896:	e140      	b.n	8000b1a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	2b02      	cmp	r3, #2
 800089e:	d003      	beq.n	80008a8 <HAL_GPIO_Init+0x40>
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b12      	cmp	r3, #18
 80008a6:	d123      	bne.n	80008f0 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	08da      	lsrs	r2, r3, #3
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3208      	adds	r2, #8
 80008b0:	0092      	lsls	r2, r2, #2
 80008b2:	58d3      	ldr	r3, [r2, r3]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2207      	movs	r2, #7
 80008ba:	4013      	ands	r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	220f      	movs	r2, #15
 80008c0:	409a      	lsls	r2, r3
 80008c2:	0013      	movs	r3, r2
 80008c4:	43da      	mvns	r2, r3
 80008c6:	693b      	ldr	r3, [r7, #16]
 80008c8:	4013      	ands	r3, r2
 80008ca:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	691a      	ldr	r2, [r3, #16]
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	2107      	movs	r1, #7
 80008d4:	400b      	ands	r3, r1
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	409a      	lsls	r2, r3
 80008da:	0013      	movs	r3, r2
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	4313      	orrs	r3, r2
 80008e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80008e2:	697b      	ldr	r3, [r7, #20]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	0092      	lsls	r2, r2, #2
 80008ec:	6939      	ldr	r1, [r7, #16]
 80008ee:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d00b      	beq.n	8000910 <HAL_GPIO_Init+0xa8>
 80008f8:	683b      	ldr	r3, [r7, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d007      	beq.n	8000910 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000904:	2b11      	cmp	r3, #17
 8000906:	d003      	beq.n	8000910 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	2b12      	cmp	r3, #18
 800090e:	d130      	bne.n	8000972 <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689b      	ldr	r3, [r3, #8]
 8000914:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000916:	697b      	ldr	r3, [r7, #20]
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	2203      	movs	r2, #3
 800091c:	409a      	lsls	r2, r3
 800091e:	0013      	movs	r3, r2
 8000920:	43da      	mvns	r2, r3
 8000922:	693b      	ldr	r3, [r7, #16]
 8000924:	4013      	ands	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	68da      	ldr	r2, [r3, #12]
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	409a      	lsls	r2, r3
 8000932:	0013      	movs	r3, r2
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4313      	orrs	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000946:	2201      	movs	r2, #1
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	409a      	lsls	r2, r3
 800094c:	0013      	movs	r3, r2
 800094e:	43da      	mvns	r2, r3
 8000950:	693b      	ldr	r3, [r7, #16]
 8000952:	4013      	ands	r3, r2
 8000954:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	091b      	lsrs	r3, r3, #4
 800095c:	2201      	movs	r2, #1
 800095e:	401a      	ands	r2, r3
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	409a      	lsls	r2, r3
 8000964:	0013      	movs	r3, r2
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4313      	orrs	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	2203      	movs	r2, #3
 800097e:	409a      	lsls	r2, r3
 8000980:	0013      	movs	r3, r2
 8000982:	43da      	mvns	r2, r3
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	4013      	ands	r3, r2
 8000988:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2203      	movs	r2, #3
 8000990:	401a      	ands	r2, r3
 8000992:	697b      	ldr	r3, [r7, #20]
 8000994:	005b      	lsls	r3, r3, #1
 8000996:	409a      	lsls	r2, r3
 8000998:	0013      	movs	r3, r2
 800099a:	693a      	ldr	r2, [r7, #16]
 800099c:	4313      	orrs	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	68db      	ldr	r3, [r3, #12]
 80009aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	2203      	movs	r2, #3
 80009b2:	409a      	lsls	r2, r3
 80009b4:	0013      	movs	r3, r2
 80009b6:	43da      	mvns	r2, r3
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	409a      	lsls	r2, r3
 80009c8:	0013      	movs	r3, r2
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685a      	ldr	r2, [r3, #4]
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	055b      	lsls	r3, r3, #21
 80009de:	4013      	ands	r3, r2
 80009e0:	d100      	bne.n	80009e4 <HAL_GPIO_Init+0x17c>
 80009e2:	e09a      	b.n	8000b1a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b54      	ldr	r3, [pc, #336]	; (8000b38 <HAL_GPIO_Init+0x2d0>)
 80009e6:	4a54      	ldr	r2, [pc, #336]	; (8000b38 <HAL_GPIO_Init+0x2d0>)
 80009e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80009ea:	2101      	movs	r1, #1
 80009ec:	430a      	orrs	r2, r1
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 80009f0:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <HAL_GPIO_Init+0x2d4>)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	589b      	ldr	r3, [r3, r2]
 80009fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	2203      	movs	r2, #3
 8000a02:	4013      	ands	r3, r2
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	409a      	lsls	r2, r3
 8000a0a:	0013      	movs	r3, r2
 8000a0c:	43da      	mvns	r2, r3
 8000a0e:	693b      	ldr	r3, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	05db      	lsls	r3, r3, #23
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d019      	beq.n	8000a52 <HAL_GPIO_Init+0x1ea>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	4a47      	ldr	r2, [pc, #284]	; (8000b40 <HAL_GPIO_Init+0x2d8>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d013      	beq.n	8000a4e <HAL_GPIO_Init+0x1e6>
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a46      	ldr	r2, [pc, #280]	; (8000b44 <HAL_GPIO_Init+0x2dc>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d00d      	beq.n	8000a4a <HAL_GPIO_Init+0x1e2>
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a45      	ldr	r2, [pc, #276]	; (8000b48 <HAL_GPIO_Init+0x2e0>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d007      	beq.n	8000a46 <HAL_GPIO_Init+0x1de>
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a44      	ldr	r2, [pc, #272]	; (8000b4c <HAL_GPIO_Init+0x2e4>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d101      	bne.n	8000a42 <HAL_GPIO_Init+0x1da>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a42:	2306      	movs	r3, #6
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x1ec>
 8000a52:	2300      	movs	r3, #0
 8000a54:	697a      	ldr	r2, [r7, #20]
 8000a56:	2103      	movs	r1, #3
 8000a58:	400a      	ands	r2, r1
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a64:	4935      	ldr	r1, [pc, #212]	; (8000b3c <HAL_GPIO_Init+0x2d4>)
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	693b      	ldr	r3, [r7, #16]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685a      	ldr	r2, [r3, #4]
 8000a86:	2380      	movs	r3, #128	; 0x80
 8000a88:	025b      	lsls	r3, r3, #9
 8000a8a:	4013      	ands	r3, r2
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000a96:	4b2e      	ldr	r3, [pc, #184]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000a9c:	4b2c      	ldr	r3, [pc, #176]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	43da      	mvns	r2, r3
 8000aa6:	693b      	ldr	r3, [r7, #16]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685a      	ldr	r2, [r3, #4]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	029b      	lsls	r3, r3, #10
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ac0:	4b23      	ldr	r3, [pc, #140]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac6:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	43da      	mvns	r2, r3
 8000ad0:	693b      	ldr	r3, [r7, #16]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	035b      	lsls	r3, r3, #13
 8000ade:	4013      	ands	r3, r2
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000aea:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	43da      	mvns	r2, r3
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	4013      	ands	r3, r2
 8000afe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685a      	ldr	r2, [r3, #4]
 8000b04:	2380      	movs	r3, #128	; 0x80
 8000b06:	039b      	lsls	r3, r3, #14
 8000b08:	4013      	ands	r3, r2
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000b14:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <HAL_GPIO_Init+0x2e8>)
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	40da      	lsrs	r2, r3
 8000b28:	1e13      	subs	r3, r2, #0
 8000b2a:	d000      	beq.n	8000b2e <HAL_GPIO_Init+0x2c6>
 8000b2c:	e6a8      	b.n	8000880 <HAL_GPIO_Init+0x18>
  }
}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b006      	add	sp, #24
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40010000 	.word	0x40010000
 8000b40:	50000400 	.word	0x50000400
 8000b44:	50000800 	.word	0x50000800
 8000b48:	50000c00 	.word	0x50000c00
 8000b4c:	50001c00 	.word	0x50001c00
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	0008      	movs	r0, r1
 8000b5e:	0011      	movs	r1, r2
 8000b60:	1cbb      	adds	r3, r7, #2
 8000b62:	1c02      	adds	r2, r0, #0
 8000b64:	801a      	strh	r2, [r3, #0]
 8000b66:	1c7b      	adds	r3, r7, #1
 8000b68:	1c0a      	adds	r2, r1, #0
 8000b6a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000b6c:	1c7b      	adds	r3, r7, #1
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d004      	beq.n	8000b7e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b74:	1cbb      	adds	r3, r7, #2
 8000b76:	881a      	ldrh	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000b7e:	1cbb      	adds	r3, r7, #2
 8000b80:	881a      	ldrh	r2, [r3, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0U;
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	18fb      	adds	r3, r7, r3
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d101      	bne.n	8000bae <HAL_LCD_Init+0x1e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e0ba      	b.n	8000d24 <HAL_LCD_Init+0x194>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2235      	movs	r2, #53	; 0x35
 8000bb2:	5c9b      	ldrb	r3, [r3, r2]
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d107      	bne.n	8000bca <HAL_LCD_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    __HAL_UNLOCK(hlcd);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2234      	movs	r2, #52	; 0x34
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	5499      	strb	r1, [r3, r2]

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	f000 f8b3 	bl	8000d30 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	2235      	movs	r2, #53	; 0x35
 8000bce:	2102      	movs	r1, #2
 8000bd0:	5499      	strb	r1, [r3, r2]
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	6812      	ldr	r2, [r2, #0]
 8000bda:	6812      	ldr	r2, [r2, #0]
 8000bdc:	2101      	movs	r1, #1
 8000bde:	438a      	bics	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000be2:	230f      	movs	r3, #15
 8000be4:	18fb      	adds	r3, r7, r3
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
 8000bea:	e011      	b.n	8000c10 <HAL_LCD_Init+0x80>
  {
    hlcd->Instance->RAM[counter] = 0U;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	18d3      	adds	r3, r2, r3
 8000bfc:	3304      	adds	r3, #4
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	230f      	movs	r3, #15
 8000c0a:	18fb      	adds	r3, r7, r3
 8000c0c:	3201      	adds	r2, #1
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	230f      	movs	r3, #15
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2b0f      	cmp	r3, #15
 8000c18:	d9e8      	bls.n	8000bec <HAL_LCD_Init+0x5c>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	6812      	ldr	r2, [r2, #0]
 8000c22:	6892      	ldr	r2, [r2, #8]
 8000c24:	2104      	movs	r1, #4
 8000c26:	430a      	orrs	r2, r1
 8000c28:	609a      	str	r2, [r3, #8]
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value*/

  MODIFY_REG(hlcd->Instance->FCR, \
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	687a      	ldr	r2, [r7, #4]
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	6852      	ldr	r2, [r2, #4]
 8000c34:	493d      	ldr	r1, [pc, #244]	; (8000d2c <HAL_LCD_Init+0x19c>)
 8000c36:	4011      	ands	r1, r2
 8000c38:	687a      	ldr	r2, [r7, #4]
 8000c3a:	6850      	ldr	r0, [r2, #4]
 8000c3c:	687a      	ldr	r2, [r7, #4]
 8000c3e:	6892      	ldr	r2, [r2, #8]
 8000c40:	4310      	orrs	r0, r2
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000c46:	4310      	orrs	r0, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000c4c:	4310      	orrs	r0, r2
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	69d2      	ldr	r2, [r2, #28]
 8000c52:	4310      	orrs	r0, r2
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	6a12      	ldr	r2, [r2, #32]
 8000c58:	4310      	orrs	r0, r2
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6992      	ldr	r2, [r2, #24]
 8000c5e:	4310      	orrs	r0, r2
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000c64:	4302      	orrs	r2, r0
 8000c66:	430a      	orrs	r2, r1
 8000c68:	605a      	str	r2, [r3, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f000 f965 	bl	8000f3c <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	6812      	ldr	r2, [r2, #0]
 8000c7a:	6812      	ldr	r2, [r2, #0]
 8000c7c:	21fe      	movs	r1, #254	; 0xfe
 8000c7e:	438a      	bics	r2, r1
 8000c80:	0011      	movs	r1, r2
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d0      	ldr	r0, [r2, #12]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6912      	ldr	r2, [r2, #16]
 8000c8a:	4310      	orrs	r0, r2
 8000c8c:	687a      	ldr	r2, [r7, #4]
 8000c8e:	6952      	ldr	r2, [r2, #20]
 8000c90:	4310      	orrs	r0, r2
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000c96:	4302      	orrs	r2, r0
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	6812      	ldr	r2, [r2, #0]
 8000ca4:	6812      	ldr	r2, [r2, #0]
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000cac:	f7ff fb0e 	bl	80002cc <HAL_GetTick>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	60bb      	str	r3, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000cb4:	e00d      	b.n	8000cd2 <HAL_LCD_Init+0x142>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000cb6:	f7ff fb09 	bl	80002cc <HAL_GetTick>
 8000cba:	0002      	movs	r2, r0
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	1ad2      	subs	r2, r2, r3
 8000cc0:	23fa      	movs	r3, #250	; 0xfa
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d904      	bls.n	8000cd2 <HAL_LCD_Init+0x142>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2208      	movs	r2, #8
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	e028      	b.n	8000d24 <HAL_LCD_Init+0x194>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b01      	cmp	r3, #1
 8000cde:	d1ea      	bne.n	8000cb6 <HAL_LCD_Init+0x126>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ce0:	f7ff faf4 	bl	80002cc <HAL_GetTick>
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	60bb      	str	r3, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000ce8:	e00d      	b.n	8000d06 <HAL_LCD_Init+0x176>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000cea:	f7ff faef 	bl	80002cc <HAL_GetTick>
 8000cee:	0002      	movs	r2, r0
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	1ad2      	subs	r2, r2, r3
 8000cf4:	23fa      	movs	r3, #250	; 0xfa
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d904      	bls.n	8000d06 <HAL_LCD_Init+0x176>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2210      	movs	r2, #16
 8000d00:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000d02:	2303      	movs	r3, #3
 8000d04:	e00e      	b.n	8000d24 <HAL_LCD_Init+0x194>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	2210      	movs	r2, #16
 8000d0e:	4013      	ands	r3, r2
 8000d10:	2b10      	cmp	r3, #16
 8000d12:	d1ea      	bne.n	8000cea <HAL_LCD_Init+0x15a>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2235      	movs	r2, #53	; 0x35
 8000d1e:	2101      	movs	r1, #1
 8000d20:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000d22:	2300      	movs	r3, #0
}
 8000d24:	0018      	movs	r0, r3
 8000d26:	46bd      	mov	sp, r7
 8000d28:	b004      	add	sp, #16
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	fc00000f 	.word	0xfc00000f

08000d30 <HAL_LCD_MspInit>:
  * @brief  LCD MSP Init.
  * @param  hlcd LCD handle
  * @retval None
  */
 __weak void HAL_LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  UNUSED(hlcd);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_LCD_MspInit could be implemented in the user file
   */ 
}
 8000d38:	46c0      	nop			; (mov r8, r8)
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	b002      	add	sp, #8
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <HAL_LCD_Write>:
  *		    SEG[0,39] of COM(n) correspond to LSB bits of related LCD_RAM_REGISTER(2*n)[0,31]
  *		    and LCD_RAM_REGISTER(2*n+1)[0,7] 
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
 8000d4c:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0x00U; 
 8000d4e:	2300      	movs	r3, #0
 8000d50:	617b      	str	r3, [r7, #20]
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2235      	movs	r2, #53	; 0x35
 8000d56:	5c9b      	ldrb	r3, [r3, r2]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	2b01      	cmp	r3, #1
 8000d5c:	d005      	beq.n	8000d6a <HAL_LCD_Write+0x2a>
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	2235      	movs	r2, #53	; 0x35
 8000d62:	5c9b      	ldrb	r3, [r3, r2]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d148      	bne.n	8000dfc <HAL_LCD_Write+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));
    
    if(hlcd->State == HAL_LCD_STATE_READY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	2235      	movs	r2, #53	; 0x35
 8000d6e:	5c9b      	ldrb	r3, [r3, r2]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d12c      	bne.n	8000dd0 <HAL_LCD_Write+0x90>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	2234      	movs	r2, #52	; 0x34
 8000d7a:	5c9b      	ldrb	r3, [r3, r2]
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d101      	bne.n	8000d84 <HAL_LCD_Write+0x44>
 8000d80:	2302      	movs	r3, #2
 8000d82:	e03c      	b.n	8000dfe <HAL_LCD_Write+0xbe>
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2234      	movs	r2, #52	; 0x34
 8000d88:	2101      	movs	r1, #1
 8000d8a:	5499      	strb	r1, [r3, r2]
      hlcd->State = HAL_LCD_STATE_BUSY;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2235      	movs	r2, #53	; 0x35
 8000d90:	2102      	movs	r1, #2
 8000d92:	5499      	strb	r1, [r3, r2]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000d94:	f7ff fa9a 	bl	80002cc <HAL_GetTick>
 8000d98:	0003      	movs	r3, r0
 8000d9a:	617b      	str	r3, [r7, #20]
      
      /*!< Wait Until the LCD is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000d9c:	e011      	b.n	8000dc2 <HAL_LCD_Write+0x82>
      {
        if((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d9e:	f7ff fa95 	bl	80002cc <HAL_GetTick>
 8000da2:	0002      	movs	r2, r0
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	1ad2      	subs	r2, r2, r3
 8000da8:	23fa      	movs	r3, #250	; 0xfa
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d908      	bls.n	8000dc2 <HAL_LCD_Write+0x82>
        { 
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;      
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	2202      	movs	r2, #2
 8000db4:	639a      	str	r2, [r3, #56]	; 0x38
          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2234      	movs	r2, #52	; 0x34
 8000dba:	2100      	movs	r1, #0
 8000dbc:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000dbe:	2303      	movs	r3, #3
 8000dc0:	e01d      	b.n	8000dfe <HAL_LCD_Write+0xbe>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	689b      	ldr	r3, [r3, #8]
 8000dc8:	2204      	movs	r2, #4
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d0e6      	beq.n	8000d9e <HAL_LCD_Write+0x5e>
        } 
      }
    }
/* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6819      	ldr	r1, [r3, #0]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	3304      	adds	r3, #4
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	3304      	adds	r3, #4
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	401a      	ands	r2, r3
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	431a      	orrs	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	3304      	adds	r3, #4
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	18cb      	adds	r3, r1, r3
 8000df4:	3304      	adds	r3, #4
 8000df6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	e000      	b.n	8000dfe <HAL_LCD_Write+0xbe>
  }
  else
  {
    return HAL_ERROR;
 8000dfc:	2301      	movs	r3, #1
  }
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b006      	add	sp, #24
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <HAL_LCD_Clear>:
  * @brief Clears the LCD RAM registers.
  * @param hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8000e06:	b580      	push	{r7, lr}
 8000e08:	b084      	sub	sp, #16
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U; 
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60bb      	str	r3, [r7, #8]
  uint32_t counter = 0U;
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]

  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2235      	movs	r2, #53	; 0x35
 8000e1a:	5c9b      	ldrb	r3, [r3, r2]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d005      	beq.n	8000e2e <HAL_LCD_Clear+0x28>
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	2235      	movs	r2, #53	; 0x35
 8000e26:	5c9b      	ldrb	r3, [r3, r2]
 8000e28:	b2db      	uxtb	r3, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d144      	bne.n	8000eb8 <HAL_LCD_Clear+0xb2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2234      	movs	r2, #52	; 0x34
 8000e32:	5c9b      	ldrb	r3, [r3, r2]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d101      	bne.n	8000e3c <HAL_LCD_Clear+0x36>
 8000e38:	2302      	movs	r3, #2
 8000e3a:	e03e      	b.n	8000eba <HAL_LCD_Clear+0xb4>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2234      	movs	r2, #52	; 0x34
 8000e40:	2101      	movs	r1, #1
 8000e42:	5499      	strb	r1, [r3, r2]
    
    hlcd->State = HAL_LCD_STATE_BUSY;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2235      	movs	r2, #53	; 0x35
 8000e48:	2102      	movs	r1, #2
 8000e4a:	5499      	strb	r1, [r3, r2]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000e4c:	f7ff fa3e 	bl	80002cc <HAL_GetTick>
 8000e50:	0003      	movs	r3, r0
 8000e52:	60bb      	str	r3, [r7, #8]
    
    /*!< Wait Until the LCD is ready */
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000e54:	e011      	b.n	8000e7a <HAL_LCD_Clear+0x74>
    {
      if( (HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000e56:	f7ff fa39 	bl	80002cc <HAL_GetTick>
 8000e5a:	0002      	movs	r2, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1ad2      	subs	r2, r2, r3
 8000e60:	23fa      	movs	r3, #250	; 0xfa
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	429a      	cmp	r2, r3
 8000e66:	d908      	bls.n	8000e7a <HAL_LCD_Clear+0x74>
      { 
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2234      	movs	r2, #52	; 0x34
 8000e72:	2100      	movs	r1, #0
 8000e74:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e01f      	b.n	8000eba <HAL_LCD_Clear+0xb4>
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	2204      	movs	r2, #4
 8000e82:	4013      	ands	r3, r2
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d0e6      	beq.n	8000e56 <HAL_LCD_Clear+0x50>
      } 
    }
    /* Clear the LCD_RAM registers */
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	e00b      	b.n	8000ea6 <HAL_LCD_Clear+0xa0>
    {
      hlcd->Instance->RAM[counter] = 0U;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	3304      	adds	r3, #4
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	18d3      	adds	r3, r2, r3
 8000e9a:	3304      	adds	r3, #4
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d9f0      	bls.n	8000e8e <HAL_LCD_Clear+0x88>
    }
    
    /* Update the LCD display */
    HAL_LCD_UpdateDisplayRequest(hlcd);     
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 f807 	bl	8000ec2 <HAL_LCD_UpdateDisplayRequest>
    
    return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	e000      	b.n	8000eba <HAL_LCD_Clear+0xb4>
  }
  else
  {
    return HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
  }
}
 8000eba:	0018      	movs	r0, r3
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b004      	add	sp, #16
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if 
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.    
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2208      	movs	r2, #8
 8000ed4:	60da      	str	r2, [r3, #12]
  
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	6892      	ldr	r2, [r2, #8]
 8000ee0:	2104      	movs	r1, #4
 8000ee2:	430a      	orrs	r2, r1
 8000ee4:	609a      	str	r2, [r3, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000ee6:	f7ff f9f1 	bl	80002cc <HAL_GetTick>
 8000eea:	0003      	movs	r3, r0
 8000eec:	60fb      	str	r3, [r7, #12]
  
  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000eee:	e011      	b.n	8000f14 <HAL_LCD_UpdateDisplayRequest+0x52>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000ef0:	f7ff f9ec 	bl	80002cc <HAL_GetTick>
 8000ef4:	0002      	movs	r2, r0
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1ad2      	subs	r2, r2, r3
 8000efa:	23fa      	movs	r3, #250	; 0xfa
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d908      	bls.n	8000f14 <HAL_LCD_UpdateDisplayRequest+0x52>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2204      	movs	r2, #4
 8000f06:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2234      	movs	r2, #52	; 0x34
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	5499      	strb	r1, [r3, r2]
  
      return HAL_TIMEOUT;
 8000f10:	2303      	movs	r3, #3
 8000f12:	e00f      	b.n	8000f34 <HAL_LCD_UpdateDisplayRequest+0x72>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d1e6      	bne.n	8000ef0 <HAL_LCD_UpdateDisplayRequest+0x2e>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2235      	movs	r2, #53	; 0x35
 8000f26:	2101      	movs	r1, #1
 8000f28:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2234      	movs	r2, #52	; 0x34
 8000f2e:	2100      	movs	r1, #0
 8000f30:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000f32:	2300      	movs	r3, #0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b004      	add	sp, #16
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <LCD_WaitForSynchro>:
  *   This function must be called after any write operation to LCD_FCR register.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U; 
 8000f44:	2300      	movs	r3, #0
 8000f46:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000f48:	f7ff f9c0 	bl	80002cc <HAL_GetTick>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	60fb      	str	r3, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000f50:	e00d      	b.n	8000f6e <LCD_WaitForSynchro+0x32>
  {
    if((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000f52:	f7ff f9bb 	bl	80002cc <HAL_GetTick>
 8000f56:	0002      	movs	r2, r0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	1ad2      	subs	r2, r2, r3
 8000f5c:	23fa      	movs	r3, #250	; 0xfa
 8000f5e:	009b      	lsls	r3, r3, #2
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d904      	bls.n	8000f6e <LCD_WaitForSynchro+0x32>
    {       
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e007      	b.n	8000f7e <LCD_WaitForSynchro+0x42>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	2220      	movs	r2, #32
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b20      	cmp	r3, #32
 8000f7a:	d1ea      	bne.n	8000f52 <LCD_WaitForSynchro+0x16>
    } 
  }

  return HAL_OK;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b004      	add	sp, #16
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_MspInit>:
  * @brief  Initializes the Global BSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* NOTE : This function is eventually modified by the user */ 
}
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b590      	push	{r4, r7, lr}
 8000f92:	b08b      	sub	sp, #44	; 0x2c
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d102      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f000 fba8 	bl	80016f4 <HAL_RCC_OscConfig+0x764>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000fa4:	4bcd      	ldr	r3, [pc, #820]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	220c      	movs	r2, #12
 8000faa:	4013      	ands	r3, r2
 8000fac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000fae:	4bcb      	ldr	r3, [pc, #812]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	2380      	movs	r3, #128	; 0x80
 8000fb4:	025b      	lsls	r3, r3, #9
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	d100      	bne.n	8000fc6 <HAL_RCC_OscConfig+0x36>
 8000fc4:	e07e      	b.n	80010c4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fc6:	6a3b      	ldr	r3, [r7, #32]
 8000fc8:	2b08      	cmp	r3, #8
 8000fca:	d007      	beq.n	8000fdc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	2b0c      	cmp	r3, #12
 8000fd0:	d112      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x68>
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	2380      	movs	r3, #128	; 0x80
 8000fd6:	025b      	lsls	r3, r3, #9
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d10d      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fdc:	4bbf      	ldr	r3, [pc, #764]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	029b      	lsls	r3, r3, #10
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d100      	bne.n	8000fea <HAL_RCC_OscConfig+0x5a>
 8000fe8:	e06b      	b.n	80010c2 <HAL_RCC_OscConfig+0x132>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d167      	bne.n	80010c2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	f000 fb7e 	bl	80016f4 <HAL_RCC_OscConfig+0x764>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	025b      	lsls	r3, r3, #9
 8001000:	429a      	cmp	r2, r3
 8001002:	d107      	bne.n	8001014 <HAL_RCC_OscConfig+0x84>
 8001004:	4bb5      	ldr	r3, [pc, #724]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001006:	4ab5      	ldr	r2, [pc, #724]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001008:	6812      	ldr	r2, [r2, #0]
 800100a:	2180      	movs	r1, #128	; 0x80
 800100c:	0249      	lsls	r1, r1, #9
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	e027      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	23a0      	movs	r3, #160	; 0xa0
 800101a:	02db      	lsls	r3, r3, #11
 800101c:	429a      	cmp	r2, r3
 800101e:	d10e      	bne.n	800103e <HAL_RCC_OscConfig+0xae>
 8001020:	4bae      	ldr	r3, [pc, #696]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001022:	4aae      	ldr	r2, [pc, #696]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001024:	6812      	ldr	r2, [r2, #0]
 8001026:	2180      	movs	r1, #128	; 0x80
 8001028:	02c9      	lsls	r1, r1, #11
 800102a:	430a      	orrs	r2, r1
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4bab      	ldr	r3, [pc, #684]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001030:	4aaa      	ldr	r2, [pc, #680]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001032:	6812      	ldr	r2, [r2, #0]
 8001034:	2180      	movs	r1, #128	; 0x80
 8001036:	0249      	lsls	r1, r1, #9
 8001038:	430a      	orrs	r2, r1
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	e012      	b.n	8001064 <HAL_RCC_OscConfig+0xd4>
 800103e:	4ba7      	ldr	r3, [pc, #668]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001040:	4aa6      	ldr	r2, [pc, #664]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001042:	6812      	ldr	r2, [r2, #0]
 8001044:	49a6      	ldr	r1, [pc, #664]	; (80012e0 <HAL_RCC_OscConfig+0x350>)
 8001046:	400a      	ands	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	4ba4      	ldr	r3, [pc, #656]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	2380      	movs	r3, #128	; 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	4013      	ands	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	4ba0      	ldr	r3, [pc, #640]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800105a:	4aa0      	ldr	r2, [pc, #640]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800105c:	6812      	ldr	r2, [r2, #0]
 800105e:	49a1      	ldr	r1, [pc, #644]	; (80012e4 <HAL_RCC_OscConfig+0x354>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d015      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800106c:	f7ff f92e 	bl	80002cc <HAL_GetTick>
 8001070:	0003      	movs	r3, r0
 8001072:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001074:	e009      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001076:	f7ff f929 	bl	80002cc <HAL_GetTick>
 800107a:	0002      	movs	r2, r0
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b64      	cmp	r3, #100	; 0x64
 8001082:	d902      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	f000 fb35 	bl	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800108a:	4b94      	ldr	r3, [pc, #592]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	029b      	lsls	r3, r3, #10
 8001092:	4013      	ands	r3, r2
 8001094:	d0ef      	beq.n	8001076 <HAL_RCC_OscConfig+0xe6>
 8001096:	e015      	b.n	80010c4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001098:	f7ff f918 	bl	80002cc <HAL_GetTick>
 800109c:	0003      	movs	r3, r0
 800109e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010a0:	e008      	b.n	80010b4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80010a2:	f7ff f913 	bl	80002cc <HAL_GetTick>
 80010a6:	0002      	movs	r2, r0
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	2b64      	cmp	r3, #100	; 0x64
 80010ae:	d901      	bls.n	80010b4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80010b0:	2303      	movs	r3, #3
 80010b2:	e31f      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80010b4:	4b89      	ldr	r3, [pc, #548]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	2380      	movs	r3, #128	; 0x80
 80010ba:	029b      	lsls	r3, r3, #10
 80010bc:	4013      	ands	r3, r2
 80010be:	d1f0      	bne.n	80010a2 <HAL_RCC_OscConfig+0x112>
 80010c0:	e000      	b.n	80010c4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2202      	movs	r2, #2
 80010ca:	4013      	ands	r3, r2
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x140>
 80010ce:	e089      	b.n	80011e4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80010d6:	6a3b      	ldr	r3, [r7, #32]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	d005      	beq.n	80010e8 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80010dc:	6a3b      	ldr	r3, [r7, #32]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d13d      	bne.n	800115e <HAL_RCC_OscConfig+0x1ce>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d13a      	bne.n	800115e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80010e8:	4b7c      	ldr	r3, [pc, #496]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2204      	movs	r2, #4
 80010ee:	4013      	ands	r3, r2
 80010f0:	d004      	beq.n	80010fc <HAL_RCC_OscConfig+0x16c>
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d101      	bne.n	80010fc <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e2fb      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4a77      	ldr	r2, [pc, #476]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80010fe:	4b77      	ldr	r3, [pc, #476]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	4979      	ldr	r1, [pc, #484]	; (80012e8 <HAL_RCC_OscConfig+0x358>)
 8001104:	4019      	ands	r1, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	430b      	orrs	r3, r1
 800110e:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001110:	4b72      	ldr	r3, [pc, #456]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001112:	4a72      	ldr	r2, [pc, #456]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	2109      	movs	r1, #9
 8001118:	438a      	bics	r2, r1
 800111a:	0011      	movs	r1, r2
 800111c:	697a      	ldr	r2, [r7, #20]
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001122:	f000 fc1b 	bl	800195c <HAL_RCC_GetSysClockFreq>
 8001126:	0001      	movs	r1, r0
 8001128:	4b6c      	ldr	r3, [pc, #432]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	091b      	lsrs	r3, r3, #4
 800112e:	220f      	movs	r2, #15
 8001130:	4013      	ands	r3, r2
 8001132:	4a6e      	ldr	r2, [pc, #440]	; (80012ec <HAL_RCC_OscConfig+0x35c>)
 8001134:	5cd3      	ldrb	r3, [r2, r3]
 8001136:	000a      	movs	r2, r1
 8001138:	40da      	lsrs	r2, r3
 800113a:	4b6d      	ldr	r3, [pc, #436]	; (80012f0 <HAL_RCC_OscConfig+0x360>)
 800113c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 800113e:	2313      	movs	r3, #19
 8001140:	18fc      	adds	r4, r7, r3
 8001142:	2003      	movs	r0, #3
 8001144:	f7ff f88c 	bl	8000260 <HAL_InitTick>
 8001148:	0003      	movs	r3, r0
 800114a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800114c:	2313      	movs	r3, #19
 800114e:	18fb      	adds	r3, r7, r3
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d046      	beq.n	80011e4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001156:	2313      	movs	r3, #19
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	e2ca      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d026      	beq.n	80011b2 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001164:	4b5d      	ldr	r3, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001168:	6812      	ldr	r2, [r2, #0]
 800116a:	2109      	movs	r1, #9
 800116c:	438a      	bics	r2, r1
 800116e:	0011      	movs	r1, r2
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	430a      	orrs	r2, r1
 8001174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001176:	f7ff f8a9 	bl	80002cc <HAL_GetTick>
 800117a:	0003      	movs	r3, r0
 800117c:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001180:	f7ff f8a4 	bl	80002cc <HAL_GetTick>
 8001184:	0002      	movs	r2, r0
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b02      	cmp	r3, #2
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e2b0      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001192:	4b52      	ldr	r3, [pc, #328]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	2204      	movs	r2, #4
 8001198:	4013      	ands	r3, r2
 800119a:	d0f1      	beq.n	8001180 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800119c:	4a4f      	ldr	r2, [pc, #316]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 800119e:	4b4f      	ldr	r3, [pc, #316]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	4951      	ldr	r1, [pc, #324]	; (80012e8 <HAL_RCC_OscConfig+0x358>)
 80011a4:	4019      	ands	r1, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	691b      	ldr	r3, [r3, #16]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	430b      	orrs	r3, r1
 80011ae:	6053      	str	r3, [r2, #4]
 80011b0:	e018      	b.n	80011e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80011b4:	4a49      	ldr	r2, [pc, #292]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80011b6:	6812      	ldr	r2, [r2, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	438a      	bics	r2, r1
 80011bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011be:	f7ff f885 	bl	80002cc <HAL_GetTick>
 80011c2:	0003      	movs	r3, r0
 80011c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011c6:	e008      	b.n	80011da <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011c8:	f7ff f880 	bl	80002cc <HAL_GetTick>
 80011cc:	0002      	movs	r2, r0
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d901      	bls.n	80011da <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80011d6:	2303      	movs	r3, #3
 80011d8:	e28c      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2204      	movs	r2, #4
 80011e0:	4013      	ands	r3, r2
 80011e2:	d1f1      	bne.n	80011c8 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2210      	movs	r2, #16
 80011ea:	4013      	ands	r3, r2
 80011ec:	d100      	bne.n	80011f0 <HAL_RCC_OscConfig+0x260>
 80011ee:	e09d      	b.n	800132c <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d13f      	bne.n	8001276 <HAL_RCC_OscConfig+0x2e6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f6:	4b39      	ldr	r3, [pc, #228]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	2380      	movs	r3, #128	; 0x80
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	4013      	ands	r3, r2
 8001200:	d005      	beq.n	800120e <HAL_RCC_OscConfig+0x27e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69db      	ldr	r3, [r3, #28]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e272      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800120e:	4a33      	ldr	r2, [pc, #204]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001210:	4b32      	ldr	r3, [pc, #200]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4937      	ldr	r1, [pc, #220]	; (80012f4 <HAL_RCC_OscConfig+0x364>)
 8001216:	4019      	ands	r1, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	430b      	orrs	r3, r1
 800121e:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001220:	4a2e      	ldr	r2, [pc, #184]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	0a19      	lsrs	r1, r3, #8
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a1b      	ldr	r3, [r3, #32]
 800122e:	061b      	lsls	r3, r3, #24
 8001230:	430b      	orrs	r3, r1
 8001232:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001238:	0b5b      	lsrs	r3, r3, #13
 800123a:	3301      	adds	r3, #1
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	0212      	lsls	r2, r2, #8
 8001240:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001242:	4b26      	ldr	r3, [pc, #152]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	210f      	movs	r1, #15
 800124a:	400b      	ands	r3, r1
 800124c:	4927      	ldr	r1, [pc, #156]	; (80012ec <HAL_RCC_OscConfig+0x35c>)
 800124e:	5ccb      	ldrb	r3, [r1, r3]
 8001250:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001252:	4b27      	ldr	r3, [pc, #156]	; (80012f0 <HAL_RCC_OscConfig+0x360>)
 8001254:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001256:	2313      	movs	r3, #19
 8001258:	18fc      	adds	r4, r7, r3
 800125a:	2003      	movs	r0, #3
 800125c:	f7ff f800 	bl	8000260 <HAL_InitTick>
 8001260:	0003      	movs	r3, r0
 8001262:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001264:	2313      	movs	r3, #19
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d05e      	beq.n	800132c <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 800126e:	2313      	movs	r3, #19
 8001270:	18fb      	adds	r3, r7, r3
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	e23e      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	69db      	ldr	r3, [r3, #28]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d03c      	beq.n	80012f8 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001280:	4a16      	ldr	r2, [pc, #88]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 8001282:	6812      	ldr	r2, [r2, #0]
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	0049      	lsls	r1, r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800128c:	f7ff f81e 	bl	80002cc <HAL_GetTick>
 8001290:	0003      	movs	r3, r0
 8001292:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001294:	e008      	b.n	80012a8 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001296:	f7ff f819 	bl	80002cc <HAL_GetTick>
 800129a:	0002      	movs	r2, r0
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	1ad3      	subs	r3, r2, r3
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d901      	bls.n	80012a8 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e225      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	d0f0      	beq.n	8001296 <HAL_RCC_OscConfig+0x306>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012b4:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80012b6:	4b09      	ldr	r3, [pc, #36]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_OscConfig+0x364>)
 80012bc:	4019      	ands	r1, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c2:	430b      	orrs	r3, r1
 80012c4:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012c6:	4a05      	ldr	r2, [pc, #20]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80012c8:	4b04      	ldr	r3, [pc, #16]	; (80012dc <HAL_RCC_OscConfig+0x34c>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	0a19      	lsrs	r1, r3, #8
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	061b      	lsls	r3, r3, #24
 80012d6:	430b      	orrs	r3, r1
 80012d8:	6053      	str	r3, [r2, #4]
 80012da:	e027      	b.n	800132c <HAL_RCC_OscConfig+0x39c>
 80012dc:	40021000 	.word	0x40021000
 80012e0:	fffeffff 	.word	0xfffeffff
 80012e4:	fffbffff 	.word	0xfffbffff
 80012e8:	ffffe0ff 	.word	0xffffe0ff
 80012ec:	08005a4c 	.word	0x08005a4c
 80012f0:	20000004 	.word	0x20000004
 80012f4:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80012f8:	4bbd      	ldr	r3, [pc, #756]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80012fa:	4abd      	ldr	r2, [pc, #756]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	49bd      	ldr	r1, [pc, #756]	; (80015f4 <HAL_RCC_OscConfig+0x664>)
 8001300:	400a      	ands	r2, r1
 8001302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7fe ffe2 	bl	80002cc <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800130c:	e008      	b.n	8001320 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130e:	f7fe ffdd 	bl	80002cc <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	2b02      	cmp	r3, #2
 800131a:	d901      	bls.n	8001320 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800131c:	2303      	movs	r3, #3
 800131e:	e1e9      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001320:	4bb3      	ldr	r3, [pc, #716]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	2380      	movs	r3, #128	; 0x80
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d1f0      	bne.n	800130e <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2208      	movs	r2, #8
 8001332:	4013      	ands	r3, r2
 8001334:	d036      	beq.n	80013a4 <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d019      	beq.n	8001372 <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	4bac      	ldr	r3, [pc, #688]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001340:	4aab      	ldr	r2, [pc, #684]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001342:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001344:	2101      	movs	r1, #1
 8001346:	430a      	orrs	r2, r1
 8001348:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134a:	f7fe ffbf 	bl	80002cc <HAL_GetTick>
 800134e:	0003      	movs	r3, r0
 8001350:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001352:	e008      	b.n	8001366 <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001354:	f7fe ffba 	bl	80002cc <HAL_GetTick>
 8001358:	0002      	movs	r2, r0
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	2b02      	cmp	r3, #2
 8001360:	d901      	bls.n	8001366 <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 8001362:	2303      	movs	r3, #3
 8001364:	e1c6      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001366:	4ba2      	ldr	r3, [pc, #648]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800136a:	2202      	movs	r2, #2
 800136c:	4013      	ands	r3, r2
 800136e:	d0f1      	beq.n	8001354 <HAL_RCC_OscConfig+0x3c4>
 8001370:	e018      	b.n	80013a4 <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001372:	4b9f      	ldr	r3, [pc, #636]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001374:	4a9e      	ldr	r2, [pc, #632]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001376:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001378:	2101      	movs	r1, #1
 800137a:	438a      	bics	r2, r1
 800137c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800137e:	f7fe ffa5 	bl	80002cc <HAL_GetTick>
 8001382:	0003      	movs	r3, r0
 8001384:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001386:	e008      	b.n	800139a <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001388:	f7fe ffa0 	bl	80002cc <HAL_GetTick>
 800138c:	0002      	movs	r2, r0
 800138e:	69bb      	ldr	r3, [r7, #24]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	2b02      	cmp	r3, #2
 8001394:	d901      	bls.n	800139a <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e1ac      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800139a:	4b95      	ldr	r3, [pc, #596]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 800139c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800139e:	2202      	movs	r2, #2
 80013a0:	4013      	ands	r3, r2
 80013a2:	d1f1      	bne.n	8001388 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2204      	movs	r2, #4
 80013aa:	4013      	ands	r3, r2
 80013ac:	d100      	bne.n	80013b0 <HAL_RCC_OscConfig+0x420>
 80013ae:	e0af      	b.n	8001510 <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b0:	2327      	movs	r3, #39	; 0x27
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013b8:	4b8d      	ldr	r3, [pc, #564]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80013ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013bc:	2380      	movs	r3, #128	; 0x80
 80013be:	055b      	lsls	r3, r3, #21
 80013c0:	4013      	ands	r3, r2
 80013c2:	d10a      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c4:	4b8a      	ldr	r3, [pc, #552]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80013c6:	4a8a      	ldr	r2, [pc, #552]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80013c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	0549      	lsls	r1, r1, #21
 80013ce:	430a      	orrs	r2, r1
 80013d0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80013d2:	2327      	movs	r3, #39	; 0x27
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013da:	4b87      	ldr	r3, [pc, #540]	; (80015f8 <HAL_RCC_OscConfig+0x668>)
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	2380      	movs	r3, #128	; 0x80
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4013      	ands	r3, r2
 80013e4:	d11a      	bne.n	800141c <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013e6:	4b84      	ldr	r3, [pc, #528]	; (80015f8 <HAL_RCC_OscConfig+0x668>)
 80013e8:	4a83      	ldr	r2, [pc, #524]	; (80015f8 <HAL_RCC_OscConfig+0x668>)
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	2180      	movs	r1, #128	; 0x80
 80013ee:	0049      	lsls	r1, r1, #1
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013f4:	f7fe ff6a 	bl	80002cc <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013fe:	f7fe ff65 	bl	80002cc <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	69bb      	ldr	r3, [r7, #24]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b64      	cmp	r3, #100	; 0x64
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e171      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001410:	4b79      	ldr	r3, [pc, #484]	; (80015f8 <HAL_RCC_OscConfig+0x668>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	; 0x80
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689a      	ldr	r2, [r3, #8]
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	429a      	cmp	r2, r3
 8001426:	d107      	bne.n	8001438 <HAL_RCC_OscConfig+0x4a8>
 8001428:	4b71      	ldr	r3, [pc, #452]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 800142a:	4a71      	ldr	r2, [pc, #452]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 800142c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800142e:	2180      	movs	r1, #128	; 0x80
 8001430:	0049      	lsls	r1, r1, #1
 8001432:	430a      	orrs	r2, r1
 8001434:	651a      	str	r2, [r3, #80]	; 0x50
 8001436:	e031      	b.n	800149c <HAL_RCC_OscConfig+0x50c>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d10c      	bne.n	800145a <HAL_RCC_OscConfig+0x4ca>
 8001440:	4b6b      	ldr	r3, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001442:	4a6b      	ldr	r2, [pc, #428]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001444:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001446:	496b      	ldr	r1, [pc, #428]	; (80015f4 <HAL_RCC_OscConfig+0x664>)
 8001448:	400a      	ands	r2, r1
 800144a:	651a      	str	r2, [r3, #80]	; 0x50
 800144c:	4b68      	ldr	r3, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 800144e:	4a68      	ldr	r2, [pc, #416]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001450:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001452:	496a      	ldr	r1, [pc, #424]	; (80015fc <HAL_RCC_OscConfig+0x66c>)
 8001454:	400a      	ands	r2, r1
 8001456:	651a      	str	r2, [r3, #80]	; 0x50
 8001458:	e020      	b.n	800149c <HAL_RCC_OscConfig+0x50c>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689a      	ldr	r2, [r3, #8]
 800145e:	23a0      	movs	r3, #160	; 0xa0
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	429a      	cmp	r2, r3
 8001464:	d10e      	bne.n	8001484 <HAL_RCC_OscConfig+0x4f4>
 8001466:	4b62      	ldr	r3, [pc, #392]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001468:	4a61      	ldr	r2, [pc, #388]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 800146a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800146c:	2180      	movs	r1, #128	; 0x80
 800146e:	00c9      	lsls	r1, r1, #3
 8001470:	430a      	orrs	r2, r1
 8001472:	651a      	str	r2, [r3, #80]	; 0x50
 8001474:	4b5e      	ldr	r3, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001476:	4a5e      	ldr	r2, [pc, #376]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	0049      	lsls	r1, r1, #1
 800147e:	430a      	orrs	r2, r1
 8001480:	651a      	str	r2, [r3, #80]	; 0x50
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0x50c>
 8001484:	4b5a      	ldr	r3, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001486:	4a5a      	ldr	r2, [pc, #360]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001488:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800148a:	495a      	ldr	r1, [pc, #360]	; (80015f4 <HAL_RCC_OscConfig+0x664>)
 800148c:	400a      	ands	r2, r1
 800148e:	651a      	str	r2, [r3, #80]	; 0x50
 8001490:	4b57      	ldr	r3, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001492:	4a57      	ldr	r2, [pc, #348]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001494:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001496:	4959      	ldr	r1, [pc, #356]	; (80015fc <HAL_RCC_OscConfig+0x66c>)
 8001498:	400a      	ands	r2, r1
 800149a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d015      	beq.n	80014d0 <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a4:	f7fe ff12 	bl	80002cc <HAL_GetTick>
 80014a8:	0003      	movs	r3, r0
 80014aa:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014ac:	e009      	b.n	80014c2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ae:	f7fe ff0d 	bl	80002cc <HAL_GetTick>
 80014b2:	0002      	movs	r2, r0
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	4a51      	ldr	r2, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x670>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e118      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80014c2:	4b4b      	ldr	r3, [pc, #300]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80014c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014c6:	2380      	movs	r3, #128	; 0x80
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d0ef      	beq.n	80014ae <HAL_RCC_OscConfig+0x51e>
 80014ce:	e014      	b.n	80014fa <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7fe fefc 	bl	80002cc <HAL_GetTick>
 80014d4:	0003      	movs	r3, r0
 80014d6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014d8:	e009      	b.n	80014ee <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014da:	f7fe fef7 	bl	80002cc <HAL_GetTick>
 80014de:	0002      	movs	r2, r0
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_RCC_OscConfig+0x670>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e102      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80014f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80014f2:	2380      	movs	r3, #128	; 0x80
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	4013      	ands	r3, r2
 80014f8:	d1ef      	bne.n	80014da <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014fa:	2327      	movs	r3, #39	; 0x27
 80014fc:	18fb      	adds	r3, r7, r3
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b01      	cmp	r3, #1
 8001502:	d105      	bne.n	8001510 <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001504:	4b3a      	ldr	r3, [pc, #232]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001506:	4a3a      	ldr	r2, [pc, #232]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001508:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800150a:	493e      	ldr	r1, [pc, #248]	; (8001604 <HAL_RCC_OscConfig+0x674>)
 800150c:	400a      	ands	r2, r1
 800150e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2220      	movs	r2, #32
 8001516:	4013      	ands	r3, r2
 8001518:	d049      	beq.n	80015ae <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	699b      	ldr	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d026      	beq.n	8001570 <HAL_RCC_OscConfig+0x5e0>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001522:	4b33      	ldr	r3, [pc, #204]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001524:	4a32      	ldr	r2, [pc, #200]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001526:	6892      	ldr	r2, [r2, #8]
 8001528:	2101      	movs	r1, #1
 800152a:	430a      	orrs	r2, r1
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001530:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001532:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	635a      	str	r2, [r3, #52]	; 0x34
 800153a:	4b33      	ldr	r3, [pc, #204]	; (8001608 <HAL_RCC_OscConfig+0x678>)
 800153c:	4a32      	ldr	r2, [pc, #200]	; (8001608 <HAL_RCC_OscConfig+0x678>)
 800153e:	6a12      	ldr	r2, [r2, #32]
 8001540:	2180      	movs	r1, #128	; 0x80
 8001542:	0189      	lsls	r1, r1, #6
 8001544:	430a      	orrs	r2, r1
 8001546:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7fe fec0 	bl	80002cc <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x5d4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001552:	f7fe febb 	bl	80002cc <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x5d4>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e0c7      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2202      	movs	r2, #2
 800156a:	4013      	ands	r3, r2
 800156c:	d0f1      	beq.n	8001552 <HAL_RCC_OscConfig+0x5c2>
 800156e:	e01e      	b.n	80015ae <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001570:	4b1f      	ldr	r3, [pc, #124]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001572:	4a1f      	ldr	r2, [pc, #124]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 8001574:	6892      	ldr	r2, [r2, #8]
 8001576:	2101      	movs	r1, #1
 8001578:	438a      	bics	r2, r1
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x678>)
 800157e:	4a22      	ldr	r2, [pc, #136]	; (8001608 <HAL_RCC_OscConfig+0x678>)
 8001580:	6a12      	ldr	r2, [r2, #32]
 8001582:	4922      	ldr	r1, [pc, #136]	; (800160c <HAL_RCC_OscConfig+0x67c>)
 8001584:	400a      	ands	r2, r1
 8001586:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001588:	f7fe fea0 	bl	80002cc <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x614>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001592:	f7fe fe9b 	bl	80002cc <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x614>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e0a7      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	2202      	movs	r2, #2
 80015aa:	4013      	ands	r3, r2
 80015ac:	d1f1      	bne.n	8001592 <HAL_RCC_OscConfig+0x602>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x628>
 80015b6:	e09c      	b.n	80016f2 <HAL_RCC_OscConfig+0x762>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d100      	bne.n	80015c0 <HAL_RCC_OscConfig+0x630>
 80015be:	e075      	b.n	80016ac <HAL_RCC_OscConfig+0x71c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d156      	bne.n	8001676 <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c8:	4b09      	ldr	r3, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80015ca:	4a09      	ldr	r2, [pc, #36]	; (80015f0 <HAL_RCC_OscConfig+0x660>)
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	4910      	ldr	r1, [pc, #64]	; (8001610 <HAL_RCC_OscConfig+0x680>)
 80015d0:	400a      	ands	r2, r1
 80015d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d4:	f7fe fe7a 	bl	80002cc <HAL_GetTick>
 80015d8:	0003      	movs	r3, r0
 80015da:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015dc:	e01a      	b.n	8001614 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015de:	f7fe fe75 	bl	80002cc <HAL_GetTick>
 80015e2:	0002      	movs	r2, r0
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d913      	bls.n	8001614 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e081      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
 80015f0:	40021000 	.word	0x40021000
 80015f4:	fffffeff 	.word	0xfffffeff
 80015f8:	40007000 	.word	0x40007000
 80015fc:	fffffbff 	.word	0xfffffbff
 8001600:	00001388 	.word	0x00001388
 8001604:	efffffff 	.word	0xefffffff
 8001608:	40010000 	.word	0x40010000
 800160c:	ffffdfff 	.word	0xffffdfff
 8001610:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001614:	4b39      	ldr	r3, [pc, #228]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	049b      	lsls	r3, r3, #18
 800161c:	4013      	ands	r3, r2
 800161e:	d1de      	bne.n	80015de <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001620:	4a36      	ldr	r2, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001622:	4b36      	ldr	r3, [pc, #216]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4936      	ldr	r1, [pc, #216]	; (8001700 <HAL_RCC_OscConfig+0x770>)
 8001628:	4019      	ands	r1, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4318      	orrs	r0, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	4303      	orrs	r3, r0
 800163a:	430b      	orrs	r3, r1
 800163c:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800163e:	4b2f      	ldr	r3, [pc, #188]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001640:	4a2e      	ldr	r2, [pc, #184]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	2180      	movs	r1, #128	; 0x80
 8001646:	0449      	lsls	r1, r1, #17
 8001648:	430a      	orrs	r2, r1
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7fe fe3e 	bl	80002cc <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x6d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001656:	f7fe fe39 	bl	80002cc <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e045      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001668:	4b24      	ldr	r3, [pc, #144]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	2380      	movs	r3, #128	; 0x80
 800166e:	049b      	lsls	r3, r3, #18
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x6c6>
 8001674:	e03d      	b.n	80016f2 <HAL_RCC_OscConfig+0x762>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b21      	ldr	r3, [pc, #132]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 8001678:	4a20      	ldr	r2, [pc, #128]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4921      	ldr	r1, [pc, #132]	; (8001704 <HAL_RCC_OscConfig+0x774>)
 800167e:	400a      	ands	r2, r1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7fe fe23 	bl	80002cc <HAL_GetTick>
 8001686:	0003      	movs	r3, r0
 8001688:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800168a:	e008      	b.n	800169e <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800168c:	f7fe fe1e 	bl	80002cc <HAL_GetTick>
 8001690:	0002      	movs	r2, r0
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e02a      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	049b      	lsls	r3, r3, #18
 80016a6:	4013      	ands	r3, r2
 80016a8:	d1f0      	bne.n	800168c <HAL_RCC_OscConfig+0x6fc>
 80016aa:	e022      	b.n	80016f2 <HAL_RCC_OscConfig+0x762>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x728>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e01d      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016b8:	4b10      	ldr	r3, [pc, #64]	; (80016fc <HAL_RCC_OscConfig+0x76c>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016be:	69fa      	ldr	r2, [r7, #28]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	401a      	ands	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d10f      	bne.n	80016ee <HAL_RCC_OscConfig+0x75e>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016ce:	69fa      	ldr	r2, [r7, #28]
 80016d0:	23f0      	movs	r3, #240	; 0xf0
 80016d2:	039b      	lsls	r3, r3, #14
 80016d4:	401a      	ands	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016da:	429a      	cmp	r2, r3
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_OscConfig+0x75e>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80016de:	69fa      	ldr	r2, [r7, #28]
 80016e0:	23c0      	movs	r3, #192	; 0xc0
 80016e2:	041b      	lsls	r3, r3, #16
 80016e4:	401a      	ands	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d001      	beq.n	80016f2 <HAL_RCC_OscConfig+0x762>
        {
          return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e000      	b.n	80016f4 <HAL_RCC_OscConfig+0x764>
        }
      }
    }
  }

  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	0018      	movs	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b00b      	add	sp, #44	; 0x2c
 80016fa:	bd90      	pop	{r4, r7, pc}
 80016fc:	40021000 	.word	0x40021000
 8001700:	ff02ffff 	.word	0xff02ffff
 8001704:	feffffff 	.word	0xfeffffff

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e10c      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800171c:	4b88      	ldr	r3, [pc, #544]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	2201      	movs	r2, #1
 8001722:	401a      	ands	r2, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d211      	bcs.n	800174e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172a:	4b85      	ldr	r3, [pc, #532]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800172c:	4a84      	ldr	r2, [pc, #528]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800172e:	6812      	ldr	r2, [r2, #0]
 8001730:	2101      	movs	r1, #1
 8001732:	438a      	bics	r2, r1
 8001734:	0011      	movs	r1, r2
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	430a      	orrs	r2, r1
 800173a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800173c:	4b80      	ldr	r3, [pc, #512]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2201      	movs	r2, #1
 8001742:	401a      	ands	r2, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d001      	beq.n	800174e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0f3      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2202      	movs	r2, #2
 8001754:	4013      	ands	r3, r2
 8001756:	d009      	beq.n	800176c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001758:	4a7a      	ldr	r2, [pc, #488]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 800175a:	4b7a      	ldr	r3, [pc, #488]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	21f0      	movs	r1, #240	; 0xf0
 8001760:	438b      	bics	r3, r1
 8001762:	0019      	movs	r1, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	430b      	orrs	r3, r1
 800176a:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2201      	movs	r2, #1
 8001772:	4013      	ands	r3, r2
 8001774:	d100      	bne.n	8001778 <HAL_RCC_ClockConfig+0x70>
 8001776:	e089      	b.n	800188c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b02      	cmp	r3, #2
 800177e:	d107      	bne.n	8001790 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001780:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2380      	movs	r3, #128	; 0x80
 8001786:	029b      	lsls	r3, r3, #10
 8001788:	4013      	ands	r3, r2
 800178a:	d120      	bne.n	80017ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0d2      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b03      	cmp	r3, #3
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	2380      	movs	r3, #128	; 0x80
 800179e:	049b      	lsls	r3, r3, #18
 80017a0:	4013      	ands	r3, r2
 80017a2:	d114      	bne.n	80017ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0c6      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d106      	bne.n	80017be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b0:	4b64      	ldr	r3, [pc, #400]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d109      	bne.n	80017ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e0bb      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017be:	4b61      	ldr	r3, [pc, #388]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e0b3      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ce:	4a5d      	ldr	r2, [pc, #372]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80017d0:	4b5c      	ldr	r3, [pc, #368]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	2103      	movs	r1, #3
 80017d6:	438b      	bics	r3, r1
 80017d8:	0019      	movs	r1, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	430b      	orrs	r3, r1
 80017e0:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e2:	f7fe fd73 	bl	80002cc <HAL_GetTick>
 80017e6:	0003      	movs	r3, r0
 80017e8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d111      	bne.n	8001816 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017f2:	e009      	b.n	8001808 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f4:	f7fe fd6a 	bl	80002cc <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e096      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001808:	4b4e      	ldr	r3, [pc, #312]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	220c      	movs	r2, #12
 800180e:	4013      	ands	r3, r2
 8001810:	2b08      	cmp	r3, #8
 8001812:	d1ef      	bne.n	80017f4 <HAL_RCC_ClockConfig+0xec>
 8001814:	e03a      	b.n	800188c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d111      	bne.n	8001842 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800181e:	e009      	b.n	8001834 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7fe fd54 	bl	80002cc <HAL_GetTick>
 8001824:	0002      	movs	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	4a47      	ldr	r2, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d901      	bls.n	8001834 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001830:	2303      	movs	r3, #3
 8001832:	e080      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001834:	4b43      	ldr	r3, [pc, #268]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	220c      	movs	r2, #12
 800183a:	4013      	ands	r3, r2
 800183c:	2b0c      	cmp	r3, #12
 800183e:	d1ef      	bne.n	8001820 <HAL_RCC_ClockConfig+0x118>
 8001840:	e024      	b.n	800188c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d11b      	bne.n	8001882 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800184a:	e009      	b.n	8001860 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800184c:	f7fe fd3e 	bl	80002cc <HAL_GetTick>
 8001850:	0002      	movs	r2, r0
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	4a3c      	ldr	r2, [pc, #240]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e06a      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001860:	4b38      	ldr	r3, [pc, #224]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	220c      	movs	r2, #12
 8001866:	4013      	ands	r3, r2
 8001868:	2b04      	cmp	r3, #4
 800186a:	d1ef      	bne.n	800184c <HAL_RCC_ClockConfig+0x144>
 800186c:	e00e      	b.n	800188c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800186e:	f7fe fd2d 	bl	80002cc <HAL_GetTick>
 8001872:	0002      	movs	r2, r0
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	4a33      	ldr	r2, [pc, #204]	; (8001948 <HAL_RCC_ClockConfig+0x240>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e059      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001882:	4b30      	ldr	r3, [pc, #192]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	220c      	movs	r2, #12
 8001888:	4013      	ands	r3, r2
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b2c      	ldr	r3, [pc, #176]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2201      	movs	r2, #1
 8001892:	401a      	ands	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d911      	bls.n	80018be <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b29      	ldr	r3, [pc, #164]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800189c:	4a28      	ldr	r2, [pc, #160]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	438a      	bics	r2, r1
 80018a4:	0011      	movs	r1, r2
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	430a      	orrs	r2, r1
 80018aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <HAL_RCC_ClockConfig+0x238>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2201      	movs	r2, #1
 80018b2:	401a      	ands	r2, r3
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e03b      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2204      	movs	r2, #4
 80018c4:	4013      	ands	r3, r2
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x1d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4a1e      	ldr	r2, [pc, #120]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80018ca:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	491f      	ldr	r1, [pc, #124]	; (800194c <HAL_RCC_ClockConfig+0x244>)
 80018d0:	4019      	ands	r1, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	430b      	orrs	r3, r1
 80018d8:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2208      	movs	r2, #8
 80018e0:	4013      	ands	r3, r2
 80018e2:	d009      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e4:	4a17      	ldr	r2, [pc, #92]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80018e6:	4b17      	ldr	r3, [pc, #92]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	4919      	ldr	r1, [pc, #100]	; (8001950 <HAL_RCC_ClockConfig+0x248>)
 80018ec:	4019      	ands	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	430b      	orrs	r3, r1
 80018f6:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018f8:	f000 f830 	bl	800195c <HAL_RCC_GetSysClockFreq>
 80018fc:	0001      	movs	r1, r0
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_RCC_ClockConfig+0x23c>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	091b      	lsrs	r3, r3, #4
 8001904:	220f      	movs	r2, #15
 8001906:	4013      	ands	r3, r2
 8001908:	4a12      	ldr	r2, [pc, #72]	; (8001954 <HAL_RCC_ClockConfig+0x24c>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	000a      	movs	r2, r1
 800190e:	40da      	lsrs	r2, r3
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <HAL_RCC_ClockConfig+0x250>)
 8001912:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8001914:	230b      	movs	r3, #11
 8001916:	18fc      	adds	r4, r7, r3
 8001918:	2003      	movs	r0, #3
 800191a:	f7fe fca1 	bl	8000260 <HAL_InitTick>
 800191e:	0003      	movs	r3, r0
 8001920:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001922:	230b      	movs	r3, #11
 8001924:	18fb      	adds	r3, r7, r3
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d003      	beq.n	8001934 <HAL_RCC_ClockConfig+0x22c>
  {
    return status;
 800192c:	230b      	movs	r3, #11
 800192e:	18fb      	adds	r3, r7, r3
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	e000      	b.n	8001936 <HAL_RCC_ClockConfig+0x22e>
  }

  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	0018      	movs	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	b005      	add	sp, #20
 800193c:	bd90      	pop	{r4, r7, pc}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	40022000 	.word	0x40022000
 8001944:	40021000 	.word	0x40021000
 8001948:	00001388 	.word	0x00001388
 800194c:	fffff8ff 	.word	0xfffff8ff
 8001950:	ffffc7ff 	.word	0xffffc7ff
 8001954:	08005a4c 	.word	0x08005a4c
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	220c      	movs	r2, #12
 800196c:	4013      	ands	r3, r2
 800196e:	2b08      	cmp	r3, #8
 8001970:	d00e      	beq.n	8001990 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d00f      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	2b04      	cmp	r3, #4
 8001978:	d145      	bne.n	8001a06 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2210      	movs	r2, #16
 8001980:	4013      	ands	r3, r2
 8001982:	d002      	beq.n	800198a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001984:	4b2a      	ldr	r3, [pc, #168]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001986:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001988:	e04b      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xc6>
        sysclockfreq =  HSI_VALUE;
 800198a:	4b2a      	ldr	r3, [pc, #168]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd8>)
 800198c:	613b      	str	r3, [r7, #16]
      break;
 800198e:	e048      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001990:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001992:	613b      	str	r3, [r7, #16]
      break;
 8001994:	e045      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	0c9b      	lsrs	r3, r3, #18
 800199a:	220f      	movs	r2, #15
 800199c:	4013      	ands	r3, r2
 800199e:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xe0>)
 80019a0:	5cd3      	ldrb	r3, [r2, r3]
 80019a2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	0d9b      	lsrs	r3, r3, #22
 80019a8:	2203      	movs	r2, #3
 80019aa:	4013      	ands	r3, r2
 80019ac:	3301      	adds	r3, #1
 80019ae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019b0:	4b1e      	ldr	r3, [pc, #120]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	025b      	lsls	r3, r3, #9
 80019b8:	4013      	ands	r3, r2
 80019ba:	d009      	beq.n	80019d0 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4a1e      	ldr	r2, [pc, #120]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xdc>)
 80019c0:	4353      	muls	r3, r2
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	0018      	movs	r0, r3
 80019c6:	f7fe fb9f 	bl	8000108 <__udivsi3>
 80019ca:	0003      	movs	r3, r0
 80019cc:	617b      	str	r3, [r7, #20]
 80019ce:	e017      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80019d0:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2210      	movs	r2, #16
 80019d6:	4013      	ands	r3, r2
 80019d8:	d009      	beq.n	80019ee <HAL_RCC_GetSysClockFreq+0x92>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019de:	4353      	muls	r3, r2
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7fe fb90 	bl	8000108 <__udivsi3>
 80019e8:	0003      	movs	r3, r0
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa4>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	4a10      	ldr	r2, [pc, #64]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd8>)
 80019f2:	4353      	muls	r3, r2
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f7fe fb86 	bl	8000108 <__udivsi3>
 80019fc:	0003      	movs	r3, r0
 80019fe:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
      break;
 8001a04:	e00d      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	4013      	ands	r3, r2
 8001a10:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3301      	adds	r3, #1
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	0212      	lsls	r2, r2, #8
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	0013      	movs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
      break;
 8001a20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a22:	693b      	ldr	r3, [r7, #16]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	b006      	add	sp, #24
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	003d0900 	.word	0x003d0900
 8001a34:	00f42400 	.word	0x00f42400
 8001a38:	007a1200 	.word	0x007a1200
 8001a3c:	08005a5c 	.word	0x08005a5c

08001a40 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	4013      	ands	r3, r2
 8001a50:	d106      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	011b      	lsls	r3, r3, #4
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d100      	bne.n	8001a60 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001a5e:	e0dc      	b.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001a60:	2317      	movs	r3, #23
 8001a62:	18fb      	adds	r3, r7, r3
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a68:	4b99      	ldr	r3, [pc, #612]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a6c:	2380      	movs	r3, #128	; 0x80
 8001a6e:	055b      	lsls	r3, r3, #21
 8001a70:	4013      	ands	r3, r2
 8001a72:	d10a      	bne.n	8001a8a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a74:	4b96      	ldr	r3, [pc, #600]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a76:	4a96      	ldr	r2, [pc, #600]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a7a:	2180      	movs	r1, #128	; 0x80
 8001a7c:	0549      	lsls	r1, r1, #21
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001a82:	2317      	movs	r3, #23
 8001a84:	18fb      	adds	r3, r7, r3
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b92      	ldr	r3, [pc, #584]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	005b      	lsls	r3, r3, #1
 8001a92:	4013      	ands	r3, r2
 8001a94:	d11a      	bne.n	8001acc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b8f      	ldr	r3, [pc, #572]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001a98:	4a8e      	ldr	r2, [pc, #568]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	2180      	movs	r1, #128	; 0x80
 8001a9e:	0049      	lsls	r1, r1, #1
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fc12 	bl	80002cc <HAL_GetTick>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7fe fc0d 	bl	80002cc <HAL_GetTick>
 8001ab2:	0002      	movs	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b64      	cmp	r3, #100	; 0x64
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e103      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8001ac2:	681a      	ldr	r2, [r3, #0]
 8001ac4:	2380      	movs	r3, #128	; 0x80
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	23c0      	movs	r3, #192	; 0xc0
 8001ad2:	039b      	lsls	r3, r3, #14
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685a      	ldr	r2, [r3, #4]
 8001adc:	23c0      	movs	r3, #192	; 0xc0
 8001ade:	039b      	lsls	r3, r3, #14
 8001ae0:	401a      	ands	r2, r3
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689a      	ldr	r2, [r3, #8]
 8001aec:	23c0      	movs	r3, #192	; 0xc0
 8001aee:	039b      	lsls	r3, r3, #14
 8001af0:	401a      	ands	r2, r3
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d013      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	23c0      	movs	r3, #192	; 0xc0
 8001afe:	029b      	lsls	r3, r3, #10
 8001b00:	401a      	ands	r2, r3
 8001b02:	23c0      	movs	r3, #192	; 0xc0
 8001b04:	029b      	lsls	r3, r3, #10
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d10a      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001b0a:	4b71      	ldr	r3, [pc, #452]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	029b      	lsls	r3, r3, #10
 8001b12:	401a      	ands	r2, r3
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	029b      	lsls	r3, r3, #10
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e0d3      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001b20:	4b6b      	ldr	r3, [pc, #428]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b24:	23c0      	movs	r3, #192	; 0xc0
 8001b26:	029b      	lsls	r3, r3, #10
 8001b28:	4013      	ands	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d049      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	029b      	lsls	r3, r3, #10
 8001b3a:	401a      	ands	r2, r3
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d004      	beq.n	8001b4c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2220      	movs	r2, #32
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d10d      	bne.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	23c0      	movs	r3, #192	; 0xc0
 8001b52:	029b      	lsls	r3, r3, #10
 8001b54:	401a      	ands	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d034      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	2380      	movs	r3, #128	; 0x80
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	4013      	ands	r3, r2
 8001b66:	d02e      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001b68:	4b59      	ldr	r3, [pc, #356]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b6c:	4a5a      	ldr	r2, [pc, #360]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b72:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b74:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b76:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b78:	2180      	movs	r1, #128	; 0x80
 8001b7a:	0309      	lsls	r1, r1, #12
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b80:	4b53      	ldr	r3, [pc, #332]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b82:	4a53      	ldr	r2, [pc, #332]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b86:	4955      	ldr	r1, [pc, #340]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001b88:	400a      	ands	r2, r1
 8001b8a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001b8c:	4b50      	ldr	r3, [pc, #320]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	2380      	movs	r3, #128	; 0x80
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d014      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7fe fb96 	bl	80002cc <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ba4:	e009      	b.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ba6:	f7fe fb91 	bl	80002cc <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	4a4b      	ldr	r2, [pc, #300]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d901      	bls.n	8001bba <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e086      	b.n	8001cc8 <HAL_RCCEx_PeriphCLKConfig+0x288>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bba:	4b45      	ldr	r3, [pc, #276]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d0ef      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685a      	ldr	r2, [r3, #4]
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	029b      	lsls	r3, r3, #10
 8001bce:	401a      	ands	r2, r3
 8001bd0:	23c0      	movs	r3, #192	; 0xc0
 8001bd2:	029b      	lsls	r3, r3, #10
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d10b      	bne.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8001bd8:	4a3d      	ldr	r2, [pc, #244]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bda:	4b3d      	ldr	r3, [pc, #244]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4941      	ldr	r1, [pc, #260]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001be0:	4019      	ands	r1, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6858      	ldr	r0, [r3, #4]
 8001be6:	23c0      	movs	r3, #192	; 0xc0
 8001be8:	039b      	lsls	r3, r3, #14
 8001bea:	4003      	ands	r3, r0
 8001bec:	430b      	orrs	r3, r1
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4a37      	ldr	r2, [pc, #220]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bf2:	4b37      	ldr	r3, [pc, #220]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bf4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6858      	ldr	r0, [r3, #4]
 8001bfa:	23c0      	movs	r3, #192	; 0xc0
 8001bfc:	029b      	lsls	r3, r3, #10
 8001bfe:	4003      	ands	r3, r0
 8001c00:	430b      	orrs	r3, r1
 8001c02:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c04:	2317      	movs	r3, #23
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d105      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c10:	4a2f      	ldr	r2, [pc, #188]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c14:	4934      	ldr	r1, [pc, #208]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001c16:	400a      	ands	r2, r1
 8001c18:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c24:	4a2a      	ldr	r2, [pc, #168]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c26:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	2103      	movs	r1, #3
 8001c2c:	438b      	bics	r3, r1
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	430b      	orrs	r3, r1
 8001c36:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c42:	4a23      	ldr	r2, [pc, #140]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c44:	4b22      	ldr	r3, [pc, #136]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c48:	210c      	movs	r1, #12
 8001c4a:	438b      	bics	r3, r1
 8001c4c:	0019      	movs	r1, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	430b      	orrs	r3, r1
 8001c54:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d008      	beq.n	8001c72 <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c62:	4b1b      	ldr	r3, [pc, #108]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c66:	4921      	ldr	r1, [pc, #132]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001c68:	4019      	ands	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	430b      	orrs	r3, r1
 8001c70:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2208      	movs	r2, #8
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d008      	beq.n	8001c8e <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c7c:	4a14      	ldr	r2, [pc, #80]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c7e:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001c84:	4019      	ands	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	430b      	orrs	r3, r1
 8001c8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2240      	movs	r2, #64	; 0x40
 8001c94:	4013      	ands	r3, r2
 8001c96:	d008      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c98:	4a0d      	ldr	r2, [pc, #52]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c9a:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	4915      	ldr	r1, [pc, #84]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001ca0:	4019      	ands	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a1b      	ldr	r3, [r3, #32]
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2280      	movs	r2, #128	; 0x80
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d008      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001cb4:	4a06      	ldr	r2, [pc, #24]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cba:	490f      	ldr	r1, [pc, #60]	; (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001cbc:	4019      	ands	r1, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	430b      	orrs	r3, r1
 8001cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	0018      	movs	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	b006      	add	sp, #24
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffcffff 	.word	0xfffcffff
 8001cdc:	fff7ffff 	.word	0xfff7ffff
 8001ce0:	00001388 	.word	0x00001388
 8001ce4:	ffcfffff 	.word	0xffcfffff
 8001ce8:	efffffff 	.word	0xefffffff
 8001cec:	fffff3ff 	.word	0xfffff3ff
 8001cf0:	ffffcfff 	.word	0xffffcfff
 8001cf4:	fbffffff 	.word	0xfbffffff
 8001cf8:	fff3ffff 	.word	0xfff3ffff

08001cfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e05f      	b.n	8001dce <HAL_SPI_Init+0xd2>
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2251      	movs	r2, #81	; 0x51
 8001d12:	5c9b      	ldrb	r3, [r3, r2]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d107      	bne.n	8001d2a <HAL_SPI_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2250      	movs	r2, #80	; 0x50
 8001d1e:	2100      	movs	r1, #0
 8001d20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	0018      	movs	r0, r3
 8001d26:	f000 f882 	bl	8001e2e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2251      	movs	r2, #81	; 0x51
 8001d2e:	2102      	movs	r1, #2
 8001d30:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	2140      	movs	r1, #64	; 0x40
 8001d3e:	438a      	bics	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6851      	ldr	r1, [r2, #4]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	6892      	ldr	r2, [r2, #8]
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	68d2      	ldr	r2, [r2, #12]
 8001d54:	4311      	orrs	r1, r2
 8001d56:	687a      	ldr	r2, [r7, #4]
 8001d58:	6912      	ldr	r2, [r2, #16]
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6952      	ldr	r2, [r2, #20]
 8001d60:	4311      	orrs	r1, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6990      	ldr	r0, [r2, #24]
 8001d66:	2280      	movs	r2, #128	; 0x80
 8001d68:	0092      	lsls	r2, r2, #2
 8001d6a:	4002      	ands	r2, r0
 8001d6c:	4311      	orrs	r1, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	69d2      	ldr	r2, [r2, #28]
 8001d72:	4311      	orrs	r1, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6a12      	ldr	r2, [r2, #32]
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6992      	ldr	r2, [r2, #24]
 8001d8a:	0c12      	lsrs	r2, r2, #16
 8001d8c:	2104      	movs	r1, #4
 8001d8e:	4011      	ands	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d94:	430a      	orrs	r2, r1
 8001d96:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d9c:	2380      	movs	r3, #128	; 0x80
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d104      	bne.n	8001dae <HAL_SPI_Init+0xb2>
  {
    WRITE_REG(hspi->Instance->CRCPR, hspi->Init.CRCPolynomial);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dac:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6812      	ldr	r2, [r2, #0]
 8001db6:	69d2      	ldr	r2, [r2, #28]
 8001db8:	4907      	ldr	r1, [pc, #28]	; (8001dd8 <HAL_SPI_Init+0xdc>)
 8001dba:	400a      	ands	r2, r1
 8001dbc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2251      	movs	r2, #81	; 0x51
 8001dc8:	2101      	movs	r1, #1
 8001dca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b002      	add	sp, #8
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	fffff7ff 	.word	0xfffff7ff

08001ddc <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d101      	bne.n	8001dee <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e01b      	b.n	8001e26 <HAL_SPI_DeInit+0x4a>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2251      	movs	r2, #81	; 0x51
 8001df2:	2102      	movs	r1, #2
 8001df4:	5499      	strb	r1, [r3, r2]

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	6812      	ldr	r2, [r2, #0]
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	438a      	bics	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f000 f818 	bl	8001e3e <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2251      	movs	r2, #81	; 0x51
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2250      	movs	r2, #80	; 0x50
 8001e20:	2100      	movs	r1, #0
 8001e22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b002      	add	sp, #8
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_SPI_MspDeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b082      	sub	sp, #8
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspDeInit should be implemented in the user file
   */
}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b002      	add	sp, #8
 8001e4c:	bd80      	pop	{r7, pc}
	...

08001e50 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	1cbb      	adds	r3, r7, #2
 8001e60:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001e62:	2301      	movs	r3, #1
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001e66:	232b      	movs	r3, #43	; 0x2b
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2250      	movs	r2, #80	; 0x50
 8001e72:	5c9b      	ldrb	r3, [r3, r2]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d101      	bne.n	8001e7c <HAL_SPI_TransmitReceive+0x2c>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e21b      	b.n	80022b4 <HAL_SPI_TransmitReceive+0x464>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2250      	movs	r2, #80	; 0x50
 8001e80:	2101      	movs	r1, #1
 8001e82:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001e84:	f7fe fa22 	bl	80002cc <HAL_GetTick>
 8001e88:	0003      	movs	r3, r0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001e8c:	2323      	movs	r3, #35	; 0x23
 8001e8e:	18fb      	adds	r3, r7, r3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	2151      	movs	r1, #81	; 0x51
 8001e94:	5c52      	ldrb	r2, [r2, r1]
 8001e96:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001e9e:	231a      	movs	r3, #26
 8001ea0:	18fb      	adds	r3, r7, r3
 8001ea2:	1cba      	adds	r2, r7, #2
 8001ea4:	8812      	ldrh	r2, [r2, #0]
 8001ea6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea8:	2323      	movs	r3, #35	; 0x23
 8001eaa:	18fb      	adds	r3, r7, r3
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d012      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x88>
 8001eb2:	69fa      	ldr	r2, [r7, #28]
 8001eb4:	2382      	movs	r3, #130	; 0x82
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d108      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x7e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d104      	bne.n	8001ece <HAL_SPI_TransmitReceive+0x7e>
 8001ec4:	2323      	movs	r3, #35	; 0x23
 8001ec6:	18fb      	adds	r3, r7, r3
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	d004      	beq.n	8001ed8 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_BUSY;
 8001ece:	232b      	movs	r3, #43	; 0x2b
 8001ed0:	18fb      	adds	r3, r7, r3
 8001ed2:	2202      	movs	r2, #2
 8001ed4:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ed6:	e1e2      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d006      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x9c>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d003      	beq.n	8001eec <HAL_SPI_TransmitReceive+0x9c>
 8001ee4:	1cbb      	adds	r3, r7, #2
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d104      	bne.n	8001ef6 <HAL_SPI_TransmitReceive+0xa6>
  {
    errorcode = HAL_ERROR;
 8001eec:	232b      	movs	r3, #43	; 0x2b
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001ef4:	e1d3      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2251      	movs	r2, #81	; 0x51
 8001efa:	5c9b      	ldrb	r3, [r3, r2]
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b04      	cmp	r3, #4
 8001f00:	d003      	beq.n	8001f0a <HAL_SPI_TransmitReceive+0xba>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2251      	movs	r2, #81	; 0x51
 8001f06:	2105      	movs	r1, #5
 8001f08:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1cba      	adds	r2, r7, #2
 8001f1a:	8812      	ldrh	r2, [r2, #0]
 8001f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1cba      	adds	r2, r7, #2
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	1cba      	adds	r2, r7, #2
 8001f30:	8812      	ldrh	r2, [r2, #0]
 8001f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1cba      	adds	r2, r7, #2
 8001f38:	8812      	ldrh	r2, [r2, #0]
 8001f3a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4c:	2380      	movs	r3, #128	; 0x80
 8001f4e:	019b      	lsls	r3, r3, #6
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d110      	bne.n	8001f76 <HAL_SPI_TransmitReceive+0x126>
  {
    SPI_RESET_CRC(hspi);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68fa      	ldr	r2, [r7, #12]
 8001f5a:	6812      	ldr	r2, [r2, #0]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	49c6      	ldr	r1, [pc, #792]	; (8002278 <HAL_SPI_TransmitReceive+0x428>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	6812      	ldr	r2, [r2, #0]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0189      	lsls	r1, r1, #6
 8001f72:	430a      	orrs	r2, r1
 8001f74:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	4013      	ands	r3, r2
 8001f80:	2b40      	cmp	r3, #64	; 0x40
 8001f82:	d007      	beq.n	8001f94 <HAL_SPI_TransmitReceive+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	68da      	ldr	r2, [r3, #12]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d000      	beq.n	8001fa2 <HAL_SPI_TransmitReceive+0x152>
 8001fa0:	e08f      	b.n	80020c2 <HAL_SPI_TransmitReceive+0x272>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x166>
 8001faa:	231a      	movs	r3, #26
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	881b      	ldrh	r3, [r3, #0]
 8001fb0:	2b01      	cmp	r3, #1
 8001fb2:	d000      	beq.n	8001fb6 <HAL_SPI_TransmitReceive+0x166>
 8001fb4:	e07a      	b.n	80020ac <HAL_SPI_TransmitReceive+0x25c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fbe:	8812      	ldrh	r2, [r2, #0]
 8001fc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	1c9a      	adds	r2, r3, #2
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b29a      	uxth	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fda:	e067      	b.n	80020ac <HAL_SPI_TransmitReceive+0x25c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d12f      	bne.n	800204a <HAL_SPI_TransmitReceive+0x1fa>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d02a      	beq.n	800204a <HAL_SPI_TransmitReceive+0x1fa>
 8001ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d127      	bne.n	800204a <HAL_SPI_TransmitReceive+0x1fa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002002:	8812      	ldrh	r2, [r2, #0]
 8002004:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	1c9a      	adds	r2, r3, #2
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002014:	b29b      	uxth	r3, r3
 8002016:	3b01      	subs	r3, #1
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800201e:	2300      	movs	r3, #0
 8002020:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10e      	bne.n	800204a <HAL_SPI_TransmitReceive+0x1fa>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	019b      	lsls	r3, r3, #6
 8002034:	429a      	cmp	r2, r3
 8002036:	d108      	bne.n	800204a <HAL_SPI_TransmitReceive+0x1fa>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	6812      	ldr	r2, [r2, #0]
 8002040:	6812      	ldr	r2, [r2, #0]
 8002042:	2180      	movs	r1, #128	; 0x80
 8002044:	0149      	lsls	r1, r1, #5
 8002046:	430a      	orrs	r2, r1
 8002048:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2201      	movs	r2, #1
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d119      	bne.n	800208c <HAL_SPI_TransmitReceive+0x23c>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800205c:	b29b      	uxth	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d014      	beq.n	800208c <HAL_SPI_TransmitReceive+0x23c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	b29b      	uxth	r3, r3
 800206e:	8013      	strh	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002074:	1c9a      	adds	r2, r3, #2
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800207e:	b29b      	uxth	r3, r3
 8002080:	3b01      	subs	r3, #1
 8002082:	b29a      	uxth	r2, r3
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002088:	2301      	movs	r3, #1
 800208a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800208c:	f7fe f91e 	bl	80002cc <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	1ad2      	subs	r2, r2, r3
 8002096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002098:	429a      	cmp	r2, r3
 800209a:	d307      	bcc.n	80020ac <HAL_SPI_TransmitReceive+0x25c>
 800209c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800209e:	3301      	adds	r3, #1
 80020a0:	d004      	beq.n	80020ac <HAL_SPI_TransmitReceive+0x25c>
      {
        errorcode = HAL_TIMEOUT;
 80020a2:	232b      	movs	r3, #43	; 0x2b
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
        goto error;
 80020aa:	e0f8      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d192      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x18c>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d18d      	bne.n	8001fdc <HAL_SPI_TransmitReceive+0x18c>
 80020c0:	e095      	b.n	80021ee <HAL_SPI_TransmitReceive+0x39e>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x286>
 80020ca:	231a      	movs	r3, #26
 80020cc:	18fb      	adds	r3, r7, r3
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d000      	beq.n	80020d6 <HAL_SPI_TransmitReceive+0x286>
 80020d4:	e081      	b.n	80021da <HAL_SPI_TransmitReceive+0x38a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	330c      	adds	r3, #12
 80020dc:	001a      	movs	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	7013      	strb	r3, [r2, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	1c5a      	adds	r2, r3, #1
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	3b01      	subs	r3, #1
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020fe:	e06c      	b.n	80021da <HAL_SPI_TransmitReceive+0x38a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2202      	movs	r2, #2
 8002108:	4013      	ands	r3, r2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d131      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x322>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002112:	b29b      	uxth	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d02c      	beq.n	8002172 <HAL_SPI_TransmitReceive+0x322>
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	2b01      	cmp	r3, #1
 800211c:	d129      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x322>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	330c      	adds	r3, #12
 8002124:	001a      	movs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	7013      	strb	r3, [r2, #0]
        hspi->pTxBuffPtr++;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800213c:	b29b      	uxth	r3, r3
 800213e:	3b01      	subs	r3, #1
 8002140:	b29a      	uxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d10e      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x322>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	019b      	lsls	r3, r3, #6
 800215c:	429a      	cmp	r2, r3
 800215e:	d108      	bne.n	8002172 <HAL_SPI_TransmitReceive+0x322>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	2180      	movs	r1, #128	; 0x80
 800216c:	0149      	lsls	r1, r1, #5
 800216e:	430a      	orrs	r2, r1
 8002170:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2201      	movs	r2, #1
 800217a:	4013      	ands	r3, r2
 800217c:	2b01      	cmp	r3, #1
 800217e:	d119      	bne.n	80021b4 <HAL_SPI_TransmitReceive+0x364>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d014      	beq.n	80021b4 <HAL_SPI_TransmitReceive+0x364>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219c:	1c5a      	adds	r2, r3, #1
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80021b0:	2301      	movs	r3, #1
 80021b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80021b4:	f7fe f88a 	bl	80002cc <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021bc:	1ad2      	subs	r2, r2, r3
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d302      	bcc.n	80021ca <HAL_SPI_TransmitReceive+0x37a>
 80021c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c6:	3301      	adds	r3, #1
 80021c8:	d102      	bne.n	80021d0 <HAL_SPI_TransmitReceive+0x380>
 80021ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <HAL_SPI_TransmitReceive+0x38a>
      {
        errorcode = HAL_TIMEOUT;
 80021d0:	232b      	movs	r3, #43	; 0x2b
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2203      	movs	r2, #3
 80021d6:	701a      	strb	r2, [r3, #0]
        goto error;
 80021d8:	e061      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021de:	b29b      	uxth	r3, r3
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d18d      	bne.n	8002100 <HAL_SPI_TransmitReceive+0x2b0>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d188      	bne.n	8002100 <HAL_SPI_TransmitReceive+0x2b0>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f2:	2380      	movs	r3, #128	; 0x80
 80021f4:	019b      	lsls	r3, r3, #6
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d118      	bne.n	800222c <HAL_SPI_TransmitReceive+0x3dc>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80021fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	0013      	movs	r3, r2
 8002204:	2201      	movs	r2, #1
 8002206:	2101      	movs	r1, #1
 8002208:	f000 f858 	bl	80022bc <SPI_WaitFlagStateUntilTimeout>
 800220c:	1e03      	subs	r3, r0, #0
 800220e:	d00a      	beq.n	8002226 <HAL_SPI_TransmitReceive+0x3d6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002214:	2202      	movs	r2, #2
 8002216:	431a      	orrs	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 800221c:	232b      	movs	r3, #43	; 0x2b
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	2203      	movs	r2, #3
 8002222:	701a      	strb	r2, [r3, #0]
      goto error;
 8002224:	e03b      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
    }
    /* Read CRC */
    READ_REG(hspi->Instance->DR);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2210      	movs	r2, #16
 8002234:	4013      	ands	r3, r2
 8002236:	2b10      	cmp	r3, #16
 8002238:	d10d      	bne.n	8002256 <HAL_SPI_TransmitReceive+0x406>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223e:	2202      	movs	r2, #2
 8002240:	431a      	orrs	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	655a      	str	r2, [r3, #84]	; 0x54
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a0c      	ldr	r2, [pc, #48]	; (800227c <HAL_SPI_TransmitReceive+0x42c>)
 800224c:	609a      	str	r2, [r3, #8]

    errorcode = HAL_ERROR;
 800224e:	232b      	movs	r3, #43	; 0x2b
 8002250:	18fb      	adds	r3, r7, r3
 8002252:	2201      	movs	r2, #1
 8002254:	701a      	strb	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002256:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002258:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f89d 	bl	800239c <SPI_EndRxTxTransaction>
 8002262:	1e03      	subs	r3, r0, #0
 8002264:	d00c      	beq.n	8002280 <HAL_SPI_TransmitReceive+0x430>
  {
    errorcode = HAL_ERROR;
 8002266:	232b      	movs	r3, #43	; 0x2b
 8002268:	18fb      	adds	r3, r7, r3
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2220      	movs	r2, #32
 8002272:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002274:	e013      	b.n	800229e <HAL_SPI_TransmitReceive+0x44e>
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	ffffdfff 	.word	0xffffdfff
 800227c:	0000ffef 	.word	0x0000ffef
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d10a      	bne.n	800229e <HAL_SPI_TransmitReceive+0x44e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2251      	movs	r2, #81	; 0x51
 80022a2:	2101      	movs	r1, #1
 80022a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2250      	movs	r2, #80	; 0x50
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022ae:	232b      	movs	r3, #43	; 0x2b
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	781b      	ldrb	r3, [r3, #0]
}
 80022b4:	0018      	movs	r0, r3
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b00c      	add	sp, #48	; 0x30
 80022ba:	bd80      	pop	{r7, pc}

080022bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	603b      	str	r3, [r7, #0]
 80022c8:	1dfb      	adds	r3, r7, #7
 80022ca:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022cc:	e050      	b.n	8002370 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	3301      	adds	r3, #1
 80022d2:	d04d      	beq.n	8002370 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022d4:	f7fd fffa 	bl	80002cc <HAL_GetTick>
 80022d8:	0002      	movs	r2, r0
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	1ad2      	subs	r2, r2, r3
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d202      	bcs.n	80022ea <SPI_WaitFlagStateUntilTimeout+0x2e>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d142      	bne.n	8002370 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	6812      	ldr	r2, [r2, #0]
 80022f2:	6852      	ldr	r2, [r2, #4]
 80022f4:	21e0      	movs	r1, #224	; 0xe0
 80022f6:	438a      	bics	r2, r1
 80022f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	2382      	movs	r3, #130	; 0x82
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	429a      	cmp	r2, r3
 8002304:	d113      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0x72>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	689a      	ldr	r2, [r3, #8]
 800230a:	2380      	movs	r3, #128	; 0x80
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	429a      	cmp	r2, r3
 8002310:	d005      	beq.n	800231e <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	429a      	cmp	r2, r3
 800231c:	d107      	bne.n	800232e <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	6812      	ldr	r2, [r2, #0]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	2140      	movs	r1, #64	; 0x40
 800232a:	438a      	bics	r2, r1
 800232c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002332:	2380      	movs	r3, #128	; 0x80
 8002334:	019b      	lsls	r3, r3, #6
 8002336:	429a      	cmp	r2, r3
 8002338:	d110      	bne.n	800235c <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	6812      	ldr	r2, [r2, #0]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	4914      	ldr	r1, [pc, #80]	; (8002398 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8002346:	400a      	ands	r2, r1
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	6812      	ldr	r2, [r2, #0]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	2180      	movs	r1, #128	; 0x80
 8002356:	0189      	lsls	r1, r1, #6
 8002358:	430a      	orrs	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2251      	movs	r2, #81	; 0x51
 8002360:	2101      	movs	r1, #1
 8002362:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2250      	movs	r2, #80	; 0x50
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e00f      	b.n	8002390 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	401a      	ands	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	425a      	negs	r2, r3
 8002380:	4153      	adcs	r3, r2
 8002382:	b2db      	uxtb	r3, r3
 8002384:	001a      	movs	r2, r3
 8002386:	1dfb      	adds	r3, r7, #7
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d19f      	bne.n	80022ce <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	0018      	movs	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	b004      	add	sp, #16
 8002396:	bd80      	pop	{r7, pc}
 8002398:	ffffdfff 	.word	0xffffdfff

0800239c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	2382      	movs	r3, #130	; 0x82
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d112      	bne.n	80023da <SPI_EndRxTxTransaction+0x3e>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80023b4:	68ba      	ldr	r2, [r7, #8]
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	0013      	movs	r3, r2
 80023be:	2200      	movs	r2, #0
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	f7ff ff7b 	bl	80022bc <SPI_WaitFlagStateUntilTimeout>
 80023c6:	1e03      	subs	r3, r0, #0
 80023c8:	d020      	beq.n	800240c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ce:	2220      	movs	r2, #32
 80023d0:	431a      	orrs	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e019      	b.n	800240e <SPI_EndRxTxTransaction+0x72>
    }
  }
  else
  {
    /* Control RXNE flag in case of Full-Duplex transfer */
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2251      	movs	r2, #81	; 0x51
 80023de:	5c9b      	ldrb	r3, [r3, r2]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b05      	cmp	r3, #5
 80023e4:	d112      	bne.n	800240c <SPI_EndRxTxTransaction+0x70>
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	0013      	movs	r3, r2
 80023f0:	2200      	movs	r2, #0
 80023f2:	2101      	movs	r1, #1
 80023f4:	f7ff ff62 	bl	80022bc <SPI_WaitFlagStateUntilTimeout>
 80023f8:	1e03      	subs	r3, r0, #0
 80023fa:	d007      	beq.n	800240c <SPI_EndRxTxTransaction+0x70>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002400:	2220      	movs	r2, #32
 8002402:	431a      	orrs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e000      	b.n	800240e <SPI_EndRxTxTransaction+0x72>
      }
    }
  }
  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b004      	add	sp, #16
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <_Z18crc32_basic_updatemh>:
        0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF,
        0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D,
};

uint32_t crc32_basic_update(uint32_t crc, uint8_t byte)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	000a      	movs	r2, r1
 8002422:	1cfb      	adds	r3, r7, #3
 8002424:	701a      	strb	r2, [r3, #0]
    return (crc >> 8) ^ crc32_basic_table_table[(uint8_t)(crc ^ byte) /*& 0xFF*/];
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0a1a      	lsrs	r2, r3, #8
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	1cfb      	adds	r3, r7, #3
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	404b      	eors	r3, r1
 8002434:	b2db      	uxtb	r3, r3
 8002436:	0019      	movs	r1, r3
 8002438:	4b03      	ldr	r3, [pc, #12]	; (8002448 <_Z18crc32_basic_updatemh+0x30>)
 800243a:	0089      	lsls	r1, r1, #2
 800243c:	58cb      	ldr	r3, [r1, r3]
 800243e:	4053      	eors	r3, r2
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}
 8002448:	080055d0 	.word	0x080055d0

0800244c <_Z30crc_tools_32_get_initial_valuev>:
#include "stdint.h"
#include "crc_tools.h"
#include "crc32_basic.h"

uint32_t crc_tools_32_get_initial_value()
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
    return 0xFFFFFFFF;
 8002450:	2301      	movs	r3, #1
 8002452:	425b      	negs	r3, r3
}
 8002454:	0018      	movs	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}

0800245a <_Z22crc_tools_32_final_xorm>:
{
    return 0xDEBB20E3;
}

uint32_t crc_tools_32_final_xor(uint32_t crc)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
    return ~crc;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	43db      	mvns	r3, r3
}
 8002466:	0018      	movs	r0, r3
 8002468:	46bd      	mov	sp, r7
 800246a:	b002      	add	sp, #8
 800246c:	bd80      	pop	{r7, pc}

0800246e <_Z22crc_tools_32_calculatePhth>:

uint32_t crc_tools_32_calculate(uint8_t bytes[], uint16_t size, uint8_t complement)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b084      	sub	sp, #16
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	0008      	movs	r0, r1
 8002478:	0011      	movs	r1, r2
 800247a:	1cbb      	adds	r3, r7, #2
 800247c:	1c02      	adds	r2, r0, #0
 800247e:	801a      	strh	r2, [r3, #0]
 8002480:	1c7b      	adds	r3, r7, #1
 8002482:	1c0a      	adds	r2, r1, #0
 8002484:	701a      	strb	r2, [r3, #0]
    uint32_t crc = crc_tools_32_get_initial_value();
 8002486:	f7ff ffe1 	bl	800244c <_Z30crc_tools_32_get_initial_valuev>
 800248a:	0003      	movs	r3, r0
 800248c:	60fb      	str	r3, [r7, #12]

    crc = crc_tools_32_partial_calculate(crc, bytes, size);
 800248e:	1cbb      	adds	r3, r7, #2
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	0018      	movs	r0, r3
 8002498:	f000 f811 	bl	80024be <_Z30crc_tools_32_partial_calculatemPht>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
    if(complement)
 80024a0:	1c7b      	adds	r3, r7, #1
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <_Z22crc_tools_32_calculatePhth+0x46>
    {
        crc = crc_tools_32_final_xor(crc);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	0018      	movs	r0, r3
 80024ac:	f7ff ffd5 	bl	800245a <_Z22crc_tools_32_final_xorm>
 80024b0:	0003      	movs	r3, r0
 80024b2:	60fb      	str	r3, [r7, #12]
    }
    return crc;
 80024b4:	68fb      	ldr	r3, [r7, #12]
}
 80024b6:	0018      	movs	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b004      	add	sp, #16
 80024bc:	bd80      	pop	{r7, pc}

080024be <_Z30crc_tools_32_partial_calculatemPht>:

uint32_t crc_tools_32_partial_calculate(uint32_t crc, uint8_t bytes[], uint16_t size)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b086      	sub	sp, #24
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	1dbb      	adds	r3, r7, #6
 80024ca:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    for(i = 0; i < size; i++)
 80024cc:	2316      	movs	r3, #22
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2200      	movs	r2, #0
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	2316      	movs	r3, #22
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	881a      	ldrh	r2, [r3, #0]
 80024da:	1dbb      	adds	r3, r7, #6
 80024dc:	881b      	ldrh	r3, [r3, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	da14      	bge.n	800250c <_Z30crc_tools_32_partial_calculatemPht+0x4e>
    {
        crc = crc32_basic_update(crc, bytes[i]);
 80024e2:	2316      	movs	r3, #22
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	18d3      	adds	r3, r2, r3
 80024ec:	781a      	ldrb	r2, [r3, #0]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	0011      	movs	r1, r2
 80024f2:	0018      	movs	r0, r3
 80024f4:	f7ff ff90 	bl	8002418 <_Z18crc32_basic_updatemh>
 80024f8:	0003      	movs	r3, r0
 80024fa:	60fb      	str	r3, [r7, #12]
    for(i = 0; i < size; i++)
 80024fc:	2316      	movs	r3, #22
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	881a      	ldrh	r2, [r3, #0]
 8002502:	2316      	movs	r3, #22
 8002504:	18fb      	adds	r3, r7, r3
 8002506:	3201      	adds	r2, #1
 8002508:	801a      	strh	r2, [r3, #0]
 800250a:	e7e3      	b.n	80024d4 <_Z30crc_tools_32_partial_calculatemPht+0x16>
    }
    return crc;
 800250c:	68fb      	ldr	r3, [r7, #12]
}
 800250e:	0018      	movs	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	b006      	add	sp, #24
 8002514:	bd80      	pop	{r7, pc}

08002516 <_Z24crc_tools_ibutton_updatehh>:
    }
    return crc;
}

uint8_t crc_tools_ibutton_update(uint8_t crc, uint8_t byte)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b084      	sub	sp, #16
 800251a:	af00      	add	r7, sp, #0
 800251c:	0002      	movs	r2, r0
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	701a      	strb	r2, [r3, #0]
 8002522:	1dbb      	adds	r3, r7, #6
 8002524:	1c0a      	adds	r2, r1, #0
 8002526:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    crc = crc ^ byte;
 8002528:	1dfb      	adds	r3, r7, #7
 800252a:	1df9      	adds	r1, r7, #7
 800252c:	1dba      	adds	r2, r7, #6
 800252e:	7809      	ldrb	r1, [r1, #0]
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	404a      	eors	r2, r1
 8002534:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++)
 8002536:	230f      	movs	r3, #15
 8002538:	18fb      	adds	r3, r7, r3
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
 800253e:	230f      	movs	r3, #15
 8002540:	18fb      	adds	r3, r7, r3
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	2b07      	cmp	r3, #7
 8002546:	dc1c      	bgt.n	8002582 <_Z24crc_tools_ibutton_updatehh+0x6c>
    {
        if (crc & 0x01)
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	4013      	ands	r3, r2
 8002550:	d00a      	beq.n	8002568 <_Z24crc_tools_ibutton_updatehh+0x52>
            crc = (crc >> 1) ^ 0x8C;
 8002552:	1dfb      	adds	r3, r7, #7
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	105b      	asrs	r3, r3, #1
 8002558:	b25b      	sxtb	r3, r3
 800255a:	2274      	movs	r2, #116	; 0x74
 800255c:	4252      	negs	r2, r2
 800255e:	4053      	eors	r3, r2
 8002560:	b25a      	sxtb	r2, r3
 8002562:	1dfb      	adds	r3, r7, #7
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e004      	b.n	8002572 <_Z24crc_tools_ibutton_updatehh+0x5c>
        else
            crc >>= 1;
 8002568:	1dfb      	adds	r3, r7, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	105a      	asrs	r2, r3, #1
 800256e:	1dfb      	adds	r3, r7, #7
 8002570:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 8; i++)
 8002572:	230f      	movs	r3, #15
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	230f      	movs	r3, #15
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	3201      	adds	r2, #1
 800257e:	701a      	strb	r2, [r3, #0]
 8002580:	e7dd      	b.n	800253e <_Z24crc_tools_ibutton_updatehh+0x28>
    }

    return crc;
 8002582:	1dfb      	adds	r3, r7, #7
 8002584:	781b      	ldrb	r3, [r3, #0]
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b004      	add	sp, #16
 800258c:	bd80      	pop	{r7, pc}

0800258e <_Z35crc_tools_ibutton_get_initial_valuev>:

uint8_t crc_tools_ibutton_get_initial_value()
{
 800258e:	b580      	push	{r7, lr}
 8002590:	af00      	add	r7, sp, #0
    return 0;
 8002592:	2300      	movs	r3, #0
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <_Z27crc_tools_ibutton_calculatePhh>:

uint8_t crc_tools_ibutton_calculate(uint8_t bytes[], uint8_t size)
{
 800259a:	b590      	push	{r4, r7, lr}
 800259c:	b085      	sub	sp, #20
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
 80025a2:	000a      	movs	r2, r1
 80025a4:	1cfb      	adds	r3, r7, #3
 80025a6:	701a      	strb	r2, [r3, #0]
    uint8_t crc = crc_tools_ibutton_get_initial_value();
 80025a8:	230f      	movs	r3, #15
 80025aa:	18fc      	adds	r4, r7, r3
 80025ac:	f7ff ffef 	bl	800258e <_Z35crc_tools_ibutton_get_initial_valuev>
 80025b0:	0003      	movs	r3, r0
 80025b2:	7023      	strb	r3, [r4, #0]
    uint8_t i;

    for (i = 0; i < size; i++)
 80025b4:	230e      	movs	r3, #14
 80025b6:	18fb      	adds	r3, r7, r3
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
 80025bc:	230e      	movs	r3, #14
 80025be:	18fb      	adds	r3, r7, r3
 80025c0:	781a      	ldrb	r2, [r3, #0]
 80025c2:	1cfb      	adds	r3, r7, #3
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	429a      	cmp	r2, r3
 80025c8:	da18      	bge.n	80025fc <_Z27crc_tools_ibutton_calculatePhh+0x62>
    {
        crc = crc_tools_ibutton_update(crc, bytes[i]);
 80025ca:	230e      	movs	r3, #14
 80025cc:	18fb      	adds	r3, r7, r3
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	18d3      	adds	r3, r2, r3
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fc      	adds	r4, r7, r3
 80025da:	230f      	movs	r3, #15
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	0011      	movs	r1, r2
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ff97 	bl	8002516 <_Z24crc_tools_ibutton_updatehh>
 80025e8:	0003      	movs	r3, r0
 80025ea:	7023      	strb	r3, [r4, #0]
    for (i = 0; i < size; i++)
 80025ec:	230e      	movs	r3, #14
 80025ee:	18fb      	adds	r3, r7, r3
 80025f0:	781a      	ldrb	r2, [r3, #0]
 80025f2:	230e      	movs	r3, #14
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	3201      	adds	r2, #1
 80025f8:	701a      	strb	r2, [r3, #0]
 80025fa:	e7df      	b.n	80025bc <_Z27crc_tools_ibutton_calculatePhh+0x22>
    }

    return crc;
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b005      	add	sp, #20
 8002608:	bd90      	pop	{r4, r7, pc}

0800260a <_Z14prot3buff_initP11prot3buff_tPht>:
#include "prot3buff.h"
#include <stdlib.h>

void prot3buff_init(prot3buff_t *ob, uint8_t *buffer, uint16_t buffer_len)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	1dbb      	adds	r3, r7, #6
 8002616:	801a      	strh	r2, [r3, #0]
    ob->buffer = buffer;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	605a      	str	r2, [r3, #4]
    ob->capacity = buffer_len;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1dba      	adds	r2, r7, #6
 8002622:	8812      	ldrh	r2, [r2, #0]
 8002624:	801a      	strh	r2, [r3, #0]
    ob->writer_pos = 0;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	811a      	strh	r2, [r3, #8]
    ob->reader_pos = 0;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	815a      	strh	r2, [r3, #10]
}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b004      	add	sp, #16
 8002638:	bd80      	pop	{r7, pc}

0800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>:

uint16_t prot3buff_getWriterPos(prot3buff_t *ob)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
    return ob->writer_pos;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	891b      	ldrh	r3, [r3, #8]
}
 8002646:	0018      	movs	r0, r3
 8002648:	46bd      	mov	sp, r7
 800264a:	b002      	add	sp, #8
 800264c:	bd80      	pop	{r7, pc}

0800264e <_Z24prot3buff_setWriterToPosP11prot3buff_tt>:
{
    return ob->reader_pos;
}

void prot3buff_setWriterToPos(prot3buff_t *ob, uint16_t pos)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	000a      	movs	r2, r1
 8002658:	1cbb      	adds	r3, r7, #2
 800265a:	801a      	strh	r2, [r3, #0]
    if(pos < ob->capacity)
 800265c:	1cbb      	adds	r3, r7, #2
 800265e:	881b      	ldrh	r3, [r3, #0]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	8812      	ldrh	r2, [r2, #0]
 8002664:	4293      	cmp	r3, r2
 8002666:	da03      	bge.n	8002670 <_Z24prot3buff_setWriterToPosP11prot3buff_tt+0x22>
    {
        ob->writer_pos = pos;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	1cba      	adds	r2, r7, #2
 800266c:	8812      	ldrh	r2, [r2, #0]
 800266e:	811a      	strh	r2, [r3, #8]
    }
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b002      	add	sp, #8
 8002676:	bd80      	pop	{r7, pc}

08002678 <_Z24prot3buff_setReaderToPosP11prot3buff_tt>:

void prot3buff_setReaderToPos(prot3buff_t *ob, uint16_t pos)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	000a      	movs	r2, r1
 8002682:	1cbb      	adds	r3, r7, #2
 8002684:	801a      	strh	r2, [r3, #0]
    if(pos < ob->capacity)
 8002686:	1cbb      	adds	r3, r7, #2
 8002688:	881b      	ldrh	r3, [r3, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	8812      	ldrh	r2, [r2, #0]
 800268e:	4293      	cmp	r3, r2
 8002690:	da03      	bge.n	800269a <_Z24prot3buff_setReaderToPosP11prot3buff_tt+0x22>
    {
        ob->reader_pos = pos;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	1cba      	adds	r2, r7, #2
 8002696:	8812      	ldrh	r2, [r2, #0]
 8002698:	815a      	strh	r2, [r3, #10]
    }
}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	46bd      	mov	sp, r7
 800269e:	b002      	add	sp, #8
 80026a0:	bd80      	pop	{r7, pc}

080026a2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>:
    prot3buff_setWriterToPos(ob, 0);
    prot3buff_setReaderToPos(ob, 0);
}

uint16_t prot3buff_getCapacityAvail(prot3buff_t *ob)
{
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b082      	sub	sp, #8
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
    return ob->capacity - ob->writer_pos;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	891b      	ldrh	r3, [r3, #8]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	b29b      	uxth	r3, r3
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}

080026be <_Z18prot3buff_putBytesP11prot3buff_tPht>:
    }
    return 0;
}

uint16_t prot3buff_putBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	1dbb      	adds	r3, r7, #6
 80026ca:	801a      	strh	r2, [r3, #0]
    uint16_t put = 0;
 80026cc:	2316      	movs	r3, #22
 80026ce:	18fb      	adds	r3, r7, r3
 80026d0:	2200      	movs	r2, #0
 80026d2:	801a      	strh	r2, [r3, #0]

    while((ob->writer_pos < ob->capacity) && (put < size))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	891b      	ldrh	r3, [r3, #8]
 80026d8:	001a      	movs	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	429a      	cmp	r2, r3
 80026e0:	da1f      	bge.n	8002722 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x64>
 80026e2:	2316      	movs	r3, #22
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	1dbb      	adds	r3, r7, #6
 80026ea:	881b      	ldrh	r3, [r3, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	da18      	bge.n	8002722 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x64>
    {
        ob->buffer[ob->writer_pos] = *array;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	68fa      	ldr	r2, [r7, #12]
 80026f6:	8912      	ldrh	r2, [r2, #8]
 80026f8:	189b      	adds	r3, r3, r2
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	7812      	ldrb	r2, [r2, #0]
 80026fe:	701a      	strb	r2, [r3, #0]
        ob->writer_pos++;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	891b      	ldrh	r3, [r3, #8]
 8002704:	3301      	adds	r3, #1
 8002706:	b29a      	uxth	r2, r3
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	811a      	strh	r2, [r3, #8]
        array++;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
        put++;
 8002712:	2316      	movs	r3, #22
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	881a      	ldrh	r2, [r3, #0]
 8002718:	2316      	movs	r3, #22
 800271a:	18fb      	adds	r3, r7, r3
 800271c:	3201      	adds	r2, #1
 800271e:	801a      	strh	r2, [r3, #0]
    while((ob->writer_pos < ob->capacity) && (put < size))
 8002720:	e7d8      	b.n	80026d4 <_Z18prot3buff_putBytesP11prot3buff_tPht+0x16>
    }
    return put;
 8002722:	2316      	movs	r3, #22
 8002724:	18fb      	adds	r3, r7, r3
 8002726:	881b      	ldrh	r3, [r3, #0]
}
 8002728:	0018      	movs	r0, r3
 800272a:	46bd      	mov	sp, r7
 800272c:	b006      	add	sp, #24
 800272e:	bd80      	pop	{r7, pc}

08002730 <_Z23prot3buff_getBytesAvailP11prot3buff_t>:

uint16_t prot3buff_getBytesAvail(prot3buff_t *ob)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    return ob->writer_pos - ob->reader_pos;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	891a      	ldrh	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	895b      	ldrh	r3, [r3, #10]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	b29b      	uxth	r3, r3
}
 8002744:	0018      	movs	r0, r3
 8002746:	46bd      	mov	sp, r7
 8002748:	b002      	add	sp, #8
 800274a:	bd80      	pop	{r7, pc}

0800274c <_Z19prot3buff_readBytesP11prot3buff_tPht>:
    }
    return -1;
}

uint16_t prot3buff_readBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	60f8      	str	r0, [r7, #12]
 8002754:	60b9      	str	r1, [r7, #8]
 8002756:	1dbb      	adds	r3, r7, #6
 8002758:	801a      	strh	r2, [r3, #0]
    uint16_t read = 0;
 800275a:	2316      	movs	r3, #22
 800275c:	18fb      	adds	r3, r7, r3
 800275e:	2200      	movs	r2, #0
 8002760:	801a      	strh	r2, [r3, #0]

    if(array != NULL)
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d026      	beq.n	80027b6 <_Z19prot3buff_readBytesP11prot3buff_tPht+0x6a>
    {
        while((ob->reader_pos < ob->writer_pos) && (read < size))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	895b      	ldrh	r3, [r3, #10]
 800276c:	001a      	movs	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	891b      	ldrh	r3, [r3, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	da40      	bge.n	80027f8 <_Z19prot3buff_readBytesP11prot3buff_tPht+0xac>
 8002776:	2316      	movs	r3, #22
 8002778:	18fb      	adds	r3, r7, r3
 800277a:	881a      	ldrh	r2, [r3, #0]
 800277c:	1dbb      	adds	r3, r7, #6
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	429a      	cmp	r2, r3
 8002782:	da39      	bge.n	80027f8 <_Z19prot3buff_readBytesP11prot3buff_tPht+0xac>
        {
            *array = ob->buffer[ob->reader_pos];
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	8952      	ldrh	r2, [r2, #10]
 800278c:	189b      	adds	r3, r3, r2
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	701a      	strb	r2, [r3, #0]
            ob->reader_pos++;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	895b      	ldrh	r3, [r3, #10]
 8002798:	3301      	adds	r3, #1
 800279a:	b29a      	uxth	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	815a      	strh	r2, [r3, #10]
            array++;
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	3301      	adds	r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
            read++;
 80027a6:	2316      	movs	r3, #22
 80027a8:	18fb      	adds	r3, r7, r3
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	2316      	movs	r3, #22
 80027ae:	18fb      	adds	r3, r7, r3
 80027b0:	3201      	adds	r2, #1
 80027b2:	801a      	strh	r2, [r3, #0]
        while((ob->reader_pos < ob->writer_pos) && (read < size))
 80027b4:	e7d8      	b.n	8002768 <_Z19prot3buff_readBytesP11prot3buff_tPht+0x1c>
        }
    }
    else
    {
        uint16_t available = ob->writer_pos - ob->reader_pos;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8919      	ldrh	r1, [r3, #8]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	895a      	ldrh	r2, [r3, #10]
 80027be:	2314      	movs	r3, #20
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	1a8a      	subs	r2, r1, r2
 80027c4:	801a      	strh	r2, [r3, #0]

        read = (available < size) ? available : size;
 80027c6:	2314      	movs	r3, #20
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	881a      	ldrh	r2, [r3, #0]
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	881b      	ldrh	r3, [r3, #0]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	da03      	bge.n	80027dc <_Z19prot3buff_readBytesP11prot3buff_tPht+0x90>
 80027d4:	2314      	movs	r3, #20
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	e001      	b.n	80027e0 <_Z19prot3buff_readBytesP11prot3buff_tPht+0x94>
 80027dc:	1dbb      	adds	r3, r7, #6
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	2216      	movs	r2, #22
 80027e2:	18ba      	adds	r2, r7, r2
 80027e4:	8013      	strh	r3, [r2, #0]
        ob->reader_pos += read;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	895a      	ldrh	r2, [r3, #10]
 80027ea:	2316      	movs	r3, #22
 80027ec:	18fb      	adds	r3, r7, r3
 80027ee:	881b      	ldrh	r3, [r3, #0]
 80027f0:	18d3      	adds	r3, r2, r3
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	815a      	strh	r2, [r3, #10]
    }
    return read;
 80027f8:	2316      	movs	r3, #22
 80027fa:	18fb      	adds	r3, r7, r3
 80027fc:	881b      	ldrh	r3, [r3, #0]
}
 80027fe:	0018      	movs	r0, r3
 8002800:	46bd      	mov	sp, r7
 8002802:	b006      	add	sp, #24
 8002804:	bd80      	pop	{r7, pc}

08002806 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht>:
    }
    return 0;
}

uint16_t prot3buff_replaceLastNReadBytes(prot3buff_t *ob, uint8_t *array, uint16_t size)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b086      	sub	sp, #24
 800280a:	af00      	add	r7, sp, #0
 800280c:	60f8      	str	r0, [r7, #12]
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	1dbb      	adds	r3, r7, #6
 8002812:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    if(ob->reader_pos >= size)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	895b      	ldrh	r3, [r3, #10]
 8002818:	001a      	movs	r2, r3
 800281a:	1dbb      	adds	r3, r7, #6
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	db24      	blt.n	800286c <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x66>
    {
        for(i = ob->reader_pos - size; i < ob->reader_pos; i++)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8959      	ldrh	r1, [r3, #10]
 8002826:	2316      	movs	r3, #22
 8002828:	18fb      	adds	r3, r7, r3
 800282a:	1dba      	adds	r2, r7, #6
 800282c:	8812      	ldrh	r2, [r2, #0]
 800282e:	1a8a      	subs	r2, r1, r2
 8002830:	801a      	strh	r2, [r3, #0]
 8002832:	2316      	movs	r3, #22
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	68fa      	ldr	r2, [r7, #12]
 800283a:	8952      	ldrh	r2, [r2, #10]
 800283c:	4293      	cmp	r3, r2
 800283e:	da13      	bge.n	8002868 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x62>
        {
            ob->buffer[i] = *array;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	2316      	movs	r3, #22
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	18d3      	adds	r3, r2, r3
 800284c:	68ba      	ldr	r2, [r7, #8]
 800284e:	7812      	ldrb	r2, [r2, #0]
 8002850:	701a      	strb	r2, [r3, #0]
            array++;
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	3301      	adds	r3, #1
 8002856:	60bb      	str	r3, [r7, #8]
        for(i = ob->reader_pos - size; i < ob->reader_pos; i++)
 8002858:	2316      	movs	r3, #22
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	2316      	movs	r3, #22
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	3201      	adds	r2, #1
 8002864:	801a      	strh	r2, [r3, #0]
 8002866:	e7e4      	b.n	8002832 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x2c>
        }
        return 1;
 8002868:	2301      	movs	r3, #1
 800286a:	e000      	b.n	800286e <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht+0x68>
    }
    return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b006      	add	sp, #24
 8002874:	bd80      	pop	{r7, pc}

08002876 <_Z15rfm22bands_initv>:
void rfm2bands_send_power_spi(uint8_t power);                                   //power is RFM22_TX_POWER_xx_DBM constant

/**PUBLIC FUNCTIONS**/
/*---------------------------------------------------------------------------*/
void rfm22bands_init()
{
 8002876:	b590      	push	{r4, r7, lr}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
    uint8_t abs_channel = rfm22callbacks_get_channel();
 800287c:	1dfc      	adds	r4, r7, #7
 800287e:	f002 fb1d 	bl	8004ebc <_Z26rfm22callbacks_get_channelv>
 8002882:	0003      	movs	r3, r0
 8002884:	7023      	strb	r3, [r4, #0]
    uint8_t power = rfm22callbacks_get_power();
 8002886:	1dbc      	adds	r4, r7, #6
 8002888:	f002 fb28 	bl	8004edc <_Z24rfm22callbacks_get_powerv>
 800288c:	0003      	movs	r3, r0
 800288e:	7023      	strb	r3, [r4, #0]

    //channel validation
    if(!rfm22bands_validate_abs_channel(abs_channel))
 8002890:	1dfb      	adds	r3, r7, #7
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	0018      	movs	r0, r3
 8002896:	f000 f903 	bl	8002aa0 <_Z31rfm22bands_validate_abs_channelh>
 800289a:	0003      	movs	r3, r0
 800289c:	425a      	negs	r2, r3
 800289e:	4153      	adcs	r3, r2
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d007      	beq.n	80028b6 <_Z15rfm22bands_initv+0x40>
    {
        abs_channel = RFM22BANDS_DEFAULT_CHANNEL;
 80028a6:	1dfb      	adds	r3, r7, #7
 80028a8:	2231      	movs	r2, #49	; 0x31
 80028aa:	701a      	strb	r2, [r3, #0]
        rfm22callbacks_set_channel(abs_channel);
 80028ac:	1dfb      	adds	r3, r7, #7
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	0018      	movs	r0, r3
 80028b2:	f002 faf9 	bl	8004ea8 <_Z26rfm22callbacks_set_channelh>
    }

    //power validation
    if(!rfm22bands_validate_power(power))
 80028b6:	1dbb      	adds	r3, r7, #6
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	0018      	movs	r0, r3
 80028bc:	f000 f901 	bl	8002ac2 <_Z25rfm22bands_validate_powerh>
 80028c0:	0003      	movs	r3, r0
 80028c2:	425a      	negs	r2, r3
 80028c4:	4153      	adcs	r3, r2
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <_Z15rfm22bands_initv+0x66>
    {
        power = RFM22BANDS_DEFAULT_POWER;
 80028cc:	1dbb      	adds	r3, r7, #6
 80028ce:	2206      	movs	r2, #6
 80028d0:	701a      	strb	r2, [r3, #0]
        rfm22callbacks_set_power(power);
 80028d2:	1dbb      	adds	r3, r7, #6
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	0018      	movs	r0, r3
 80028d8:	f002 faf6 	bl	8004ec8 <_Z24rfm22callbacks_set_powerh>
    }

    rfm22bands_update_profile(1);
 80028dc:	2001      	movs	r0, #1
 80028de:	f000 f82f 	bl	8002940 <_Z25rfm22bands_update_profileh>
    rfm2bands_send_power_spi(power);
 80028e2:	1dbb      	adds	r3, r7, #6
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 f9a6 	bl	8002c38 <_Z24rfm2bands_send_power_spih>
    rfm22bands_set_abs_channel_carrier_frequency(abs_channel);
 80028ec:	1dfb      	adds	r3, r7, #7
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	0018      	movs	r0, r3
 80028f2:	f000 f8f9 	bl	8002ae8 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh>
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	b003      	add	sp, #12
 80028fc:	bd90      	pop	{r4, r7, pc}

080028fe <_Z37rfm22bands_update_profile_for_channelhs>:
/**PRIVATE FUNCTIONS**/

//main profile updaterers
/*---------------------------------------------------------------------------*/
void rfm22bands_update_profile_for_channel(uint8_t force_full_loading, int16_t channel)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b08a      	sub	sp, #40	; 0x28
 8002902:	af00      	add	r7, sp, #0
 8002904:	0002      	movs	r2, r0
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	1d3b      	adds	r3, r7, #4
 800290c:	1c0a      	adds	r2, r1, #0
 800290e:	801a      	strh	r2, [r3, #0]
    uint8_t load = force_full_loading;
 8002910:	2327      	movs	r3, #39	; 0x27
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	1dfa      	adds	r2, r7, #7
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	701a      	strb	r2, [r3, #0]
    //channel == -1 means channel has been set in pernament memory and have to be read by callback
//    uint8_t new_channel = (channel == -1) ? rfm22callbacks_get_channel() : channel;
    rfm22profiles_regs_t regs;

    //when force_full_loading==0 profile is loaded only if necessary
    if(load)
 800291a:	2327      	movs	r3, #39	; 0x27
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d009      	beq.n	8002938 <_Z37rfm22bands_update_profile_for_channelhs+0x3a>
    {
        rfm22bands_fill_profile_regs(&regs);
 8002924:	230c      	movs	r3, #12
 8002926:	18fb      	adds	r3, r7, r3
 8002928:	0018      	movs	r0, r3
 800292a:	f000 f81b 	bl	8002964 <_Z28rfm22bands_fill_profile_regsP20rfm22profiles_regs_t>
        rfm22bands_send_profile_regs_spi(&regs);
 800292e:	230c      	movs	r3, #12
 8002930:	18fb      	adds	r3, r7, r3
 8002932:	0018      	movs	r0, r3
 8002934:	f000 f822 	bl	800297c <_Z32rfm22bands_send_profile_regs_spiPK20rfm22profiles_regs_t>
    }
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	b00a      	add	sp, #40	; 0x28
 800293e:	bd80      	pop	{r7, pc}

08002940 <_Z25rfm22bands_update_profileh>:

/*---------------------------------------------------------------------------*/
void rfm22bands_update_profile(uint8_t force_full_loading)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	0002      	movs	r2, r0
 8002948:	1dfb      	adds	r3, r7, #7
 800294a:	701a      	strb	r2, [r3, #0]
    rfm22bands_update_profile_for_channel(force_full_loading, -1);
 800294c:	2301      	movs	r3, #1
 800294e:	425a      	negs	r2, r3
 8002950:	1dfb      	adds	r3, r7, #7
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	0011      	movs	r1, r2
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff ffd1 	bl	80028fe <_Z37rfm22bands_update_profile_for_channelhs>
}
 800295c:	46c0      	nop			; (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <_Z28rfm22bands_fill_profile_regsP20rfm22profiles_regs_t>:

//helpers for rfm22bands_update_profile()
/*---------------------------------------------------------------------------*/
void rfm22bands_fill_profile_regs(rfm22profiles_regs_t *regs)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    rfm22profiles_fill_standard_profile(regs);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0018      	movs	r0, r3
 8002970:	f002 fc30 	bl	80051d4 <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t>
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b002      	add	sp, #8
 800297a:	bd80      	pop	{r7, pc}

0800297c <_Z32rfm22bands_send_profile_regs_spiPK20rfm22profiles_regs_t>:

/*---------------------------------------------------------------------------*/
void rfm22bands_send_profile_regs_spi(const rfm22profiles_regs_t *regs)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b082      	sub	sp, #8
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
    //carrier freqency
    rfm22ports_trans_write(RFM22_ADDR_FREQUENCY_BAND_SELECT, regs->reg75);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	0019      	movs	r1, r3
 800298a:	20f5      	movs	r0, #245	; 0xf5
 800298c:	f002 fba2 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_1, regs->reg76);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	0019      	movs	r1, r3
 8002996:	20f6      	movs	r0, #246	; 0xf6
 8002998:	f002 fb9c 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_0, regs->reg77);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	789b      	ldrb	r3, [r3, #2]
 80029a0:	0019      	movs	r1, r3
 80029a2:	20f7      	movs	r0, #247	; 0xf7
 80029a4:	f002 fb96 	bl	80050d4 <_Z16rfm22ports_transhh>

    //tx data rate
    rfm22ports_trans_write(RFM22_ADDR_TX_DATARATE1, regs->reg6E);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	78db      	ldrb	r3, [r3, #3]
 80029ac:	0019      	movs	r1, r3
 80029ae:	20ee      	movs	r0, #238	; 0xee
 80029b0:	f002 fb90 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_TX_DATARATE0, regs->reg6F);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	791b      	ldrb	r3, [r3, #4]
 80029b8:	0019      	movs	r1, r3
 80029ba:	20ef      	movs	r0, #239	; 0xef
 80029bc:	f002 fb8a 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_1, regs->reg70);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	795b      	ldrb	r3, [r3, #5]
 80029c4:	0019      	movs	r1, r3
 80029c6:	20f0      	movs	r0, #240	; 0xf0
 80029c8:	f002 fb84 	bl	80050d4 <_Z16rfm22ports_transhh>

    //tx frequency deviation
    rfm22ports_trans_write(RFM22_ADDR_FREQUENCY_DEVIATION, regs->reg72);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	79db      	ldrb	r3, [r3, #7]
 80029d0:	0019      	movs	r1, r3
 80029d2:	20f2      	movs	r0, #242	; 0xf2
 80029d4:	f002 fb7e 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_2, regs->reg71);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	7a1b      	ldrb	r3, [r3, #8]
 80029dc:	0019      	movs	r1, r3
 80029de:	20f1      	movs	r0, #241	; 0xf1
 80029e0:	f002 fb78 	bl	80050d4 <_Z16rfm22ports_transhh>

    //rx (G)FSK and OOK
    rfm22ports_trans_write(RFM22_ADDR_IF_FILTER_BANDWIDTH, regs->reg1C);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	7a5b      	ldrb	r3, [r3, #9]
 80029e8:	0019      	movs	r1, r3
 80029ea:	209c      	movs	r0, #156	; 0x9c
 80029ec:	f002 fb72 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OVERSAM_RATIO, regs->reg20);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	7a9b      	ldrb	r3, [r3, #10]
 80029f4:	0019      	movs	r1, r3
 80029f6:	20a0      	movs	r0, #160	; 0xa0
 80029f8:	f002 fb6c 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_2, regs->reg21);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7adb      	ldrb	r3, [r3, #11]
 8002a00:	0019      	movs	r1, r3
 8002a02:	20a1      	movs	r0, #161	; 0xa1
 8002a04:	f002 fb66 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_1, regs->reg22);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	20a2      	movs	r0, #162	; 0xa2
 8002a10:	f002 fb60 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_OFFSET_0, regs->reg23);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7b5b      	ldrb	r3, [r3, #13]
 8002a18:	0019      	movs	r1, r3
 8002a1a:	20a3      	movs	r0, #163	; 0xa3
 8002a1c:	f002 fb5a 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_1, regs->reg24);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	7b9b      	ldrb	r3, [r3, #14]
 8002a24:	0019      	movs	r1, r3
 8002a26:	20a4      	movs	r0, #164	; 0xa4
 8002a28:	f002 fb54 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_0, regs->reg25);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7bdb      	ldrb	r3, [r3, #15]
 8002a30:	0019      	movs	r1, r3
 8002a32:	20a5      	movs	r0, #165	; 0xa5
 8002a34:	f002 fb4e 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_CLOCK_RECOV_GEARSHIFT_OVERR, regs->reg1F);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	7c1b      	ldrb	r3, [r3, #16]
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	209f      	movs	r0, #159	; 0x9f
 8002a40:	f002 fb48 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AGC_OVERRIDE_1, regs->reg69);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7c5b      	ldrb	r3, [r3, #17]
 8002a48:	0019      	movs	r1, r3
 8002a4a:	20e9      	movs	r0, #233	; 0xe9
 8002a4c:	f002 fb42 	bl	80050d4 <_Z16rfm22ports_transhh>

    //rx (G)FSK
    rfm22ports_trans_write(RFM22_ADDR_AFC_LOOP_GEARSHIFT_OVERR, regs->reg1D);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	7c9b      	ldrb	r3, [r3, #18]
 8002a54:	0019      	movs	r1, r3
 8002a56:	209d      	movs	r0, #157	; 0x9d
 8002a58:	f002 fb3c 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AFC_TIMING_CONTROL, regs->reg1E);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	7cdb      	ldrb	r3, [r3, #19]
 8002a60:	0019      	movs	r1, r3
 8002a62:	209e      	movs	r0, #158	; 0x9e
 8002a64:	f002 fb36 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_AFC_LIMITER, regs->reg2A);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7d1b      	ldrb	r3, [r3, #20]
 8002a6c:	0019      	movs	r1, r3
 8002a6e:	20aa      	movs	r0, #170	; 0xaa
 8002a70:	f002 fb30 	bl	80050d4 <_Z16rfm22ports_transhh>

    //rx OOK
    rfm22ports_trans_write(RFM22_ADDR_OOK_COUNTER_VALUE_1, regs->reg2C);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	7d5b      	ldrb	r3, [r3, #21]
 8002a78:	0019      	movs	r1, r3
 8002a7a:	20ac      	movs	r0, #172	; 0xac
 8002a7c:	f002 fb2a 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_OOK_COUNTER_VALUE_2, regs->reg2D);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	7d9b      	ldrb	r3, [r3, #22]
 8002a84:	0019      	movs	r1, r3
 8002a86:	20ad      	movs	r0, #173	; 0xad
 8002a88:	f002 fb24 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_SLICER_PEAK_HOLD, regs->reg2E);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	7ddb      	ldrb	r3, [r3, #23]
 8002a90:	0019      	movs	r1, r3
 8002a92:	20ae      	movs	r0, #174	; 0xae
 8002a94:	f002 fb1e 	bl	80050d4 <_Z16rfm22ports_transhh>
}
 8002a98:	46c0      	nop			; (mov r8, r8)
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	b002      	add	sp, #8
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <_Z31rfm22bands_validate_abs_channelh>:

/*---------------------------------------------------------------------------*/
uint8_t rfm22bands_validate_abs_channel(uint8_t channel)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	0002      	movs	r2, r0
 8002aa8:	1dfb      	adds	r3, r7, #7
 8002aaa:	701a      	strb	r2, [r3, #0]
    return (RFM22BANDS_FIRST_ABSOLUTE_CHANNEL <= channel) && (channel <= RFM22BANDS_LAST_ABSOLUTE_CHANNEL);
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	2142      	movs	r1, #66	; 0x42
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	4291      	cmp	r1, r2
 8002ab6:	415b      	adcs	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
}
 8002aba:	0018      	movs	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	b002      	add	sp, #8
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <_Z25rfm22bands_validate_powerh>:
    return (RFM22BANDS_FIRST_DEVELOPER_CHANNEL <= channel) && (channel <= RFM22BANDS_LAST_DEVELOPER_CHANNEL);
}

/*---------------------------------------------------------------------------*/
uint8_t rfm22bands_validate_power(uint8_t power)
{
 8002ac2:	b580      	push	{r7, lr}
 8002ac4:	b082      	sub	sp, #8
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	0002      	movs	r2, r0
 8002aca:	1dfb      	adds	r3, r7, #7
 8002acc:	701a      	strb	r2, [r3, #0]
    return (RFM22_TX_POWER_1_DBM <= power) && (power <= RFM22_TX_POWER_20_DBM);
 8002ace:	1dfb      	adds	r3, r7, #7
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	0fd8      	lsrs	r0, r3, #31
 8002ad6:	17d1      	asrs	r1, r2, #31
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	4148      	adcs	r0, r1
 8002adc:	0003      	movs	r3, r0
 8002ade:	b2db      	uxtb	r3, r3
}
 8002ae0:	0018      	movs	r0, r3
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b002      	add	sp, #8
 8002ae6:	bd80      	pop	{r7, pc}

08002ae8 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh>:

//main channel carrier frequency setter
/*---------------------------------------------------------------------------*/
void rfm22bands_set_abs_channel_carrier_frequency(uint8_t abs_channel)
{
 8002ae8:	b590      	push	{r4, r7, lr}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	0002      	movs	r2, r0
 8002af0:	1dfb      	adds	r3, r7, #7
 8002af2:	701a      	strb	r2, [r3, #0]
    uint32_t frequency;
    uint16_t regs;

    if (rfm22bands_validate_abs_channel(abs_channel))
 8002af4:	1dfb      	adds	r3, r7, #7
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff ffd1 	bl	8002aa0 <_Z31rfm22bands_validate_abs_channelh>
 8002afe:	0003      	movs	r3, r0
 8002b00:	1e5a      	subs	r2, r3, #1
 8002b02:	4193      	sbcs	r3, r2
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d014      	beq.n	8002b34 <_Z44rfm22bands_set_abs_channel_carrier_frequencyh+0x4c>
    {
        frequency = rfm22bands_frequency_of_abs_channel(abs_channel);
 8002b0a:	1dfb      	adds	r3, r7, #7
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f850 	bl	8002bb4 <_Z35rfm22bands_frequency_of_abs_channelh>
 8002b14:	0003      	movs	r3, r0
 8002b16:	60fb      	str	r3, [r7, #12]
        regs = rfm22bands_freq2regs(frequency);
 8002b18:	230a      	movs	r3, #10
 8002b1a:	18fc      	adds	r4, r7, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 f80c 	bl	8002b3c <_Z20rfm22bands_freq2regsm>
 8002b24:	0003      	movs	r3, r0
 8002b26:	8023      	strh	r3, [r4, #0]
        rfm22bands_send_freq_spi(regs);
 8002b28:	230a      	movs	r3, #10
 8002b2a:	18fb      	adds	r3, r7, r3
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	0018      	movs	r0, r3
 8002b30:	f000 f81c 	bl	8002b6c <_Z24rfm22bands_send_freq_spit>
    }
}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b005      	add	sp, #20
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <_Z20rfm22bands_freq2regsm>:

//center frequency selection
/*---------------------------------------------------------------------------*/
uint16_t rfm22bands_freq2regs(uint32_t freq)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    //arg. "freq" - center freq. (increment over 860MHz only) in Hz
    //center frequency cannot exceed 870MHz. It means "freq" can't exceed 10 mln
    //freq should be multiplicity of 625Hz

    uint16_t fc = (uint16_t) (freq * 2UL / 625UL);           //division by 312,5Hz
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	4907      	ldr	r1, [pc, #28]	; (8002b68 <_Z20rfm22bands_freq2regsm+0x2c>)
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7fd fadc 	bl	8000108 <__udivsi3>
 8002b50:	0003      	movs	r3, r0
 8002b52:	001a      	movs	r2, r3
 8002b54:	230e      	movs	r3, #14
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	801a      	strh	r2, [r3, #0]

    return fc;
 8002b5a:	230e      	movs	r3, #14
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	881b      	ldrh	r3, [r3, #0]
}
 8002b60:	0018      	movs	r0, r3
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b004      	add	sp, #16
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00000271 	.word	0x00000271

08002b6c <_Z24rfm22bands_send_freq_spit>:

/*---------------------------------------------------------------------------*/
void rfm22bands_send_freq_spi(uint16_t fc_regs)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	0002      	movs	r2, r0
 8002b74:	1dbb      	adds	r3, r7, #6
 8002b76:	801a      	strh	r2, [r3, #0]
    uint8_t frequencyMSB = (fc_regs >> 8);
 8002b78:	1dbb      	adds	r3, r7, #6
 8002b7a:	881b      	ldrh	r3, [r3, #0]
 8002b7c:	121a      	asrs	r2, r3, #8
 8002b7e:	230f      	movs	r3, #15
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	701a      	strb	r2, [r3, #0]
    uint8_t frequencyLSB = (fc_regs & 0xFF);
 8002b84:	230e      	movs	r3, #14
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	1dba      	adds	r2, r7, #6
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	701a      	strb	r2, [r3, #0]

    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_1, frequencyMSB);
 8002b8e:	230f      	movs	r3, #15
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	0019      	movs	r1, r3
 8002b96:	20f6      	movs	r0, #246	; 0xf6
 8002b98:	f002 fa9c 	bl	80050d4 <_Z16rfm22ports_transhh>
    rfm22ports_trans_write(RFM22_ADDR_NOMINAL_CARRIER_FREQ_0, frequencyLSB);
 8002b9c:	230e      	movs	r3, #14
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	20f7      	movs	r0, #247	; 0xf7
 8002ba6:	f002 fa95 	bl	80050d4 <_Z16rfm22ports_transhh>
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b004      	add	sp, #16
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <_Z35rfm22bands_frequency_of_abs_channelh>:

//channel->frequency conversion
/*---------------------------------------------------------------------------*/
uint32_t rfm22bands_frequency_of_abs_channel(uint8_t abs_channel)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	0002      	movs	r2, r0
 8002bbc:	1dfb      	adds	r3, r7, #7
 8002bbe:	701a      	strb	r2, [r3, #0]
    uint32_t frequency = RFM22BANDS_25mW_BAND1_FIRST_CHANNEL_FREQ;
 8002bc0:	4b19      	ldr	r3, [pc, #100]	; (8002c28 <_Z35rfm22bands_frequency_of_abs_channelh+0x74>)
 8002bc2:	60fb      	str	r3, [r7, #12]

    if (rfm22bands_validate_abs_channel(abs_channel))
 8002bc4:	1dfb      	adds	r3, r7, #7
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f7ff ff69 	bl	8002aa0 <_Z31rfm22bands_validate_abs_channelh>
 8002bce:	0003      	movs	r3, r0
 8002bd0:	1e5a      	subs	r2, r3, #1
 8002bd2:	4193      	sbcs	r3, r2
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d021      	beq.n	8002c1e <_Z35rfm22bands_frequency_of_abs_channelh+0x6a>
    {
        if ((RFM22BANDS_25mW_BAND1_FIRST_CHANNEL <= abs_channel) && (abs_channel <= RFM22BANDS_25mW_BAND1_LAST_CHANNEL))
 8002bda:	1dfb      	adds	r3, r7, #7
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b3f      	cmp	r3, #63	; 0x3f
 8002be0:	d809      	bhi.n	8002bf6 <_Z35rfm22bands_frequency_of_abs_channelh+0x42>
        {
            frequency = RFM22BANDS_25mW_BAND1_FIRST_CHANNEL_FREQ;
 8002be2:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <_Z35rfm22bands_frequency_of_abs_channelh+0x74>)
 8002be4:	60fb      	str	r3, [r7, #12]
            frequency += (abs_channel - RFM22BANDS_25mW_BAND1_FIRST_CHANNEL) * RFM22BANDS_25mW_BANDS_1_2_CH_SPACING;
 8002be6:	1dfb      	adds	r3, r7, #7
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4a10      	ldr	r2, [pc, #64]	; (8002c2c <_Z35rfm22bands_frequency_of_abs_channelh+0x78>)
 8002bec:	4353      	muls	r3, r2
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	18d3      	adds	r3, r2, r3
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	e013      	b.n	8002c1e <_Z35rfm22bands_frequency_of_abs_channelh+0x6a>
        }
        else if ((RFM22BANDS_25mW_BAND2_FIRST_CHANNEL <= abs_channel) && (abs_channel <= RFM22BANDS_25mW_BAND2_LAST_CHANNEL))
 8002bf6:	1dfb      	adds	r3, r7, #7
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b3f      	cmp	r3, #63	; 0x3f
 8002bfc:	d90f      	bls.n	8002c1e <_Z35rfm22bands_frequency_of_abs_channelh+0x6a>
 8002bfe:	1dfb      	adds	r3, r7, #7
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b42      	cmp	r3, #66	; 0x42
 8002c04:	d80b      	bhi.n	8002c1e <_Z35rfm22bands_frequency_of_abs_channelh+0x6a>
        {
            frequency = RFM22BANDS_25mW_BAND2_FIRST_CHANNEL_FREQ;
 8002c06:	4b0a      	ldr	r3, [pc, #40]	; (8002c30 <_Z35rfm22bands_frequency_of_abs_channelh+0x7c>)
 8002c08:	60fb      	str	r3, [r7, #12]
            frequency += (abs_channel - RFM22BANDS_25mW_BAND2_FIRST_CHANNEL) * RFM22BANDS_25mW_BANDS_1_2_CH_SPACING;
 8002c0a:	1dfb      	adds	r3, r7, #7
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	4a07      	ldr	r2, [pc, #28]	; (8002c2c <_Z35rfm22bands_frequency_of_abs_channelh+0x78>)
 8002c10:	435a      	muls	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	18d3      	adds	r3, r2, r3
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <_Z35rfm22bands_frequency_of_abs_channelh+0x80>)
 8002c18:	4694      	mov	ip, r2
 8002c1a:	4463      	add	r3, ip
 8002c1c:	60fb      	str	r3, [r7, #12]
        }
    }

    return frequency;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	002e8a10 	.word	0x002e8a10
 8002c2c:	000186a0 	.word	0x000186a0
 8002c30:	0094c5f0 	.word	0x0094c5f0
 8002c34:	ff9e5800 	.word	0xff9e5800

08002c38 <_Z24rfm2bands_send_power_spih>:
    return power;
}

/*---------------------------------------------------------------------------*/
void rfm2bands_send_power_spi(uint8_t power)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	0002      	movs	r2, r0
 8002c40:	1dfb      	adds	r3, r7, #7
 8002c42:	701a      	strb	r2, [r3, #0]
    if (rfm22bands_validate_power(power))
 8002c44:	1dfb      	adds	r3, r7, #7
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	0018      	movs	r0, r3
 8002c4a:	f7ff ff3a 	bl	8002ac2 <_Z25rfm22bands_validate_powerh>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	4193      	sbcs	r3, r2
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d008      	beq.n	8002c6c <_Z24rfm2bands_send_power_spih+0x34>
    {
        rfm22ports_trans_write(RFM22_ADDR_TX_POWER, RFM22_TX_POWER_LNA_SW | power);
 8002c5a:	1dfb      	adds	r3, r7, #7
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	2208      	movs	r2, #8
 8002c60:	4313      	orrs	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	0019      	movs	r1, r3
 8002c66:	20ed      	movs	r0, #237	; 0xed
 8002c68:	f002 fa34 	bl	80050d4 <_Z16rfm22ports_transhh>
    }
}
 8002c6c:	46c0      	nop			; (mov r8, r8)
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	b002      	add	sp, #8
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_Z22rfm22driver_trans_readh>:

//do drivera wtp3
void rfm22driver_clear_fifo();

uint8_t rfm22driver_trans_read(uint8_t address)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	0002      	movs	r2, r0
 8002c7c:	1dfb      	adds	r3, r7, #7
 8002c7e:	701a      	strb	r2, [r3, #0]
    return rfm22ports_trans(RFM22_READ_FLAG | address, 0);
 8002c80:	1dfb      	adds	r3, r7, #7
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	0018      	movs	r0, r3
 8002c88:	f002 fa24 	bl	80050d4 <_Z16rfm22ports_transhh>
 8002c8c:	0003      	movs	r3, r0
}
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b002      	add	sp, #8
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <_Z23rfm22driver_trans_writehh>:

void rfm22driver_trans_write(uint8_t address, uint8_t value)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	0002      	movs	r2, r0
 8002c9e:	1dfb      	adds	r3, r7, #7
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	1dbb      	adds	r3, r7, #6
 8002ca4:	1c0a      	adds	r2, r1, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
    rfm22ports_trans(RFM22_WRITE_FLAG | (address), value);
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	4252      	negs	r2, r2
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	1dbb      	adds	r3, r7, #6
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	0019      	movs	r1, r3
 8002cba:	0010      	movs	r0, r2
 8002cbc:	f002 fa0a 	bl	80050d4 <_Z16rfm22ports_transhh>
}
 8002cc0:	46c0      	nop			; (mov r8, r8)
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b002      	add	sp, #8
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <_Z22rfm22driver_burst_readhhPh>:

void rfm22driver_burst_read(uint8_t address, uint8_t length, uint8_t *values)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	603a      	str	r2, [r7, #0]
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	1c02      	adds	r2, r0, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	1dbb      	adds	r3, r7, #6
 8002cd8:	1c0a      	adds	r2, r1, #0
 8002cda:	701a      	strb	r2, [r3, #0]
    rfm22ports_burst(RFM22_READ_FLAG | (address), length, values);
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	1dbb      	adds	r3, r7, #6
 8002ce0:	7819      	ldrb	r1, [r3, #0]
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	f002 fa30 	bl	800514c <_Z16rfm22ports_bursthhPh>
}
 8002cec:	46c0      	nop			; (mov r8, r8)
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	b002      	add	sp, #8
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <_Z23rfm22driver_burst_writehhPh>:

void rfm22driver_burst_write(uint8_t address, uint8_t length, uint8_t *values)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	603a      	str	r2, [r7, #0]
 8002cfc:	1dfb      	adds	r3, r7, #7
 8002cfe:	1c02      	adds	r2, r0, #0
 8002d00:	701a      	strb	r2, [r3, #0]
 8002d02:	1dbb      	adds	r3, r7, #6
 8002d04:	1c0a      	adds	r2, r1, #0
 8002d06:	701a      	strb	r2, [r3, #0]
    rfm22ports_burst(RFM22_WRITE_FLAG | (address), length, values);
 8002d08:	1dfb      	adds	r3, r7, #7
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2280      	movs	r2, #128	; 0x80
 8002d0e:	4252      	negs	r2, r2
 8002d10:	4313      	orrs	r3, r2
 8002d12:	b2d8      	uxtb	r0, r3
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	1dbb      	adds	r3, r7, #6
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	0019      	movs	r1, r3
 8002d1c:	f002 fa16 	bl	800514c <_Z16rfm22ports_bursthhPh>
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <_Z16rfm22driver_inith>:

//setup spi i modulu rfm22
void rfm22driver_init(uint8_t long_delay)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	0002      	movs	r2, r0
 8002d30:	1dfb      	adds	r3, r7, #7
 8002d32:	701a      	strb	r2, [r3, #0]
    //uC setup
    rfm22ports_initVccPort();
 8002d34:	f002 f934 	bl	8004fa0 <_Z22rfm22ports_initVccPortv>
    rfm22ports_initSDNPort();
 8002d38:	f002 f942 	bl	8004fc0 <_Z22rfm22ports_initSDNPortv>
    rfm22ports_initIntPort();
 8002d3c:	f002 f8fc 	bl	8004f38 <_Z22rfm22ports_initIntPortv>
    //rfm22ports_activateInt();

    //rfm22 reset
    rfm22driver_reset_on();
 8002d40:	f000 f814 	bl	8002d6c <_Z20rfm22driver_reset_onv>
    rfm22callbacks_delay_ms(32);
 8002d44:	2020      	movs	r0, #32
 8002d46:	f002 f8cf 	bl	8004ee8 <_Z23rfm22callbacks_delay_mst>

    //uC setup
    rfm22ports_initSPI();
 8002d4a:	f002 f983 	bl	8005054 <_Z18rfm22ports_initSPIv>
    rfm22ports_activateInt();
 8002d4e:	f002 f8e9 	bl	8004f24 <_Z22rfm22ports_activateIntv>

    //rfm22 init
    //POR 16ms
    rfm22driver_reset_off();
 8002d52:	f000 f831 	bl	8002db8 <_Z21rfm22driver_reset_offv>
    rfm22callbacks_delay_ms(32);
 8002d56:	2020      	movs	r0, #32
 8002d58:	f002 f8c6 	bl	8004ee8 <_Z23rfm22callbacks_delay_mst>
    rfm22driver_module_setup();
 8002d5c:	f000 f844 	bl	8002de8 <_Z24rfm22driver_module_setupv>

    //frequency & channel init
    rfm22bands_init();
 8002d60:	f7ff fd89 	bl	8002876 <_Z15rfm22bands_initv>
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b002      	add	sp, #8
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <_Z20rfm22driver_reset_onv>:

void rfm22driver_reset_on()
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
    switch(rfm22ports_getResetMethod())
 8002d70:	f002 f96a 	bl	8005048 <_Z25rfm22ports_getResetMethodv>
 8002d74:	0003      	movs	r3, r0
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d004      	beq.n	8002d84 <_Z20rfm22driver_reset_onv+0x18>
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d012      	beq.n	8002da4 <_Z20rfm22driver_reset_onv+0x38>
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d009      	beq.n	8002d96 <_Z20rfm22driver_reset_onv+0x2a>
        case RFM22PORTS_RESET_SOFT:
            rfm22ports_setVcc(0);
            rfm22ports_setSDN(0);
            break;
    }
}
 8002d82:	e016      	b.n	8002db2 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setSDN(0);
 8002d84:	2000      	movs	r0, #0
 8002d86:	f002 f947 	bl	8005018 <_Z17rfm22ports_setSDNh>
            rfm22ports_deinitSPI();
 8002d8a:	f002 f997 	bl	80050bc <_Z20rfm22ports_deinitSPIv>
            rfm22ports_setVcc(1);
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f002 f90b 	bl	8004faa <_Z17rfm22ports_setVcch>
            break;
 8002d94:	e00d      	b.n	8002db2 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setVcc(0);
 8002d96:	2000      	movs	r0, #0
 8002d98:	f002 f907 	bl	8004faa <_Z17rfm22ports_setVcch>
            rfm22ports_setSDN(1);
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	f002 f93b 	bl	8005018 <_Z17rfm22ports_setSDNh>
            break;
 8002da2:	e006      	b.n	8002db2 <_Z20rfm22driver_reset_onv+0x46>
            rfm22ports_setVcc(0);
 8002da4:	2000      	movs	r0, #0
 8002da6:	f002 f900 	bl	8004faa <_Z17rfm22ports_setVcch>
            rfm22ports_setSDN(0);
 8002daa:	2000      	movs	r0, #0
 8002dac:	f002 f934 	bl	8005018 <_Z17rfm22ports_setSDNh>
            break;
 8002db0:	46c0      	nop			; (mov r8, r8)
}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <_Z21rfm22driver_reset_offv>:

void rfm22driver_reset_off()
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
    switch(rfm22ports_getResetMethod())
 8002dbc:	f002 f944 	bl	8005048 <_Z25rfm22ports_getResetMethodv>
 8002dc0:	0003      	movs	r3, r0
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d004      	beq.n	8002dd0 <_Z21rfm22driver_reset_offv+0x18>
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d00a      	beq.n	8002de0 <_Z21rfm22driver_reset_offv+0x28>
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d004      	beq.n	8002dd8 <_Z21rfm22driver_reset_offv+0x20>
            rfm22ports_setSDN(0);
            break;
        case RFM22PORTS_RESET_SOFT:
            break;
    }
}
 8002dce:	e008      	b.n	8002de2 <_Z21rfm22driver_reset_offv+0x2a>
            rfm22ports_setVcc(0);
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f002 f8ea 	bl	8004faa <_Z17rfm22ports_setVcch>
            break;
 8002dd6:	e004      	b.n	8002de2 <_Z21rfm22driver_reset_offv+0x2a>
            rfm22ports_setSDN(0);
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f002 f91d 	bl	8005018 <_Z17rfm22ports_setSDNh>
            break;
 8002dde:	e000      	b.n	8002de2 <_Z21rfm22driver_reset_offv+0x2a>
            break;
 8002de0:	46c0      	nop			; (mov r8, r8)
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <_Z24rfm22driver_module_setupv>:

void rfm22driver_module_setup()
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0b10000000);
 8002dec:	2180      	movs	r1, #128	; 0x80
 8002dee:	2007      	movs	r0, #7
 8002df0:	f7ff ff51 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22callbacks_delay_ms(3);
 8002df4:	2003      	movs	r0, #3
 8002df6:	f002 f877 	bl	8004ee8 <_Z23rfm22callbacks_delay_mst>

    //standby
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0x00);
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2007      	movs	r0, #7
 8002dfe:	f7ff ff4a 	bl	8002c96 <_Z23rfm22driver_trans_writehh>

    rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 8002e02:	2003      	movs	r0, #3
 8002e04:	f7ff ff36 	bl	8002c74 <_Z22rfm22driver_trans_readh>
    rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_2);
 8002e08:	2004      	movs	r0, #4
 8002e0a:	f7ff ff33 	bl	8002c74 <_Z22rfm22driver_trans_readh>

    //interrupt enable
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_1, 0);
 8002e0e:	2100      	movs	r1, #0
 8002e10:	2005      	movs	r0, #5
 8002e12:	f7ff ff40 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_2, 0);
 8002e16:	2100      	movs	r1, #0
 8002e18:	2006      	movs	r0, #6
 8002e1a:	f7ff ff3c 	bl	8002c96 <_Z23rfm22driver_trans_writehh>

    //gpio
    rfm22driver_trans_write(RFM22_ADDR_GPIO_0_CONFIG, 0b11110010);
 8002e1e:	21f2      	movs	r1, #242	; 0xf2
 8002e20:	200b      	movs	r0, #11
 8002e22:	f7ff ff38 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_GPIO_1_CONFIG, 0b11110101);
 8002e26:	21f5      	movs	r1, #245	; 0xf5
 8002e28:	200c      	movs	r0, #12
 8002e2a:	f7ff ff34 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_GPIO_2_CONFIG, 0b00100011);
 8002e2e:	2123      	movs	r1, #35	; 0x23
 8002e30:	200d      	movs	r0, #13
 8002e32:	f7ff ff30 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    //rfm22driver_trans_write(RFM22_ADDR_CLOCK_RECOV_TIMING_LOOP_0, 0x06);
    //rfm22driver_trans_write(RFM22_ADDR_AFC_LIMITER, 0x1E);

    //packet format
    //rfm22driver_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_1, 0x20);
    rfm22driver_trans_write(RFM22_ADDR_DATA_ACCESS_CONTROL, 0x00);
 8002e36:	2100      	movs	r1, #0
 8002e38:	2030      	movs	r0, #48	; 0x30
 8002e3a:	f7ff ff2c 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_HEADER_CONTROL_1, 0x00);
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2032      	movs	r0, #50	; 0x32
 8002e42:	f7ff ff28 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_HEADER_CONTROL_2, 0x02);
 8002e46:	2102      	movs	r1, #2
 8002e48:	2033      	movs	r0, #51	; 0x33
 8002e4a:	f7ff ff24 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_PREAMBLE_LENGTH, 0x0A);
 8002e4e:	210a      	movs	r1, #10
 8002e50:	2034      	movs	r0, #52	; 0x34
 8002e52:	f7ff ff20 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_SYNC_WORD_3, 0x89);
 8002e56:	2189      	movs	r1, #137	; 0x89
 8002e58:	2036      	movs	r0, #54	; 0x36
 8002e5a:	f7ff ff1c 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_SYNC_WORD_2, 0x6B);
 8002e5e:	216b      	movs	r1, #107	; 0x6b
 8002e60:	2037      	movs	r0, #55	; 0x37
 8002e62:	f7ff ff18 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_TRANSMIT_PACKET_LENGTH, 0xFF);
 8002e66:	21ff      	movs	r1, #255	; 0xff
 8002e68:	203e      	movs	r0, #62	; 0x3e
 8002e6a:	f7ff ff14 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    //rfm22driver_trans_write(RFM22_ADDR_TX_POWER, (RFM22_TX_POWER_LNA_SW | RFM22_TX_POWER_14_DBM));
    //rfm22driver_trans_write(RFM22_ADDR_FREQUENCY_DEVIATION, 0x38);
    //rfm22driver_trans_write(RFM22_ADDR_MODULATION_MODE_CONTROL_2, 0x23);

    //rssi
    rfm22driver_trans_write(RFM22_ADDR_RSSI_THRESHOLD, RFM22DRIVER_RSSI_THRESHOLD);
 8002e6e:	2141      	movs	r1, #65	; 0x41
 8002e70:	2027      	movs	r0, #39	; 0x27
 8002e72:	f7ff ff10 	bl	8002c96 <_Z23rfm22driver_trans_writehh>

    //almost-empty, almost-full thresholds
    rfm22driver_trans_write(RFM22_ADDR_TX_FIFO_CONTROL_2, RFM22FRAME_TX_ALMOST_EMPTY_THRESHOLD);
 8002e76:	211f      	movs	r1, #31
 8002e78:	207d      	movs	r0, #125	; 0x7d
 8002e7a:	f7ff ff0c 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_RX_FIFO_CONTROL, RFM22FRAME_RX_ALMOST_FULL_THRESHOLD);
 8002e7e:	2120      	movs	r1, #32
 8002e80:	207e      	movs	r0, #126	; 0x7e
 8002e82:	f7ff ff08 	bl	8002c96 <_Z23rfm22driver_trans_writehh>

    //standby
    //rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0x00);
}
 8002e86:	46c0      	nop			; (mov r8, r8)
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <_Z22rfm22driver_clear_fifov>:
    }
}
#endif

void rfm22driver_clear_fifo()
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	af00      	add	r7, sp, #0
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, RFM22DRIVER_OP2_RX_FIFO_CLEAR | RFM22DRIVER_OP2_TX_FIFO_CLEAR);
 8002e90:	2103      	movs	r1, #3
 8002e92:	2008      	movs	r0, #8
 8002e94:	f7ff feff 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0x00);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	2008      	movs	r0, #8
 8002e9c:	f7ff fefb 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
}
 8002ea0:	46c0      	nop			; (mov r8, r8)
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <_Z28rfm22driver_interrupt_enablehh>:

void rfm22driver_interrupt_enable(uint8_t enable1, uint8_t enable2)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	0002      	movs	r2, r0
 8002eae:	1dfb      	adds	r3, r7, #7
 8002eb0:	701a      	strb	r2, [r3, #0]
 8002eb2:	1dbb      	adds	r3, r7, #6
 8002eb4:	1c0a      	adds	r2, r1, #0
 8002eb6:	701a      	strb	r2, [r3, #0]
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_1, enable1);
 8002eb8:	1dfb      	adds	r3, r7, #7
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	2005      	movs	r0, #5
 8002ec0:	f7ff fee9 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
    rfm22driver_trans_write(RFM22_ADDR_INTERRUPT_ENABLE_2, enable2);
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	0019      	movs	r1, r3
 8002eca:	2006      	movs	r0, #6
 8002ecc:	f7ff fee3 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b002      	add	sp, #8
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_Z15rfm22frame_inithPFtvEt>:

void rfm22frame_isr_tx();
void rfm22frame_isr_rx();

void rfm22frame_init(uint8_t long_delay, uint16_t (*package_size_getter)(), uint16_t package_size_threshold)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6039      	str	r1, [r7, #0]
 8002ee0:	0011      	movs	r1, r2
 8002ee2:	1dfb      	adds	r3, r7, #7
 8002ee4:	1c02      	adds	r2, r0, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	1d3b      	adds	r3, r7, #4
 8002eea:	1c0a      	adds	r2, r1, #0
 8002eec:	801a      	strh	r2, [r3, #0]
    rfm22frame_state = FRS_IDLE;
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <_Z15rfm22frame_inithPFtvEt+0x64>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	701a      	strb	r2, [r3, #0]

    rfm22driver_init(long_delay);    //uC interrupt activated in rfm22driver_init()?
 8002ef4:	1dfb      	adds	r3, r7, #7
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	0018      	movs	r0, r3
 8002efa:	f7ff ff15 	bl	8002d28 <_Z16rfm22driver_inith>

    prot3buff_init(&rfm22frame_tx_buff, rfm22frame_tx_buff_array, dim(rfm22frame_tx_buff_array));
 8002efe:	4910      	ldr	r1, [pc, #64]	; (8002f40 <_Z15rfm22frame_inithPFtvEt+0x68>)
 8002f00:	4b10      	ldr	r3, [pc, #64]	; (8002f44 <_Z15rfm22frame_inithPFtvEt+0x6c>)
 8002f02:	22aa      	movs	r2, #170	; 0xaa
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff fb80 	bl	800260a <_Z14prot3buff_initP11prot3buff_tPht>
    prot3buff_init(&rfm22frame_rx_buff, rfm22frame_rx_buff_array, dim(rfm22frame_rx_buff_array));
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <_Z15rfm22frame_inithPFtvEt+0x70>)
 8002f0c:	4b0f      	ldr	r3, [pc, #60]	; (8002f4c <_Z15rfm22frame_inithPFtvEt+0x74>)
 8002f0e:	22aa      	movs	r2, #170	; 0xaa
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7ff fb7a 	bl	800260a <_Z14prot3buff_initP11prot3buff_tPht>
    rfm22frame_preamble_len = PREAMBLE_LEN_DEFAULT;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	; (8002f50 <_Z15rfm22frame_inithPFtvEt+0x78>)
 8002f18:	2205      	movs	r2, #5
 8002f1a:	801a      	strh	r2, [r3, #0]
    //error flags to be cleared?

    rfm22frame_rx_package_size_getter = package_size_getter;
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	; (8002f54 <_Z15rfm22frame_inithPFtvEt+0x7c>)
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	601a      	str	r2, [r3, #0]
    rfm22frame_rx_package_size_threshold = package_size_threshold;
 8002f22:	4b0d      	ldr	r3, [pc, #52]	; (8002f58 <_Z15rfm22frame_inithPFtvEt+0x80>)
 8002f24:	1d3a      	adds	r2, r7, #4
 8002f26:	8812      	ldrh	r2, [r2, #0]
 8002f28:	801a      	strh	r2, [r3, #0]

    rfm22frame_clear_error_flags();
 8002f2a:	f000 f833 	bl	8002f94 <_Z28rfm22frame_clear_error_flagsv>
    rfm22frame_signal_strength = 0;
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	; (8002f5c <_Z15rfm22frame_inithPFtvEt+0x84>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	200001fc 	.word	0x200001fc
 8002f40:	20000098 	.word	0x20000098
 8002f44:	2000008c 	.word	0x2000008c
 8002f48:	20000150 	.word	0x20000150
 8002f4c:	20000144 	.word	0x20000144
 8002f50:	200001fa 	.word	0x200001fa
 8002f54:	20000204 	.word	0x20000204
 8002f58:	20000208 	.word	0x20000208
 8002f5c:	20000211 	.word	0x20000211

08002f60 <_Z22rfm22frame_get_tx_buffv>:

prot3buff_t *rfm22frame_get_tx_buff()
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
    return &rfm22frame_tx_buff;
 8002f64:	4b01      	ldr	r3, [pc, #4]	; (8002f6c <_Z22rfm22frame_get_tx_buffv+0xc>)
}
 8002f66:	0018      	movs	r0, r3
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000008c 	.word	0x2000008c

08002f70 <_Z22rfm22frame_get_rx_buffv>:

prot3buff_t *rfm22frame_get_rx_buff()
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
    return &rfm22frame_rx_buff;
 8002f74:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <_Z22rfm22frame_get_rx_buffv+0xc>)
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20000144 	.word	0x20000144

08002f80 <_Z20rfm22frame_get_statev>:

rfm22frame_state_t rfm22frame_get_state()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
    return rfm22frame_state;
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <_Z20rfm22frame_get_statev+0x10>)
 8002f86:	781b      	ldrb	r3, [r3, #0]
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	46c0      	nop			; (mov r8, r8)
 8002f90:	200001fc 	.word	0x200001fc

08002f94 <_Z28rfm22frame_clear_error_flagsv>:
{
    return rfm22frame_general_err_blowout;
}

void rfm22frame_clear_error_flags()
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
    rfm22frame_clear_tx_error_flags();
 8002f98:	f000 f80a 	bl	8002fb0 <_Z31rfm22frame_clear_tx_error_flagsv>
    rfm22frame_clear_rx_error_flags();
 8002f9c:	f000 f81c 	bl	8002fd8 <_Z31rfm22frame_clear_rx_error_flagsv>
    rfm22frame_clear_rx_callback_error_flags();
 8002fa0:	f000 f82e 	bl	8003000 <_Z40rfm22frame_clear_rx_callback_error_flagsv>
    rfm22frame_clear_general_error_flags();
 8002fa4:	f000 f836 	bl	8003014 <_Z36rfm22frame_clear_general_error_flagsv>
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <_Z31rfm22frame_clear_tx_error_flagsv>:

void rfm22frame_clear_tx_error_flags()
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
    rfm22frame_tx_err_underflow = 0;
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <_Z31rfm22frame_clear_tx_error_flagsv+0x1c>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]
    rfm22frame_tx_err_no_almost_empty = 0;
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <_Z31rfm22frame_clear_tx_error_flagsv+0x20>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
    rfm22frame_tx_err_channel_occupied = 0;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <_Z31rfm22frame_clear_tx_error_flagsv+0x24>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	701a      	strb	r2, [r3, #0]
}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	200001fe 	.word	0x200001fe
 8002fd0:	200001ff 	.word	0x200001ff
 8002fd4:	20000200 	.word	0x20000200

08002fd8 <_Z31rfm22frame_clear_rx_error_flagsv>:

void rfm22frame_clear_rx_error_flags()
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
    rfm22frame_rx_err_no_sync = 0;
 8002fdc:	4b05      	ldr	r3, [pc, #20]	; (8002ff4 <_Z31rfm22frame_clear_rx_error_flagsv+0x1c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	701a      	strb	r2, [r3, #0]
    rfm22frame_rx_err_overflow = 0;
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <_Z31rfm22frame_clear_rx_error_flagsv+0x20>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
    rfm22frame_rx_err_no_almost_full = 0;
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <_Z31rfm22frame_clear_rx_error_flagsv+0x24>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	701a      	strb	r2, [r3, #0]
}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	2000020c 	.word	0x2000020c
 8002ff8:	2000020d 	.word	0x2000020d
 8002ffc:	2000020e 	.word	0x2000020e

08003000 <_Z40rfm22frame_clear_rx_callback_error_flagsv>:

void rfm22frame_clear_rx_callback_error_flags()
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
    rfm22frame_rx_callback_err_size = 0;
 8003004:	4b02      	ldr	r3, [pc, #8]	; (8003010 <_Z40rfm22frame_clear_rx_callback_error_flagsv+0x10>)
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	2000020f 	.word	0x2000020f

08003014 <_Z36rfm22frame_clear_general_error_flagsv>:

void rfm22frame_clear_general_error_flags()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
    rfm22frame_general_err_blowout = 0;
 8003018:	4b02      	ldr	r3, [pc, #8]	; (8003024 <_Z36rfm22frame_clear_general_error_flagsv+0x10>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	20000210 	.word	0x20000210

08003028 <_Z27rfm22frame_start_rx_waitingh>:
        //uC interrupt already on?
    }
}

void rfm22frame_start_rx_waiting(uint8_t low_duty_cycle_mode)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	0002      	movs	r2, r0
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	701a      	strb	r2, [r3, #0]
    //low_duty_cycle_mode not configured yet

    uint8_t op1, op2;

    if((rfm22frame_state == FRS_IDLE) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) == 0))
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <_Z27rfm22frame_start_rx_waitingh+0xa0>)
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d107      	bne.n	800304c <_Z27rfm22frame_start_rx_waitingh+0x24>
 800303c:	4b23      	ldr	r3, [pc, #140]	; (80030cc <_Z27rfm22frame_start_rx_waitingh+0xa4>)
 800303e:	0018      	movs	r0, r3
 8003040:	f7ff fafb 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8003044:	1e03      	subs	r3, r0, #0
 8003046:	d101      	bne.n	800304c <_Z27rfm22frame_start_rx_waitingh+0x24>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <_Z27rfm22frame_start_rx_waitingh+0x26>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	d035      	beq.n	80030be <_Z27rfm22frame_start_rx_waitingh+0x96>
    {
        rfm22frame_clear_general_error_flags();
 8003052:	f7ff ffdf 	bl	8003014 <_Z36rfm22frame_clear_general_error_flagsv>
        rfm22frame_clear_rx_error_flags();
 8003056:	f7ff ffbf 	bl	8002fd8 <_Z31rfm22frame_clear_rx_error_flagsv>
        rfm22frame_clear_rx_callback_error_flags();
 800305a:	f7ff ffd1 	bl	8003000 <_Z40rfm22frame_clear_rx_callback_error_flagsv>
        //rfm22driver_clear_fifo();
        rfm22frame_rx_package_size = 0;
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <_Z27rfm22frame_start_rx_waitingh+0xa8>)
 8003060:	2200      	movs	r2, #0
 8003062:	801a      	strh	r2, [r3, #0]
        rfm22frame_signal_strength = 0;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <_Z27rfm22frame_start_rx_waitingh+0xac>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
        rfm22driver_interrupt_enable(RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL, RFM22DRIVER_IN2_SYNC_WORD_DET);
 800306a:	2180      	movs	r1, #128	; 0x80
 800306c:	2090      	movs	r0, #144	; 0x90
 800306e:	f7ff ff1a 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
        if(low_duty_cycle_mode)
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d008      	beq.n	800308c <_Z27rfm22frame_start_rx_waitingh+0x64>
        {
            op1 = 0;
 800307a:	230f      	movs	r3, #15
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
            op2 = RFM22DRIVER_OP2_LOW_DUTY_MODE;
 8003082:	230e      	movs	r3, #14
 8003084:	18fb      	adds	r3, r7, r3
 8003086:	2204      	movs	r2, #4
 8003088:	701a      	strb	r2, [r3, #0]
 800308a:	e007      	b.n	800309c <_Z27rfm22frame_start_rx_waitingh+0x74>
        }
        else
        {
            op1 = RFM22DRIVER_OP1_RX_ON;
 800308c:	230f      	movs	r3, #15
 800308e:	18fb      	adds	r3, r7, r3
 8003090:	2204      	movs	r2, #4
 8003092:	701a      	strb	r2, [r3, #0]
            op2 = 0;
 8003094:	230e      	movs	r3, #14
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
        }
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, op1);
 800309c:	230f      	movs	r3, #15
 800309e:	18fb      	adds	r3, r7, r3
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	0019      	movs	r1, r3
 80030a4:	2007      	movs	r0, #7
 80030a6:	f7ff fdf6 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, op2);
 80030aa:	230e      	movs	r3, #14
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	0019      	movs	r1, r3
 80030b2:	2008      	movs	r0, #8
 80030b4:	f7ff fdef 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
        rfm22frame_state = FRS_RX_WAIT;
 80030b8:	4b03      	ldr	r3, [pc, #12]	; (80030c8 <_Z27rfm22frame_start_rx_waitingh+0xa0>)
 80030ba:	2202      	movs	r2, #2
 80030bc:	701a      	strb	r2, [r3, #0]
    }
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b004      	add	sp, #16
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	200001fc 	.word	0x200001fc
 80030cc:	20000144 	.word	0x20000144
 80030d0:	2000020a 	.word	0x2000020a
 80030d4:	20000211 	.word	0x20000211

080030d8 <_Z14rfm22frame_isrv>:
        break;
    }
}

void rfm22frame_isr()
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
    switch(rfm22frame_state)
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <_Z14rfm22frame_isrv+0x34>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d005      	beq.n	80030f0 <_Z14rfm22frame_isrv+0x18>
 80030e4:	dd0d      	ble.n	8003102 <_Z14rfm22frame_isrv+0x2a>
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d005      	beq.n	80030f6 <_Z14rfm22frame_isrv+0x1e>
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d006      	beq.n	80030fc <_Z14rfm22frame_isrv+0x24>
        {
            rfm22frame_isr_rx();
        }
        break;
    }
}
 80030ee:	e009      	b.n	8003104 <_Z14rfm22frame_isrv+0x2c>
            rfm22frame_isr_tx();
 80030f0:	f000 f80e 	bl	8003110 <_Z17rfm22frame_isr_txv>
        break;
 80030f4:	e006      	b.n	8003104 <_Z14rfm22frame_isrv+0x2c>
            rfm22frame_isr_rx();
 80030f6:	f000 f881 	bl	80031fc <_Z17rfm22frame_isr_rxv>
        break;
 80030fa:	e003      	b.n	8003104 <_Z14rfm22frame_isrv+0x2c>
            rfm22frame_isr_rx();
 80030fc:	f000 f87e 	bl	80031fc <_Z17rfm22frame_isr_rxv>
        break;
 8003100:	e000      	b.n	8003104 <_Z14rfm22frame_isrv+0x2c>
        break;
 8003102:	46c0      	nop			; (mov r8, r8)
}
 8003104:	46c0      	nop			; (mov r8, r8)
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	46c0      	nop			; (mov r8, r8)
 800310c:	200001fc 	.word	0x200001fc

08003110 <_Z17rfm22frame_isr_txv>:

void rfm22frame_isr_tx()
{
 8003110:	b590      	push	{r4, r7, lr}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
    uint8_t put_bytes;
    uint8_t en1;
    uint8_t status1;

    if(rfm22frame_tx_last_interrupt)
 8003116:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <_Z17rfm22frame_isr_txv+0xd8>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <_Z17rfm22frame_isr_txv+0x30>
    {
        rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 800311e:	2100      	movs	r1, #0
 8003120:	2007      	movs	r0, #7
 8003122:	f7ff fdb8 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
        rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 8003126:	2100      	movs	r1, #0
 8003128:	2000      	movs	r0, #0
 800312a:	f7ff febc 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
        rfm22driver_clear_fifo();
 800312e:	f7ff fead 	bl	8002e8c <_Z22rfm22driver_clear_fifov>
        rfm22frame_tx_last_interrupt = 0;
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <_Z17rfm22frame_isr_txv+0xd8>)
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
        rfm22frame_state = FRS_IDLE;
 8003138:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <_Z17rfm22frame_isr_txv+0xdc>)
 800313a:	2200      	movs	r2, #0
 800313c:	701a      	strb	r2, [r3, #0]

            //still RFM22_ADDR_OPERATING_1 is RFM22DRIVER_OP1_TX_ON
            //still rfm22frame_state is FRS_TX
        }
    }
}
 800313e:	e04f      	b.n	80031e0 <_Z17rfm22frame_isr_txv+0xd0>
        put_bytes = RFM22FRAME_TX_ALMOST_EMPTY_THRESHOLD;
 8003140:	1dfb      	adds	r3, r7, #7
 8003142:	221f      	movs	r2, #31
 8003144:	701a      	strb	r2, [r3, #0]
        rfm22frame_put_tx_bytes(put_bytes);
 8003146:	1dfb      	adds	r3, r7, #7
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	0018      	movs	r0, r3
 800314c:	f000 f980 	bl	8003450 <_Z23rfm22frame_put_tx_bytesh>
        status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 8003150:	1dbc      	adds	r4, r7, #6
 8003152:	2003      	movs	r0, #3
 8003154:	f7ff fd8e 	bl	8002c74 <_Z22rfm22driver_trans_readh>
 8003158:	0003      	movs	r3, r0
 800315a:	7023      	strb	r3, [r4, #0]
        if(status1 & RFM22DRIVER_IN1_PACKET_SENT)
 800315c:	1dbb      	adds	r3, r7, #6
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	2204      	movs	r2, #4
 8003162:	4013      	ands	r3, r2
 8003164:	d003      	beq.n	800316e <_Z17rfm22frame_isr_txv+0x5e>
            rfm22frame_tx_err_underflow = 1;
 8003166:	4b22      	ldr	r3, [pc, #136]	; (80031f0 <_Z17rfm22frame_isr_txv+0xe0>)
 8003168:	2201      	movs	r2, #1
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e007      	b.n	800317e <_Z17rfm22frame_isr_txv+0x6e>
        else if(!(status1 & RFM22DRIVER_IN1_TX_FIFO_AL_EMPTY))
 800316e:	1dbb      	adds	r3, r7, #6
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2220      	movs	r2, #32
 8003174:	4013      	ands	r3, r2
 8003176:	d102      	bne.n	800317e <_Z17rfm22frame_isr_txv+0x6e>
            rfm22frame_tx_err_no_almost_empty = 1;
 8003178:	4b1e      	ldr	r3, [pc, #120]	; (80031f4 <_Z17rfm22frame_isr_txv+0xe4>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
        if(rfm22frame_tx_err_underflow || rfm22frame_tx_err_no_almost_empty)
 800317e:	4b1c      	ldr	r3, [pc, #112]	; (80031f0 <_Z17rfm22frame_isr_txv+0xe0>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d103      	bne.n	800318e <_Z17rfm22frame_isr_txv+0x7e>
 8003186:	4b1b      	ldr	r3, [pc, #108]	; (80031f4 <_Z17rfm22frame_isr_txv+0xe4>)
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d011      	beq.n	80031b2 <_Z17rfm22frame_isr_txv+0xa2>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 800318e:	2100      	movs	r1, #0
 8003190:	2007      	movs	r0, #7
 8003192:	f7ff fd80 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 8003196:	2100      	movs	r1, #0
 8003198:	2000      	movs	r0, #0
 800319a:	f7ff fe84 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 800319e:	f7ff fe75 	bl	8002e8c <_Z22rfm22driver_clear_fifov>
            rfm22frame_tx_last_interrupt = 0;
 80031a2:	4b11      	ldr	r3, [pc, #68]	; (80031e8 <_Z17rfm22frame_isr_txv+0xd8>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 80031a8:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_Z17rfm22frame_isr_txv+0xdc>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	46c0      	nop			; (mov r8, r8)
}
 80031b0:	e016      	b.n	80031e0 <_Z17rfm22frame_isr_txv+0xd0>
            if(prot3buff_getBytesAvail(&rfm22frame_tx_buff) > 0)
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <_Z17rfm22frame_isr_txv+0xe8>)
 80031b4:	0018      	movs	r0, r3
 80031b6:	f7ff fabb 	bl	8002730 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 80031ba:	0003      	movs	r3, r0
 80031bc:	17da      	asrs	r2, r3, #31
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	0fdb      	lsrs	r3, r3, #31
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <_Z17rfm22frame_isr_txv+0xd0>
                rfm22frame_tx_last_interrupt = 1;
 80031c8:	4b07      	ldr	r3, [pc, #28]	; (80031e8 <_Z17rfm22frame_isr_txv+0xd8>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	701a      	strb	r2, [r3, #0]
                en1 = RFM22DRIVER_IN1_PACKET_SENT;
 80031ce:	1d7b      	adds	r3, r7, #5
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
                rfm22driver_interrupt_enable(en1, 0);
 80031d4:	1d7b      	adds	r3, r7, #5
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2100      	movs	r1, #0
 80031da:	0018      	movs	r0, r3
 80031dc:	f7ff fe63 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b003      	add	sp, #12
 80031e6:	bd90      	pop	{r4, r7, pc}
 80031e8:	200001fd 	.word	0x200001fd
 80031ec:	200001fc 	.word	0x200001fc
 80031f0:	200001fe 	.word	0x200001fe
 80031f4:	200001ff 	.word	0x200001ff
 80031f8:	2000008c 	.word	0x2000008c

080031fc <_Z17rfm22frame_isr_rxv>:

void rfm22frame_isr_rx()
{
 80031fc:	b590      	push	{r4, r7, lr}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
    uint8_t first_interrupt = (rfm22frame_state == FRS_RX_WAIT);
 8003202:	4b88      	ldr	r3, [pc, #544]	; (8003424 <_Z17rfm22frame_isr_rxv+0x228>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	3b02      	subs	r3, #2
 8003208:	425a      	negs	r2, r3
 800320a:	4153      	adcs	r3, r2
 800320c:	b2da      	uxtb	r2, r3
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	701a      	strb	r2, [r3, #0]
    uint8_t status1, status2;
    uint8_t avail_bytes;

    if(first_interrupt)
 8003212:	1dfb      	adds	r3, r7, #7
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d052      	beq.n	80032c0 <_Z17rfm22frame_isr_rxv+0xc4>
    {
        status2 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_2);
 800321a:	1dbc      	adds	r4, r7, #6
 800321c:	2004      	movs	r0, #4
 800321e:	f7ff fd29 	bl	8002c74 <_Z22rfm22driver_trans_readh>
 8003222:	0003      	movs	r3, r0
 8003224:	7023      	strb	r3, [r4, #0]
        if(!(status2 & RFM22DRIVER_IN2_SYNC_WORD_DET))
 8003226:	1dbb      	adds	r3, r7, #6
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	b25b      	sxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	db03      	blt.n	8003238 <_Z17rfm22frame_isr_rxv+0x3c>
        {
            rfm22frame_rx_err_no_sync = 1;
 8003230:	4b7d      	ldr	r3, [pc, #500]	; (8003428 <_Z17rfm22frame_isr_rxv+0x22c>)
 8003232:	2201      	movs	r2, #1
 8003234:	701a      	strb	r2, [r3, #0]
 8003236:	e012      	b.n	800325e <_Z17rfm22frame_isr_rxv+0x62>
        }
        else
        {
            status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 8003238:	1d7c      	adds	r4, r7, #5
 800323a:	2003      	movs	r0, #3
 800323c:	f7ff fd1a 	bl	8002c74 <_Z22rfm22driver_trans_readh>
 8003240:	0003      	movs	r3, r0
 8003242:	7023      	strb	r3, [r4, #0]
            if((status1 & RFM22DRIVER_IN1_FIFO_FLOW) || (status1 & RFM22DRIVER_IN1_RX_FIFO_AL_FULL))
 8003244:	1d7b      	adds	r3, r7, #5
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	b25b      	sxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	db04      	blt.n	8003258 <_Z17rfm22frame_isr_rxv+0x5c>
 800324e:	1d7b      	adds	r3, r7, #5
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2210      	movs	r2, #16
 8003254:	4013      	ands	r3, r2
 8003256:	d002      	beq.n	800325e <_Z17rfm22frame_isr_rxv+0x62>
            {
                rfm22frame_rx_err_overflow = 1;
 8003258:	4b74      	ldr	r3, [pc, #464]	; (800342c <_Z17rfm22frame_isr_rxv+0x230>)
 800325a:	2201      	movs	r2, #1
 800325c:	701a      	strb	r2, [r3, #0]
            }
        }

        if(rfm22frame_rx_err_no_sync || rfm22frame_rx_err_overflow)
 800325e:	4b72      	ldr	r3, [pc, #456]	; (8003428 <_Z17rfm22frame_isr_rxv+0x22c>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d103      	bne.n	800326e <_Z17rfm22frame_isr_rxv+0x72>
 8003266:	4b71      	ldr	r3, [pc, #452]	; (800342c <_Z17rfm22frame_isr_rxv+0x230>)
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d015      	beq.n	800329a <_Z17rfm22frame_isr_rxv+0x9e>
        {
            //low duty mode can trigger rx, its turned off first
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 800326e:	2100      	movs	r1, #0
 8003270:	2008      	movs	r0, #8
 8003272:	f7ff fd10 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 8003276:	2100      	movs	r1, #0
 8003278:	2007      	movs	r0, #7
 800327a:	f7ff fd0c 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 800327e:	2100      	movs	r1, #0
 8003280:	2000      	movs	r0, #0
 8003282:	f7ff fe10 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 8003286:	f7ff fe01 	bl	8002e8c <_Z22rfm22driver_clear_fifov>
            rfm22frame_signal_strength = 0;
 800328a:	4b69      	ldr	r3, [pc, #420]	; (8003430 <_Z17rfm22frame_isr_rxv+0x234>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 8003290:	4b64      	ldr	r3, [pc, #400]	; (8003424 <_Z17rfm22frame_isr_rxv+0x228>)
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	46c0      	nop			; (mov r8, r8)
            //still en1 == (RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL) and en2 == 0
            //still rfm22frame_state == FRS_RX
        }
    }

}
 8003298:	e0bf      	b.n	800341a <_Z17rfm22frame_isr_rxv+0x21e>
            rfm22frame_signal_strength = rfm22driver_trans_read(RFM22_ADDR_RSSI);
 800329a:	2026      	movs	r0, #38	; 0x26
 800329c:	f7ff fcea 	bl	8002c74 <_Z22rfm22driver_trans_readh>
 80032a0:	0003      	movs	r3, r0
 80032a2:	001a      	movs	r2, r3
 80032a4:	4b62      	ldr	r3, [pc, #392]	; (8003430 <_Z17rfm22frame_isr_rxv+0x234>)
 80032a6:	701a      	strb	r2, [r3, #0]
            rfm22driver_interrupt_enable(RFM22DRIVER_IN1_FIFO_FLOW | RFM22DRIVER_IN1_RX_FIFO_AL_FULL, 0);
 80032a8:	2100      	movs	r1, #0
 80032aa:	2090      	movs	r0, #144	; 0x90
 80032ac:	f7ff fdfb 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
            rfm22frame_state = FRS_RX;
 80032b0:	4b5c      	ldr	r3, [pc, #368]	; (8003424 <_Z17rfm22frame_isr_rxv+0x228>)
 80032b2:	2203      	movs	r2, #3
 80032b4:	701a      	strb	r2, [r3, #0]
            wtp3drivercalls_setTimer(1, BLOW_OUT_TIMEOUT);
 80032b6:	2164      	movs	r1, #100	; 0x64
 80032b8:	2001      	movs	r0, #1
 80032ba:	f001 ff9b 	bl	80051f4 <_Z24wtp3drivercalls_setTimerhm>
}
 80032be:	e0ac      	b.n	800341a <_Z17rfm22frame_isr_rxv+0x21e>
        avail_bytes = RFM22FRAME_RX_ALMOST_FULL_THRESHOLD;
 80032c0:	1d3b      	adds	r3, r7, #4
 80032c2:	2220      	movs	r2, #32
 80032c4:	701a      	strb	r2, [r3, #0]
        rfm22frame_get_rx_bytes(avail_bytes);
 80032c6:	1d3b      	adds	r3, r7, #4
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 f91e 	bl	800350c <_Z23rfm22frame_get_rx_bytesh>
        if(rfm22frame_rx_package_size == 0)
 80032d0:	4b58      	ldr	r3, [pc, #352]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d132      	bne.n	800333e <_Z17rfm22frame_isr_rxv+0x142>
            if(prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size_threshold)
 80032d8:	4b57      	ldr	r3, [pc, #348]	; (8003438 <_Z17rfm22frame_isr_rxv+0x23c>)
 80032da:	0018      	movs	r0, r3
 80032dc:	f7ff f9ad 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80032e0:	0003      	movs	r3, r0
 80032e2:	001a      	movs	r2, r3
 80032e4:	4b55      	ldr	r3, [pc, #340]	; (800343c <_Z17rfm22frame_isr_rxv+0x240>)
 80032e6:	881b      	ldrh	r3, [r3, #0]
 80032e8:	17d0      	asrs	r0, r2, #31
 80032ea:	0fd9      	lsrs	r1, r3, #31
 80032ec:	429a      	cmp	r2, r3
 80032ee:	4148      	adcs	r0, r1
 80032f0:	0003      	movs	r3, r0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d022      	beq.n	800333e <_Z17rfm22frame_isr_rxv+0x142>
                rfm22frame_rx_package_size = rfm22frame_rx_package_size_getter();
 80032f8:	4b51      	ldr	r3, [pc, #324]	; (8003440 <_Z17rfm22frame_isr_rxv+0x244>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4798      	blx	r3
 80032fe:	0003      	movs	r3, r0
 8003300:	001a      	movs	r2, r3
 8003302:	4b4c      	ldr	r3, [pc, #304]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 8003304:	801a      	strh	r2, [r3, #0]
                if(rfm22frame_rx_package_size != 0xFFFF)
 8003306:	4b4b      	ldr	r3, [pc, #300]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	4a4e      	ldr	r2, [pc, #312]	; (8003444 <_Z17rfm22frame_isr_rxv+0x248>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d016      	beq.n	800333e <_Z17rfm22frame_isr_rxv+0x142>
                    if(prot3buff_getWriterPos(&rfm22frame_rx_buff) > rfm22frame_rx_package_size)
 8003310:	4b49      	ldr	r3, [pc, #292]	; (8003438 <_Z17rfm22frame_isr_rxv+0x23c>)
 8003312:	0018      	movs	r0, r3
 8003314:	f7ff f991 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 8003318:	0003      	movs	r3, r0
 800331a:	001a      	movs	r2, r3
 800331c:	4b45      	ldr	r3, [pc, #276]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 800331e:	881b      	ldrh	r3, [r3, #0]
 8003320:	2101      	movs	r1, #1
 8003322:	429a      	cmp	r2, r3
 8003324:	dc01      	bgt.n	800332a <_Z17rfm22frame_isr_rxv+0x12e>
 8003326:	2300      	movs	r3, #0
 8003328:	1c19      	adds	r1, r3, #0
 800332a:	b2cb      	uxtb	r3, r1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d006      	beq.n	800333e <_Z17rfm22frame_isr_rxv+0x142>
                        prot3buff_setWriterToPos(&rfm22frame_rx_buff, rfm22frame_rx_package_size);
 8003330:	4b40      	ldr	r3, [pc, #256]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	4b40      	ldr	r3, [pc, #256]	; (8003438 <_Z17rfm22frame_isr_rxv+0x23c>)
 8003336:	0011      	movs	r1, r2
 8003338:	0018      	movs	r0, r3
 800333a:	f7ff f988 	bl	800264e <_Z24prot3buff_setWriterToPosP11prot3buff_tt>
        status1 = rfm22driver_trans_read(RFM22_ADDR_INTERRUPT_STATUS_1);
 800333e:	1d7c      	adds	r4, r7, #5
 8003340:	2003      	movs	r0, #3
 8003342:	f7ff fc97 	bl	8002c74 <_Z22rfm22driver_trans_readh>
 8003346:	0003      	movs	r3, r0
 8003348:	7023      	strb	r3, [r4, #0]
        if(status1 & RFM22DRIVER_IN1_FIFO_FLOW)
 800334a:	1d7b      	adds	r3, r7, #5
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	b25b      	sxtb	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	da03      	bge.n	800335c <_Z17rfm22frame_isr_rxv+0x160>
            rfm22frame_rx_err_overflow = 1;
 8003354:	4b35      	ldr	r3, [pc, #212]	; (800342c <_Z17rfm22frame_isr_rxv+0x230>)
 8003356:	2201      	movs	r2, #1
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e018      	b.n	800338e <_Z17rfm22frame_isr_rxv+0x192>
        else if(!(status1 & RFM22DRIVER_IN1_RX_FIFO_AL_FULL))
 800335c:	1d7b      	adds	r3, r7, #5
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2210      	movs	r2, #16
 8003362:	4013      	ands	r3, r2
 8003364:	d103      	bne.n	800336e <_Z17rfm22frame_isr_rxv+0x172>
            rfm22frame_rx_err_no_almost_full = 1;
 8003366:	4b38      	ldr	r3, [pc, #224]	; (8003448 <_Z17rfm22frame_isr_rxv+0x24c>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
 800336c:	e00f      	b.n	800338e <_Z17rfm22frame_isr_rxv+0x192>
        else if(rfm22frame_rx_package_size == 0xFFFF)
 800336e:	4b31      	ldr	r3, [pc, #196]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 8003370:	881b      	ldrh	r3, [r3, #0]
 8003372:	4a34      	ldr	r2, [pc, #208]	; (8003444 <_Z17rfm22frame_isr_rxv+0x248>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d103      	bne.n	8003380 <_Z17rfm22frame_isr_rxv+0x184>
            rfm22frame_rx_callback_err_size = 1;
 8003378:	4b34      	ldr	r3, [pc, #208]	; (800344c <_Z17rfm22frame_isr_rxv+0x250>)
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e006      	b.n	800338e <_Z17rfm22frame_isr_rxv+0x192>
        else if(rfm22frame_rx_package_size > BUFF_LEN)
 8003380:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	2baa      	cmp	r3, #170	; 0xaa
 8003386:	dd02      	ble.n	800338e <_Z17rfm22frame_isr_rxv+0x192>
            rfm22frame_rx_callback_err_size = 1;
 8003388:	4b30      	ldr	r3, [pc, #192]	; (800344c <_Z17rfm22frame_isr_rxv+0x250>)
 800338a:	2201      	movs	r2, #1
 800338c:	701a      	strb	r2, [r3, #0]
        rx_error = (rfm22frame_rx_err_overflow || rfm22frame_rx_err_no_almost_full || rfm22frame_rx_callback_err_size);
 800338e:	4b27      	ldr	r3, [pc, #156]	; (800342c <_Z17rfm22frame_isr_rxv+0x230>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d107      	bne.n	80033a6 <_Z17rfm22frame_isr_rxv+0x1aa>
 8003396:	4b2c      	ldr	r3, [pc, #176]	; (8003448 <_Z17rfm22frame_isr_rxv+0x24c>)
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d103      	bne.n	80033a6 <_Z17rfm22frame_isr_rxv+0x1aa>
 800339e:	4b2b      	ldr	r3, [pc, #172]	; (800344c <_Z17rfm22frame_isr_rxv+0x250>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <_Z17rfm22frame_isr_rxv+0x1ae>
 80033a6:	2201      	movs	r2, #1
 80033a8:	e000      	b.n	80033ac <_Z17rfm22frame_isr_rxv+0x1b0>
 80033aa:	2200      	movs	r2, #0
 80033ac:	1cfb      	adds	r3, r7, #3
 80033ae:	701a      	strb	r2, [r3, #0]
        if(rx_error)
 80033b0:	1cfb      	adds	r3, r7, #3
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d002      	beq.n	80033be <_Z17rfm22frame_isr_rxv+0x1c2>
            rfm22frame_signal_strength = 0;
 80033b8:	4b1d      	ldr	r3, [pc, #116]	; (8003430 <_Z17rfm22frame_isr_rxv+0x234>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	701a      	strb	r2, [r3, #0]
                || (prot3buff_getCapacityAvail(&rfm22frame_rx_buff) == 0))
 80033be:	1cfb      	adds	r3, r7, #3
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d113      	bne.n	80033ee <_Z17rfm22frame_isr_rxv+0x1f2>
        if(rx_error || ((rfm22frame_rx_package_size > 0) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size))
 80033c6:	4b1b      	ldr	r3, [pc, #108]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 80033c8:	881b      	ldrh	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dd09      	ble.n	80033e2 <_Z17rfm22frame_isr_rxv+0x1e6>
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <_Z17rfm22frame_isr_rxv+0x23c>)
 80033d0:	0018      	movs	r0, r3
 80033d2:	f7ff f932 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 80033d6:	0003      	movs	r3, r0
 80033d8:	001a      	movs	r2, r3
 80033da:	4b16      	ldr	r3, [pc, #88]	; (8003434 <_Z17rfm22frame_isr_rxv+0x238>)
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	da05      	bge.n	80033ee <_Z17rfm22frame_isr_rxv+0x1f2>
                || (prot3buff_getCapacityAvail(&rfm22frame_rx_buff) == 0))
 80033e2:	4b15      	ldr	r3, [pc, #84]	; (8003438 <_Z17rfm22frame_isr_rxv+0x23c>)
 80033e4:	0018      	movs	r0, r3
 80033e6:	f7ff f95c 	bl	80026a2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>
 80033ea:	1e03      	subs	r3, r0, #0
 80033ec:	d101      	bne.n	80033f2 <_Z17rfm22frame_isr_rxv+0x1f6>
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <_Z17rfm22frame_isr_rxv+0x1f8>
 80033f2:	2300      	movs	r3, #0
        if(rx_error || ((rfm22frame_rx_package_size > 0) && (prot3buff_getWriterPos(&rfm22frame_rx_buff) >= rfm22frame_rx_package_size))
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d010      	beq.n	800341a <_Z17rfm22frame_isr_rxv+0x21e>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_2, 0);
 80033f8:	2100      	movs	r1, #0
 80033fa:	2008      	movs	r0, #8
 80033fc:	f7ff fc4b 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
            rfm22driver_trans_write(RFM22_ADDR_OPERATING_1, 0);
 8003400:	2100      	movs	r1, #0
 8003402:	2007      	movs	r0, #7
 8003404:	f7ff fc47 	bl	8002c96 <_Z23rfm22driver_trans_writehh>
            rfm22driver_interrupt_enable(0, 0);                           //clears int pin
 8003408:	2100      	movs	r1, #0
 800340a:	2000      	movs	r0, #0
 800340c:	f7ff fd4b 	bl	8002ea6 <_Z28rfm22driver_interrupt_enablehh>
            rfm22driver_clear_fifo();
 8003410:	f7ff fd3c 	bl	8002e8c <_Z22rfm22driver_clear_fifov>
            rfm22frame_state = FRS_IDLE;                                  //accidentally triggered interrupt allowed
 8003414:	4b03      	ldr	r3, [pc, #12]	; (8003424 <_Z17rfm22frame_isr_rxv+0x228>)
 8003416:	2200      	movs	r2, #0
 8003418:	701a      	strb	r2, [r3, #0]
}
 800341a:	46c0      	nop			; (mov r8, r8)
 800341c:	46bd      	mov	sp, r7
 800341e:	b003      	add	sp, #12
 8003420:	bd90      	pop	{r4, r7, pc}
 8003422:	46c0      	nop			; (mov r8, r8)
 8003424:	200001fc 	.word	0x200001fc
 8003428:	2000020c 	.word	0x2000020c
 800342c:	2000020d 	.word	0x2000020d
 8003430:	20000211 	.word	0x20000211
 8003434:	2000020a 	.word	0x2000020a
 8003438:	20000144 	.word	0x20000144
 800343c:	20000208 	.word	0x20000208
 8003440:	20000204 	.word	0x20000204
 8003444:	0000ffff 	.word	0x0000ffff
 8003448:	2000020e 	.word	0x2000020e
 800344c:	2000020f 	.word	0x2000020f

08003450 <_Z23rfm22frame_put_tx_bytesh>:
    //arr[1] = 0x6C;      //bledne
    rfm22driver_burst_write(RFM22_ADDR_FIFO_ACCESS, 2, arr);
}

void rfm22frame_put_tx_bytes(uint8_t bytes_in_fifo)
{
 8003450:	b590      	push	{r4, r7, lr}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	0002      	movs	r2, r0
 8003458:	1dfb      	adds	r3, r7, #7
 800345a:	701a      	strb	r2, [r3, #0]
    uint8_t arr[10];
    uint8_t portion;
    uint8_t fifo_free_spots = (bytes_in_fifo < FIFO_TX_MAX_LOAD) ? (FIFO_TX_MAX_LOAD - bytes_in_fifo) : 0;
 800345c:	1dfb      	adds	r3, r7, #7
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b3d      	cmp	r3, #61	; 0x3d
 8003462:	dc05      	bgt.n	8003470 <_Z23rfm22frame_put_tx_bytesh+0x20>
 8003464:	1dfb      	adds	r3, r7, #7
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	223e      	movs	r2, #62	; 0x3e
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	b2da      	uxtb	r2, r3
 800346e:	e000      	b.n	8003472 <_Z23rfm22frame_put_tx_bytesh+0x22>
 8003470:	2200      	movs	r2, #0
 8003472:	2316      	movs	r3, #22
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	701a      	strb	r2, [r3, #0]
    uint8_t bytes_to_put = (fifo_free_spots < prot3buff_getBytesAvail(&rfm22frame_tx_buff)) ?
 8003478:	2316      	movs	r3, #22
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	781c      	ldrb	r4, [r3, #0]
 800347e:	4b22      	ldr	r3, [pc, #136]	; (8003508 <_Z23rfm22frame_put_tx_bytesh+0xb8>)
 8003480:	0018      	movs	r0, r3
 8003482:	f7ff f955 	bl	8002730 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 8003486:	0003      	movs	r3, r0
            fifo_free_spots : prot3buff_getBytesAvail(&rfm22frame_tx_buff);
 8003488:	429c      	cmp	r4, r3
 800348a:	db06      	blt.n	800349a <_Z23rfm22frame_put_tx_bytesh+0x4a>
 800348c:	4b1e      	ldr	r3, [pc, #120]	; (8003508 <_Z23rfm22frame_put_tx_bytesh+0xb8>)
 800348e:	0018      	movs	r0, r3
 8003490:	f7ff f94e 	bl	8002730 <_Z23prot3buff_getBytesAvailP11prot3buff_t>
 8003494:	0003      	movs	r3, r0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	e002      	b.n	80034a0 <_Z23rfm22frame_put_tx_bytesh+0x50>
 800349a:	2316      	movs	r3, #22
 800349c:	18fb      	adds	r3, r7, r3
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2217      	movs	r2, #23
 80034a2:	18ba      	adds	r2, r7, r2
 80034a4:	7013      	strb	r3, [r2, #0]

    while(bytes_to_put > 0)
 80034a6:	2317      	movs	r3, #23
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	dd27      	ble.n	8003500 <_Z23rfm22frame_put_tx_bytesh+0xb0>
    {
        portion = (bytes_to_put > 10) ? 10 : bytes_to_put;
 80034b0:	2315      	movs	r3, #21
 80034b2:	18fa      	adds	r2, r7, r3
 80034b4:	2317      	movs	r3, #23
 80034b6:	18fb      	adds	r3, r7, r3
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	b2d9      	uxtb	r1, r3
 80034bc:	290a      	cmp	r1, #10
 80034be:	d900      	bls.n	80034c2 <_Z23rfm22frame_put_tx_bytesh+0x72>
 80034c0:	230a      	movs	r3, #10
 80034c2:	7013      	strb	r3, [r2, #0]
        prot3buff_readBytes(&rfm22frame_tx_buff, arr, portion);
 80034c4:	2315      	movs	r3, #21
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	b29a      	uxth	r2, r3
 80034cc:	2308      	movs	r3, #8
 80034ce:	18f9      	adds	r1, r7, r3
 80034d0:	4b0d      	ldr	r3, [pc, #52]	; (8003508 <_Z23rfm22frame_put_tx_bytesh+0xb8>)
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff f93a 	bl	800274c <_Z19prot3buff_readBytesP11prot3buff_tPht>
        rfm22driver_burst_write(RFM22_ADDR_FIFO_ACCESS, portion, arr);
 80034d8:	2308      	movs	r3, #8
 80034da:	18fa      	adds	r2, r7, r3
 80034dc:	2315      	movs	r3, #21
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	0019      	movs	r1, r3
 80034e4:	207f      	movs	r0, #127	; 0x7f
 80034e6:	f7ff fc05 	bl	8002cf4 <_Z23rfm22driver_burst_writehhPh>
        bytes_to_put -= portion;
 80034ea:	2317      	movs	r3, #23
 80034ec:	18fb      	adds	r3, r7, r3
 80034ee:	2217      	movs	r2, #23
 80034f0:	18b9      	adds	r1, r7, r2
 80034f2:	2215      	movs	r2, #21
 80034f4:	18ba      	adds	r2, r7, r2
 80034f6:	7809      	ldrb	r1, [r1, #0]
 80034f8:	7812      	ldrb	r2, [r2, #0]
 80034fa:	1a8a      	subs	r2, r1, r2
 80034fc:	701a      	strb	r2, [r3, #0]
    while(bytes_to_put > 0)
 80034fe:	e7d2      	b.n	80034a6 <_Z23rfm22frame_put_tx_bytesh+0x56>
    }
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b007      	add	sp, #28
 8003506:	bd90      	pop	{r4, r7, pc}
 8003508:	2000008c 	.word	0x2000008c

0800350c <_Z23rfm22frame_get_rx_bytesh>:

void rfm22frame_get_rx_bytes(uint8_t bytes_in_fifo)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	0002      	movs	r2, r0
 8003514:	1dfb      	adds	r3, r7, #7
 8003516:	701a      	strb	r2, [r3, #0]
    uint8_t arr[10];
    uint8_t portion;
    uint16_t buffer_free_spots = prot3buff_getCapacityAvail(&rfm22frame_rx_buff);
 8003518:	231a      	movs	r3, #26
 800351a:	18fc      	adds	r4, r7, r3
 800351c:	4b3c      	ldr	r3, [pc, #240]	; (8003610 <_Z23rfm22frame_get_rx_bytesh+0x104>)
 800351e:	0018      	movs	r0, r3
 8003520:	f7ff f8bf 	bl	80026a2 <_Z26prot3buff_getCapacityAvailP11prot3buff_t>
 8003524:	0003      	movs	r3, r0
 8003526:	8023      	strh	r3, [r4, #0]
    uint16_t remaining_package_bytes;
    uint8_t bytes_to_put;

    if(rfm22frame_rx_package_size > 0)
 8003528:	4b3a      	ldr	r3, [pc, #232]	; (8003614 <_Z23rfm22frame_get_rx_bytesh+0x108>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	dd21      	ble.n	8003574 <_Z23rfm22frame_get_rx_bytesh+0x68>
    {
        if(rfm22frame_rx_package_size >= prot3buff_getWriterPos(&rfm22frame_rx_buff))
 8003530:	4b38      	ldr	r3, [pc, #224]	; (8003614 <_Z23rfm22frame_get_rx_bytesh+0x108>)
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	001c      	movs	r4, r3
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <_Z23rfm22frame_get_rx_bytesh+0x104>)
 8003538:	0018      	movs	r0, r3
 800353a:	f7ff f87e 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 800353e:	0003      	movs	r3, r0
 8003540:	17e1      	asrs	r1, r4, #31
 8003542:	0fda      	lsrs	r2, r3, #31
 8003544:	429c      	cmp	r4, r3
 8003546:	4151      	adcs	r1, r2
 8003548:	000b      	movs	r3, r1
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00c      	beq.n	800356a <_Z23rfm22frame_get_rx_bytesh+0x5e>
        {
            remaining_package_bytes = rfm22frame_rx_package_size - prot3buff_getWriterPos(&rfm22frame_rx_buff);
 8003550:	4b30      	ldr	r3, [pc, #192]	; (8003614 <_Z23rfm22frame_get_rx_bytesh+0x108>)
 8003552:	881c      	ldrh	r4, [r3, #0]
 8003554:	4b2e      	ldr	r3, [pc, #184]	; (8003610 <_Z23rfm22frame_get_rx_bytesh+0x104>)
 8003556:	0018      	movs	r0, r3
 8003558:	f7ff f86f 	bl	800263a <_Z22prot3buff_getWriterPosP11prot3buff_t>
 800355c:	0003      	movs	r3, r0
 800355e:	001a      	movs	r2, r3
 8003560:	231e      	movs	r3, #30
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	1aa2      	subs	r2, r4, r2
 8003566:	801a      	strh	r2, [r3, #0]
 8003568:	e009      	b.n	800357e <_Z23rfm22frame_get_rx_bytesh+0x72>
        }
        else
        {
            remaining_package_bytes = 0;
 800356a:	231e      	movs	r3, #30
 800356c:	18fb      	adds	r3, r7, r3
 800356e:	2200      	movs	r2, #0
 8003570:	801a      	strh	r2, [r3, #0]
 8003572:	e004      	b.n	800357e <_Z23rfm22frame_get_rx_bytesh+0x72>
        }
    }
    else
    {
        remaining_package_bytes = 0xFFFF;
 8003574:	231e      	movs	r3, #30
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2201      	movs	r2, #1
 800357a:	4252      	negs	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]
    }

    //portion := temporary var for min(bytes_in_fifo, buffer_free_spots)
    portion = (bytes_in_fifo < buffer_free_spots) ? bytes_in_fifo : buffer_free_spots;
 800357e:	231a      	movs	r3, #26
 8003580:	18fb      	adds	r3, r7, r3
 8003582:	881a      	ldrh	r2, [r3, #0]
 8003584:	1dfb      	adds	r3, r7, #7
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	429a      	cmp	r2, r3
 800358a:	dd00      	ble.n	800358e <_Z23rfm22frame_get_rx_bytesh+0x82>
 800358c:	001a      	movs	r2, r3
 800358e:	2319      	movs	r3, #25
 8003590:	18fb      	adds	r3, r7, r3
 8003592:	701a      	strb	r2, [r3, #0]
    bytes_to_put = (portion < remaining_package_bytes) ? portion : remaining_package_bytes;
 8003594:	231e      	movs	r3, #30
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	2319      	movs	r3, #25
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	dd00      	ble.n	80035a6 <_Z23rfm22frame_get_rx_bytesh+0x9a>
 80035a4:	001a      	movs	r2, r3
 80035a6:	231d      	movs	r3, #29
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	701a      	strb	r2, [r3, #0]

    while(bytes_to_put > 0)
 80035ac:	231d      	movs	r3, #29
 80035ae:	18fb      	adds	r3, r7, r3
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	dd27      	ble.n	8003606 <_Z23rfm22frame_get_rx_bytesh+0xfa>
    {
        portion = (bytes_to_put > 10) ? 10 : bytes_to_put;
 80035b6:	2319      	movs	r3, #25
 80035b8:	18fa      	adds	r2, r7, r3
 80035ba:	231d      	movs	r3, #29
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	b2d9      	uxtb	r1, r3
 80035c2:	290a      	cmp	r1, #10
 80035c4:	d900      	bls.n	80035c8 <_Z23rfm22frame_get_rx_bytesh+0xbc>
 80035c6:	230a      	movs	r3, #10
 80035c8:	7013      	strb	r3, [r2, #0]
        rfm22driver_burst_read(RFM22_ADDR_FIFO_ACCESS, portion, arr);
 80035ca:	230c      	movs	r3, #12
 80035cc:	18fa      	adds	r2, r7, r3
 80035ce:	2319      	movs	r3, #25
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	0019      	movs	r1, r3
 80035d6:	207f      	movs	r0, #127	; 0x7f
 80035d8:	f7ff fb76 	bl	8002cc8 <_Z22rfm22driver_burst_readhhPh>
        prot3buff_putBytes(&rfm22frame_rx_buff, arr, portion);
 80035dc:	2319      	movs	r3, #25
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	230c      	movs	r3, #12
 80035e6:	18f9      	adds	r1, r7, r3
 80035e8:	4b09      	ldr	r3, [pc, #36]	; (8003610 <_Z23rfm22frame_get_rx_bytesh+0x104>)
 80035ea:	0018      	movs	r0, r3
 80035ec:	f7ff f867 	bl	80026be <_Z18prot3buff_putBytesP11prot3buff_tPht>
        bytes_to_put -= portion;
 80035f0:	231d      	movs	r3, #29
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	221d      	movs	r2, #29
 80035f6:	18b9      	adds	r1, r7, r2
 80035f8:	2219      	movs	r2, #25
 80035fa:	18ba      	adds	r2, r7, r2
 80035fc:	7809      	ldrb	r1, [r1, #0]
 80035fe:	7812      	ldrb	r2, [r2, #0]
 8003600:	1a8a      	subs	r2, r1, r2
 8003602:	701a      	strb	r2, [r3, #0]
    while(bytes_to_put > 0)
 8003604:	e7d2      	b.n	80035ac <_Z23rfm22frame_get_rx_bytesh+0xa0>
    }
}
 8003606:	46c0      	nop			; (mov r8, r8)
 8003608:	46bd      	mov	sp, r7
 800360a:	b009      	add	sp, #36	; 0x24
 800360c:	bd90      	pop	{r4, r7, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	20000144 	.word	0x20000144
 8003614:	2000020a 	.word	0x2000020a

08003618 <_Z24scrambler_get_init_valuev>:
#include "scrambler.h"


uint8_t scrambler_get_init_value()
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
    return 0x7F;
 800361c:	237f      	movs	r3, #127	; 0x7f
}
 800361e:	0018      	movs	r0, r3
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <_Z21scrambler_reset_stateP11scrambler_t>:

void scrambler_reset_state(scrambler_t *ob)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
    ob->state = scrambler_get_init_value();
 800362c:	f7ff fff4 	bl	8003618 <_Z24scrambler_get_init_valuev>
 8003630:	0003      	movs	r3, r0
 8003632:	001a      	movs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	701a      	strb	r2, [r3, #0]
}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	b002      	add	sp, #8
 800363e:	bd80      	pop	{r7, pc}

08003640 <_Z18descrambler_updateP11scrambler_th>:
    }
    return byte;
}

uint8_t descrambler_update(scrambler_t *ob, uint8_t byte)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
 8003648:	000a      	movs	r2, r1
 800364a:	1cfb      	adds	r3, r7, #3
 800364c:	701a      	strb	r2, [r3, #0]
    //right-shifting

    uint8_t mask;
    uint8_t i;

    for(i = 0; i < 8; i++)
 800364e:	230f      	movs	r3, #15
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2200      	movs	r2, #0
 8003654:	701a      	strb	r2, [r3, #0]
 8003656:	230f      	movs	r3, #15
 8003658:	18fb      	adds	r3, r7, r3
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b07      	cmp	r3, #7
 800365e:	dc40      	bgt.n	80036e2 <_Z18descrambler_updateP11scrambler_th+0xa2>
    {
        mask = -((ob->state ^ (ob->state >> 3) ^ byte) & 0x01);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b25a      	sxtb	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	10db      	asrs	r3, r3, #3
 800366c:	b25b      	sxtb	r3, r3
 800366e:	4053      	eors	r3, r2
 8003670:	b25a      	sxtb	r2, r3
 8003672:	1cfb      	adds	r3, r7, #3
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b25b      	sxtb	r3, r3
 8003678:	4053      	eors	r3, r2
 800367a:	b25b      	sxtb	r3, r3
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	b2da      	uxtb	r2, r3
 8003684:	230e      	movs	r3, #14
 8003686:	18fb      	adds	r3, r7, r3
 8003688:	4252      	negs	r2, r2
 800368a:	701a      	strb	r2, [r3, #0]
        ob->state = (ob->state >> 1) | (-(byte & 0x01) & 0x40);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	105b      	asrs	r3, r3, #1
 8003692:	b25a      	sxtb	r2, r3
 8003694:	1cfb      	adds	r3, r7, #3
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	400b      	ands	r3, r1
 800369c:	b2db      	uxtb	r3, r3
 800369e:	425b      	negs	r3, r3
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	b25b      	sxtb	r3, r3
 80036a4:	2140      	movs	r1, #64	; 0x40
 80036a6:	400b      	ands	r3, r1
 80036a8:	b25b      	sxtb	r3, r3
 80036aa:	4313      	orrs	r3, r2
 80036ac:	b25b      	sxtb	r3, r3
 80036ae:	b2da      	uxtb	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	701a      	strb	r2, [r3, #0]
        byte = (byte >> 1) | (mask & 0x80);
 80036b4:	1cfb      	adds	r3, r7, #3
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	105b      	asrs	r3, r3, #1
 80036ba:	b25a      	sxtb	r2, r3
 80036bc:	230e      	movs	r3, #14
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	781b      	ldrb	r3, [r3, #0]
 80036c2:	b25b      	sxtb	r3, r3
 80036c4:	217f      	movs	r1, #127	; 0x7f
 80036c6:	438b      	bics	r3, r1
 80036c8:	b25b      	sxtb	r3, r3
 80036ca:	4313      	orrs	r3, r2
 80036cc:	b25a      	sxtb	r2, r3
 80036ce:	1cfb      	adds	r3, r7, #3
 80036d0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < 8; i++)
 80036d2:	230f      	movs	r3, #15
 80036d4:	18fb      	adds	r3, r7, r3
 80036d6:	781a      	ldrb	r2, [r3, #0]
 80036d8:	230f      	movs	r3, #15
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	3201      	adds	r2, #1
 80036de:	701a      	strb	r2, [r3, #0]
 80036e0:	e7b9      	b.n	8003656 <_Z18descrambler_updateP11scrambler_th+0x16>
    }
    return byte;
 80036e2:	1cfb      	adds	r3, r7, #3
 80036e4:	781b      	ldrb	r3, [r3, #0]
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <_ZN10Wtp3DriverC1Ev>:
#include "crc32_basic.h"
#include "wtp3drivercalls.h"

Wtp3Driver *Wtp3Driver::singleton = NULL;

Wtp3Driver::Wtp3Driver()
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
{
    if(singleton == NULL)
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <_ZN10Wtp3DriverC1Ev+0x20>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <_ZN10Wtp3DriverC1Ev+0x16>
    {
        singleton = this;
 8003700:	4b03      	ldr	r3, [pc, #12]	; (8003710 <_ZN10Wtp3DriverC1Ev+0x20>)
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	601a      	str	r2, [r3, #0]
    }
}
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000214 	.word	0x20000214

08003714 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh>:
    return result;
}

void Wtp3Driver::init(IWtp3Device *devicesArr[], uint16_t devicesArrSize, uint32_t ownAddress,
        uint16_t ownDevice, EReceiveMode receiveMode, uint8_t receivedCmdSizeMax)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	1dbb      	adds	r3, r7, #6
 8003722:	801a      	strh	r2, [r3, #0]
    uint16_t i;

    rfm22frame_init(1, sizeHeaderFirstCheck, SIZE_HEADER_SIZE);
 8003724:	4b3b      	ldr	r3, [pc, #236]	; (8003814 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0x100>)
 8003726:	2204      	movs	r2, #4
 8003728:	0019      	movs	r1, r3
 800372a:	2001      	movs	r0, #1
 800372c:	f7ff fbd4 	bl	8002ed8 <_Z15rfm22frame_inithPFtvEt>
    this->rfm22frameState = rfm22frame_get_state();
 8003730:	f7ff fc26 	bl	8002f80 <_Z20rfm22frame_get_statev>
 8003734:	0003      	movs	r3, r0
 8003736:	0019      	movs	r1, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2225      	movs	r2, #37	; 0x25
 800373c:	5499      	strb	r1, [r3, r2]

    this->txbuf = rfm22frame_get_tx_buff();
 800373e:	f7ff fc0f 	bl	8002f60 <_Z22rfm22frame_get_tx_buffv>
 8003742:	0002      	movs	r2, r0
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	601a      	str	r2, [r3, #0]
    this->rxbuf = rfm22frame_get_rx_buff();
 8003748:	f7ff fc12 	bl	8002f70 <_Z22rfm22frame_get_rx_buffv>
 800374c:	0002      	movs	r2, r0
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	605a      	str	r2, [r3, #4]
    this->devicesArr = devicesArr;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	609a      	str	r2, [r3, #8]
    this->devicesArrSize = devicesArrSize;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	1dba      	adds	r2, r7, #6
 800375c:	8812      	ldrh	r2, [r2, #0]
 800375e:	819a      	strh	r2, [r3, #12]
    this->ownAddress = ownAddress;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	611a      	str	r2, [r3, #16]
    this->ownDevice = ownDevice;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2220      	movs	r2, #32
 800376a:	18ba      	adds	r2, r7, r2
 800376c:	8812      	ldrh	r2, [r2, #0]
 800376e:	829a      	strh	r2, [r3, #20]
    this->receiveMode = receiveMode;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	18ba      	adds	r2, r7, r2
 8003776:	7812      	ldrb	r2, [r2, #0]
 8003778:	759a      	strb	r2, [r3, #22]
    this->receivedCmdSizeMax = receivedCmdSizeMax;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2228      	movs	r2, #40	; 0x28
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	75da      	strb	r2, [r3, #23]
    this->generalErrorsCounter = 0;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	84da      	strh	r2, [r3, #38]	; 0x26
    this->txErrorsCounter = 0;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	851a      	strh	r2, [r3, #40]	; 0x28
    this->rxErrorsCounter = 0;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	855a      	strh	r2, [r3, #42]	; 0x2a
    wtp3drivercalls_setTimer(2, RESET_INTERVAL_MILISEC);
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0x104>)
 8003798:	0019      	movs	r1, r3
 800379a:	2002      	movs	r0, #2
 800379c:	f001 fd2a 	bl	80051f4 <_Z24wtp3drivercalls_setTimerhm>

    for(i = 0; i < this->devicesArrSize; i++)
 80037a0:	2316      	movs	r3, #22
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	2200      	movs	r2, #0
 80037a6:	801a      	strh	r2, [r3, #0]
 80037a8:	2316      	movs	r3, #22
 80037aa:	18fb      	adds	r3, r7, r3
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	8992      	ldrh	r2, [r2, #12]
 80037b2:	4293      	cmp	r3, r2
 80037b4:	da1b      	bge.n	80037ee <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xda>
    {
        this->devicesArr[i]->init();
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	2316      	movs	r3, #22
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	18d3      	adds	r3, r2, r3
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6899      	ldr	r1, [r3, #8]
 80037ce:	2316      	movs	r3, #22
 80037d0:	18fb      	adds	r3, r7, r3
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	18cb      	adds	r3, r1, r3
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	0018      	movs	r0, r3
 80037dc:	4790      	blx	r2
    for(i = 0; i < this->devicesArrSize; i++)
 80037de:	2316      	movs	r3, #22
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	881a      	ldrh	r2, [r3, #0]
 80037e4:	2316      	movs	r3, #22
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	3201      	adds	r2, #1
 80037ea:	801a      	strh	r2, [r3, #0]
 80037ec:	e7dc      	b.n	80037a8 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0x94>
    }
    switch(this->receiveMode)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	7d9b      	ldrb	r3, [r3, #22]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	db09      	blt.n	800380a <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xf6>
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	dd06      	ble.n	8003808 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xf4>
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d000      	beq.n	8003800 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xec>
        case RECEIVE_MODE_AFTER_TX:
        case RECEIVE_MODE_OFF:
            //it stays in FRS_IDLE
            break;
    }
}
 80037fe:	e004      	b.n	800380a <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xf6>
            rfm22frame_start_rx_waiting(0);
 8003800:	2000      	movs	r0, #0
 8003802:	f7ff fc11 	bl	8003028 <_Z27rfm22frame_start_rx_waitingh>
            break;
 8003806:	e000      	b.n	800380a <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh+0xf6>
            break;
 8003808:	46c0      	nop			; (mov r8, r8)
}
 800380a:	46c0      	nop			; (mov r8, r8)
 800380c:	46bd      	mov	sp, r7
 800380e:	b006      	add	sp, #24
 8003810:	bd80      	pop	{r7, pc}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	08003931 	.word	0x08003931
 8003818:	000dbba0 	.word	0x000dbba0

0800381c <_ZN10Wtp3Driver15checkSizeHeaderEh>:
        prot3buff_setWriterToPos(txbuf, pos);
    }
}

uint16_t Wtp3Driver::checkSizeHeader(uint8_t descramble)
{
 800381c:	b590      	push	{r4, r7, lr}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	000a      	movs	r2, r1
 8003826:	1cfb      	adds	r3, r7, #3
 8003828:	701a      	strb	r2, [r3, #0]
    uint8_t arr[SIZE_HEADER_SIZE];
    uint8_t read;
    uint8_t i;
    uint8_t crc;
    uint16_t size = 0xFFFF;
 800382a:	2314      	movs	r3, #20
 800382c:	18fb      	adds	r3, r7, r3
 800382e:	2201      	movs	r2, #1
 8003830:	4252      	negs	r2, r2
 8003832:	801a      	strh	r2, [r3, #0]

    read = prot3buff_readBytes(rxbuf, arr, SIZE_HEADER_SIZE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	220c      	movs	r2, #12
 800383a:	18b9      	adds	r1, r7, r2
 800383c:	2204      	movs	r2, #4
 800383e:	0018      	movs	r0, r3
 8003840:	f7fe ff84 	bl	800274c <_Z19prot3buff_readBytesP11prot3buff_tPht>
 8003844:	0003      	movs	r3, r0
 8003846:	001a      	movs	r2, r3
 8003848:	2313      	movs	r3, #19
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	701a      	strb	r2, [r3, #0]
    if(read == SIZE_HEADER_SIZE)
 800384e:	2313      	movs	r3, #19
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b04      	cmp	r3, #4
 8003856:	d15e      	bne.n	8003916 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xfa>
    {
        //descramble
        if(descramble)
 8003858:	1cfb      	adds	r3, r7, #3
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d031      	beq.n	80038c4 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xa8>
        {
            scrambler_reset_state(&scrambler);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff fedd 	bl	8003624 <_Z21scrambler_reset_stateP11scrambler_t>
            //byte 0 is not scrambled
            for(i = 1; i < SIZE_HEADER_SIZE; i++)
 800386a:	2317      	movs	r3, #23
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2201      	movs	r2, #1
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	2317      	movs	r3, #23
 8003874:	18fb      	adds	r3, r7, r3
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	2b03      	cmp	r3, #3
 800387a:	dc1b      	bgt.n	80038b4 <_ZN10Wtp3Driver15checkSizeHeaderEh+0x98>
            {
                arr[i] = descrambler_update(&scrambler, arr[i]);
 800387c:	2317      	movs	r3, #23
 800387e:	18fb      	adds	r3, r7, r3
 8003880:	781c      	ldrb	r4, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3324      	adds	r3, #36	; 0x24
 8003886:	0018      	movs	r0, r3
 8003888:	2317      	movs	r3, #23
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	220c      	movs	r2, #12
 8003890:	18ba      	adds	r2, r7, r2
 8003892:	5cd3      	ldrb	r3, [r2, r3]
 8003894:	0019      	movs	r1, r3
 8003896:	f7ff fed3 	bl	8003640 <_Z18descrambler_updateP11scrambler_th>
 800389a:	0003      	movs	r3, r0
 800389c:	001a      	movs	r2, r3
 800389e:	230c      	movs	r3, #12
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	551a      	strb	r2, [r3, r4]
            for(i = 1; i < SIZE_HEADER_SIZE; i++)
 80038a4:	2317      	movs	r3, #23
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	781a      	ldrb	r2, [r3, #0]
 80038aa:	2317      	movs	r3, #23
 80038ac:	18fb      	adds	r3, r7, r3
 80038ae:	3201      	adds	r2, #1
 80038b0:	701a      	strb	r2, [r3, #0]
 80038b2:	e7de      	b.n	8003872 <_ZN10Wtp3Driver15checkSizeHeaderEh+0x56>
            }
            prot3buff_replaceLastNReadBytes(rxbuf, arr, SIZE_HEADER_SIZE);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	220c      	movs	r2, #12
 80038ba:	18b9      	adds	r1, r7, r2
 80038bc:	2204      	movs	r2, #4
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fe ffa1 	bl	8002806 <_Z31prot3buff_replaceLastNReadBytesP11prot3buff_tPht>
        }
        crc = crc_tools_ibutton_calculate(arr, SIZE_HEADER_SIZE - 1);
 80038c4:	2312      	movs	r3, #18
 80038c6:	18fc      	adds	r4, r7, r3
 80038c8:	230c      	movs	r3, #12
 80038ca:	18fb      	adds	r3, r7, r3
 80038cc:	2103      	movs	r1, #3
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7fe fe63 	bl	800259a <_Z27crc_tools_ibutton_calculatePhh>
 80038d4:	0003      	movs	r3, r0
 80038d6:	7023      	strb	r3, [r4, #0]
        if((arr[0] == 0x03) && (crc == arr[SIZE_HEADER_SIZE - 1]))
 80038d8:	230c      	movs	r3, #12
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d119      	bne.n	8003916 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xfa>
 80038e2:	230c      	movs	r3, #12
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	78db      	ldrb	r3, [r3, #3]
 80038e8:	2212      	movs	r2, #18
 80038ea:	18ba      	adds	r2, r7, r2
 80038ec:	7812      	ldrb	r2, [r2, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d111      	bne.n	8003916 <_ZN10Wtp3Driver15checkSizeHeaderEh+0xfa>
        {
            size = ((arr[1] & 0x07) << 8) | arr[2];
 80038f2:	230c      	movs	r3, #12
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	785b      	ldrb	r3, [r3, #1]
 80038f8:	021b      	lsls	r3, r3, #8
 80038fa:	b21a      	sxth	r2, r3
 80038fc:	23e0      	movs	r3, #224	; 0xe0
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	4013      	ands	r3, r2
 8003902:	b21a      	sxth	r2, r3
 8003904:	230c      	movs	r3, #12
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	789b      	ldrb	r3, [r3, #2]
 800390a:	b21b      	sxth	r3, r3
 800390c:	4313      	orrs	r3, r2
 800390e:	b21a      	sxth	r2, r3
 8003910:	2314      	movs	r3, #20
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	801a      	strh	r2, [r3, #0]
        }
    }
    prot3buff_setReaderToPos(rxbuf, 0);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2100      	movs	r1, #0
 800391c:	0018      	movs	r0, r3
 800391e:	f7fe feab 	bl	8002678 <_Z24prot3buff_setReaderToPosP11prot3buff_tt>
    return size;
 8003922:	2314      	movs	r3, #20
 8003924:	18fb      	adds	r3, r7, r3
 8003926:	881b      	ldrh	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b007      	add	sp, #28
 800392e:	bd90      	pop	{r4, r7, pc}

08003930 <_ZN10Wtp3Driver20sizeHeaderFirstCheckEv>:

uint16_t Wtp3Driver::sizeHeaderFirstCheck()
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
    return singleton->checkSizeHeader(1);
 8003934:	4b04      	ldr	r3, [pc, #16]	; (8003948 <_ZN10Wtp3Driver20sizeHeaderFirstCheckEv+0x18>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ff6e 	bl	800381c <_ZN10Wtp3Driver15checkSizeHeaderEh>
 8003940:	0003      	movs	r3, r0
}
 8003942:	0018      	movs	r0, r3
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	20000214 	.word	0x20000214

0800394c <_Z20wtp_address_gen_initv>:
//private
uint32_t wtp_address_gen_generate();
void     wtp_address_gen_copy_chip_id(uint8_t array[], uint8_t start_index);

void wtp_address_gen_init()
{
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    if(wtp_address_srv_get_address() == WTP_ADDRESS_UNINITIALIZED)
 8003950:	f001 fc9a 	bl	8005288 <_Z27wtp_address_srv_get_addressv>
 8003954:	0003      	movs	r3, r0
 8003956:	425a      	negs	r2, r3
 8003958:	4153      	adcs	r3, r2
 800395a:	b2db      	uxtb	r3, r3
 800395c:	2b00      	cmp	r3, #0
 800395e:	d005      	beq.n	800396c <_Z20wtp_address_gen_initv+0x20>
    {
        wtp_address_srv_set_address(wtp_address_gen_generate());
 8003960:	f000 f80f 	bl	8003982 <_Z24wtp_address_gen_generatev>
 8003964:	0003      	movs	r3, r0
 8003966:	0018      	movs	r0, r3
 8003968:	f001 fc98 	bl	800529c <_Z27wtp_address_srv_set_addressm>
    }
}
 800396c:	46c0      	nop			; (mov r8, r8)
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <_Z27wtp_address_gen_get_addressv>:

uint32_t wtp_address_gen_get_address()
{
 8003972:	b580      	push	{r7, lr}
 8003974:	af00      	add	r7, sp, #0
    return wtp_address_srv_get_address();
 8003976:	f001 fc87 	bl	8005288 <_Z27wtp_address_srv_get_addressv>
 800397a:	0003      	movs	r3, r0
}
 800397c:	0018      	movs	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_Z24wtp_address_gen_generatev>:
    wtp_address_srv_set_address(address);
}

//private
uint32_t wtp_address_gen_generate()
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
    uint8_t chip_id_arr[WTP_ADDRESS_SRV_CHIP_ID_BYTES];
    uint32_t crc32;
    uint8_t i;
    uint8_t found = 0;
 8003988:	2312      	movs	r3, #18
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	2200      	movs	r2, #0
 800398e:	701a      	strb	r2, [r3, #0]

    for(i = 0; i < WTP_ADDRESS_SRV_CHIP_ID_BYTES; i++)
 8003990:	2313      	movs	r3, #19
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	2313      	movs	r3, #19
 800399a:	18fb      	adds	r3, r7, r3
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b0b      	cmp	r3, #11
 80039a0:	dc22      	bgt.n	80039e8 <_Z24wtp_address_gen_generatev+0x66>
    {
        wtp_address_gen_copy_chip_id(chip_id_arr, i);
 80039a2:	2313      	movs	r3, #19
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	781a      	ldrb	r2, [r3, #0]
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	0011      	movs	r1, r2
 80039ac:	0018      	movs	r0, r3
 80039ae:	f000 f827 	bl	8003a00 <_Z28wtp_address_gen_copy_chip_idPhh>
        crc32 = crc_tools_32_calculate(chip_id_arr, WTP_ADDRESS_SRV_CHIP_ID_BYTES, 0);
 80039b2:	1d3b      	adds	r3, r7, #4
 80039b4:	2200      	movs	r2, #0
 80039b6:	210c      	movs	r1, #12
 80039b8:	0018      	movs	r0, r3
 80039ba:	f7fe fd58 	bl	800246e <_Z22crc_tools_32_calculatePhth>
 80039be:	0003      	movs	r3, r0
 80039c0:	617b      	str	r3, [r7, #20]
        if((crc32 != WTP_ADDRESS_FORBIDDEN_1) && (crc32 != WTP_ADDRESS_FORBIDDEN_2))
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <_Z24wtp_address_gen_generatev+0x56>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	3301      	adds	r3, #1
 80039cc:	d004      	beq.n	80039d8 <_Z24wtp_address_gen_generatev+0x56>
        {
            found = 1;
 80039ce:	2312      	movs	r3, #18
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
            break;
 80039d6:	e007      	b.n	80039e8 <_Z24wtp_address_gen_generatev+0x66>
    for(i = 0; i < WTP_ADDRESS_SRV_CHIP_ID_BYTES; i++)
 80039d8:	2313      	movs	r3, #19
 80039da:	18fb      	adds	r3, r7, r3
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	2313      	movs	r3, #19
 80039e0:	18fb      	adds	r3, r7, r3
 80039e2:	3201      	adds	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e7d7      	b.n	8003998 <_Z24wtp_address_gen_generatev+0x16>
        }
    }
    if(!found)
 80039e8:	2312      	movs	r3, #18
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <_Z24wtp_address_gen_generatev+0x74>
    {
        crc32 = 1;
 80039f2:	2301      	movs	r3, #1
 80039f4:	617b      	str	r3, [r7, #20]
    }
    return crc32;
 80039f6:	697b      	ldr	r3, [r7, #20]
}
 80039f8:	0018      	movs	r0, r3
 80039fa:	46bd      	mov	sp, r7
 80039fc:	b006      	add	sp, #24
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <_Z28wtp_address_gen_copy_chip_idPhh>:

void wtp_address_gen_copy_chip_id(uint8_t array[], uint8_t start_index)
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	000a      	movs	r2, r1
 8003a0a:	1cfb      	adds	r3, r7, #3
 8003a0c:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    if(start_index < WTP_ADDRESS_SRV_CHIP_ID_BYTES)
 8003a0e:	1cfb      	adds	r3, r7, #3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b0b      	cmp	r3, #11
 8003a14:	dc2e      	bgt.n	8003a74 <_Z28wtp_address_gen_copy_chip_idPhh+0x74>
    {
        for(i = 0; i < WTP_ADDRESS_SRV_CHIP_ID_BYTES; i++)
 8003a16:	230f      	movs	r3, #15
 8003a18:	18fb      	adds	r3, r7, r3
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	701a      	strb	r2, [r3, #0]
 8003a1e:	230f      	movs	r3, #15
 8003a20:	18fb      	adds	r3, r7, r3
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b0b      	cmp	r3, #11
 8003a26:	dc25      	bgt.n	8003a74 <_Z28wtp_address_gen_copy_chip_idPhh+0x74>
        {
            array[i] = wtp_address_srv_get_chip_id(start_index);
 8003a28:	230f      	movs	r3, #15
 8003a2a:	18fb      	adds	r3, r7, r3
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	18d4      	adds	r4, r2, r3
 8003a32:	1cfb      	adds	r3, r7, #3
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f001 fc3e 	bl	80052b8 <_Z27wtp_address_srv_get_chip_idh>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	7023      	strb	r3, [r4, #0]
            if(++start_index >= WTP_ADDRESS_SRV_CHIP_ID_BYTES)
 8003a40:	1cfb      	adds	r3, r7, #3
 8003a42:	1cfa      	adds	r2, r7, #3
 8003a44:	7812      	ldrb	r2, [r2, #0]
 8003a46:	3201      	adds	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	1cfb      	adds	r3, r7, #3
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	2b0b      	cmp	r3, #11
 8003a52:	dc01      	bgt.n	8003a58 <_Z28wtp_address_gen_copy_chip_idPhh+0x58>
 8003a54:	2300      	movs	r3, #0
 8003a56:	1c1a      	adds	r2, r3, #0
 8003a58:	b2d3      	uxtb	r3, r2
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d002      	beq.n	8003a64 <_Z28wtp_address_gen_copy_chip_idPhh+0x64>
            {
                start_index = 0;
 8003a5e:	1cfb      	adds	r3, r7, #3
 8003a60:	2200      	movs	r2, #0
 8003a62:	701a      	strb	r2, [r3, #0]
        for(i = 0; i < WTP_ADDRESS_SRV_CHIP_ID_BYTES; i++)
 8003a64:	230f      	movs	r3, #15
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	3201      	adds	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
 8003a72:	e7d4      	b.n	8003a1e <_Z28wtp_address_gen_copy_chip_idPhh+0x1e>
            }
        }
    }
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b005      	add	sp, #20
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <_ZN5Alarm4initEP12GPIO_TypeDeft>:
 *      Author: marcin
 */

#include "Alarm.h"

void Alarm::init(GPIO_TypeDef *port, uint16_t pin) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08a      	sub	sp, #40	; 0x28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	1dbb      	adds	r3, r7, #6
 8003a88:	801a      	strh	r2, [r3, #0]
	this->port = port;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	1dba      	adds	r2, r7, #6
 8003a94:	8812      	ldrh	r2, [r2, #0]
 8003a96:	809a      	strh	r2, [r3, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 8003a98:	1dbb      	adds	r3, r7, #6
 8003a9a:	881a      	ldrh	r2, [r3, #0]
 8003a9c:	2314      	movs	r3, #20
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa2:	2314      	movs	r3, #20
 8003aa4:	18fb      	adds	r3, r7, r3
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aaa:	2314      	movs	r3, #20
 8003aac:	18fb      	adds	r3, r7, r3
 8003aae:	2200      	movs	r2, #0
 8003ab0:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab2:	2314      	movs	r3, #20
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8003aba:	2314      	movs	r3, #20
 8003abc:	18fa      	adds	r2, r7, r3
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	0011      	movs	r1, r2
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	f7fc fed0 	bl	8000868 <HAL_GPIO_Init>
	off();
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	0018      	movs	r0, r3
 8003acc:	f000 f804 	bl	8003ad8 <_ZN5Alarm3offEv>
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b00a      	add	sp, #40	; 0x28
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <_ZN5Alarm3offEv>:

void Alarm::on() {
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
}

void Alarm::off() {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	889b      	ldrh	r3, [r3, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	0019      	movs	r1, r3
 8003aec:	f7fd f832 	bl	8000b54 <HAL_GPIO_WritePin>
}
 8003af0:	46c0      	nop			; (mov r8, r8)
 8003af2:	46bd      	mov	sp, r7
 8003af4:	b002      	add	sp, #8
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <_ZN9EEPROMVarC1Et>:

#include "EEPROMVar.h"

uint32_t EEPROMVar::m_currentAddress = 0;

EEPROMVar::EEPROMVar(uint16_t size) {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	000a      	movs	r2, r1
 8003b02:	1cbb      	adds	r3, r7, #2
 8003b04:	801a      	strh	r2, [r3, #0]
	m_size = size;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	1cba      	adds	r2, r7, #2
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	801a      	strh	r2, [r3, #0]
	m_address = m_currentAddress;
 8003b0e:	4b08      	ldr	r3, [pc, #32]	; (8003b30 <_ZN9EEPROMVarC1Et+0x38>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	605a      	str	r2, [r3, #4]
	m_currentAddress += m_size;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	001a      	movs	r2, r3
 8003b1c:	4b04      	ldr	r3, [pc, #16]	; (8003b30 <_ZN9EEPROMVarC1Et+0x38>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	18d2      	adds	r2, r2, r3
 8003b22:	4b03      	ldr	r3, [pc, #12]	; (8003b30 <_ZN9EEPROMVarC1Et+0x38>)
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	b002      	add	sp, #8
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	20000218 	.word	0x20000218

08003b34 <_ZN9EEPROMVaraSEh>:

void EEPROMVar::operator=(uint8_t data) {
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	000a      	movs	r2, r1
 8003b3e:	1cfb      	adds	r3, r7, #3
 8003b40:	701a      	strb	r2, [r3, #0]
	if(m_size > sizeof(uint8_t)){
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d80e      	bhi.n	8003b68 <_ZN9EEPROMVaraSEh+0x34>
		return;
	}
	HAL_DATA_EEPROMEx_Unlock();
 8003b4a:	f7fc fdf9 	bl	8000740 <HAL_FLASHEx_DATAEEPROM_Unlock>
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_BYTE, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_BYTE, EEPROM_START + m_address, data);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	4a07      	ldr	r2, [pc, #28]	; (8003b70 <_ZN9EEPROMVaraSEh+0x3c>)
 8003b54:	1899      	adds	r1, r3, r2
 8003b56:	1cfb      	adds	r3, r7, #3
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	001a      	movs	r2, r3
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7fc fe29 	bl	80007b4 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_DATA_EEPROMEx_Lock();
 8003b62:	f7fc fe19 	bl	8000798 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003b66:	e000      	b.n	8003b6a <_ZN9EEPROMVaraSEh+0x36>
		return;
 8003b68:	46c0      	nop			; (mov r8, r8)
}
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	08080000 	.word	0x08080000

08003b74 <_ZN9EEPROMVaraSEt>:

void EEPROMVar::operator=(uint16_t data) {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	000a      	movs	r2, r1
 8003b7e:	1cbb      	adds	r3, r7, #2
 8003b80:	801a      	strh	r2, [r3, #0]
	if(m_size > sizeof(uint16_t)){
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	881b      	ldrh	r3, [r3, #0]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d80e      	bhi.n	8003ba8 <_ZN9EEPROMVaraSEt+0x34>
		return;
	}
	HAL_DATA_EEPROMEx_Unlock();
 8003b8a:	f7fc fdd9 	bl	8000740 <HAL_FLASHEx_DATAEEPROM_Unlock>
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_HALFWORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, EEPROM_START + m_address, data);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	4a07      	ldr	r2, [pc, #28]	; (8003bb0 <_ZN9EEPROMVaraSEt+0x3c>)
 8003b94:	1899      	adds	r1, r3, r2
 8003b96:	1cbb      	adds	r3, r7, #2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	f7fc fe09 	bl	80007b4 <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_DATA_EEPROMEx_Lock();
 8003ba2:	f7fc fdf9 	bl	8000798 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003ba6:	e000      	b.n	8003baa <_ZN9EEPROMVaraSEt+0x36>
		return;
 8003ba8:	46c0      	nop			; (mov r8, r8)
}
 8003baa:	46bd      	mov	sp, r7
 8003bac:	b002      	add	sp, #8
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	08080000 	.word	0x08080000

08003bb4 <_ZN9EEPROMVarcvhEv>:
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_WORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Lock();
}

EEPROMVar::operator uint8_t() {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8003bbc:	230f      	movs	r3, #15
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	701a      	strb	r2, [r3, #0]
	tmp = *(__IO uint8_t*)(EEPROM_START+m_address);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	4a07      	ldr	r2, [pc, #28]	; (8003be8 <_ZN9EEPROMVarcvhEv+0x34>)
 8003bca:	4694      	mov	ip, r2
 8003bcc:	4463      	add	r3, ip
 8003bce:	001a      	movs	r2, r3
 8003bd0:	230f      	movs	r3, #15
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	7812      	ldrb	r2, [r2, #0]
 8003bd6:	701a      	strb	r2, [r3, #0]
	return tmp;
 8003bd8:	230f      	movs	r3, #15
 8003bda:	18fb      	adds	r3, r7, r3
 8003bdc:	781b      	ldrb	r3, [r3, #0]
}
 8003bde:	0018      	movs	r0, r3
 8003be0:	46bd      	mov	sp, r7
 8003be2:	b004      	add	sp, #16
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	46c0      	nop			; (mov r8, r8)
 8003be8:	08080000 	.word	0x08080000

08003bec <_ZN9EEPROMVarcvtEv>:

EEPROMVar::operator uint16_t() {
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	uint16_t tmp = 0;
 8003bf4:	230e      	movs	r3, #14
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	801a      	strh	r2, [r3, #0]
	tmp = *(uint16_t*)(EEPROM_START+m_address);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a07      	ldr	r2, [pc, #28]	; (8003c20 <_ZN9EEPROMVarcvtEv+0x34>)
 8003c02:	4694      	mov	ip, r2
 8003c04:	4463      	add	r3, ip
 8003c06:	001a      	movs	r2, r3
 8003c08:	230e      	movs	r3, #14
 8003c0a:	18fb      	adds	r3, r7, r3
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	801a      	strh	r2, [r3, #0]
	return tmp;
 8003c10:	230e      	movs	r3, #14
 8003c12:	18fb      	adds	r3, r7, r3
 8003c14:	881b      	ldrh	r3, [r3, #0]
}
 8003c16:	0018      	movs	r0, r3
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b004      	add	sp, #16
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	08080000 	.word	0x08080000

08003c24 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
}
 8003c28:	46c0      	nop			; (mov r8, r8)
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	af00      	add	r7, sp, #0
  while (1)
 8003c32:	e7fe      	b.n	8003c32 <HardFault_Handler+0x4>

08003c34 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
}
 8003c38:	46c0      	nop			; (mov r8, r8)
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	af00      	add	r7, sp, #0
}
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8003c4c:	f7fc fb32 	bl	80002b4 <HAL_IncTick>
}
 8003c50:	46c0      	nop			; (mov r8, r8)
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
	if (__HAL_GPIO_EXTI_GET_IT(RFM22_INT_BIT) != RESET)
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <EXTI4_15_IRQHandler+0x2c>)
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	2210      	movs	r2, #16
 8003c62:	4013      	ands	r3, r2
 8003c64:	1e5a      	subs	r2, r3, #1
 8003c66:	4193      	sbcs	r3, r2
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d007      	beq.n	8003c7e <EXTI4_15_IRQHandler+0x26>
	{
		__HAL_GPIO_EXTI_CLEAR_IT (RFM22_INT_BIT);
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <EXTI4_15_IRQHandler+0x2c>)
 8003c70:	2210      	movs	r2, #16
 8003c72:	615a      	str	r2, [r3, #20]
		HAL_NVIC_ClearPendingIRQ (RFM22_IRQ);
 8003c74:	2007      	movs	r0, #7
 8003c76:	f7fc fc44 	bl	8000502 <HAL_NVIC_ClearPendingIRQ>

		rfm22frame_isr();
 8003c7a:	f7ff fa2d 	bl	80030d8 <_Z14rfm22frame_isrv>
	}

}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40010400 	.word	0x40010400

08003c88 <_ZN5Digit4initEhh>:
 */

#include <Digit.h>
#include "digitMap.h"

void Digit::init(uint8_t d1, uint8_t d2){
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	0008      	movs	r0, r1
 8003c92:	0011      	movs	r1, r2
 8003c94:	1cfb      	adds	r3, r7, #3
 8003c96:	1c02      	adds	r2, r0, #0
 8003c98:	701a      	strb	r2, [r3, #0]
 8003c9a:	1cbb      	adds	r3, r7, #2
 8003c9c:	1c0a      	adds	r2, r1, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
	this->d1 = d1;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	1cfa      	adds	r2, r7, #3
 8003ca4:	7812      	ldrb	r2, [r2, #0]
 8003ca6:	701a      	strb	r2, [r3, #0]
	this->d2 = d2;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	1cba      	adds	r2, r7, #2
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	705a      	strb	r2, [r3, #1]
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	b002      	add	sp, #8
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <_ZN5Digit9setNumberEh>:

void Digit::setNumber(uint8_t num){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	000a      	movs	r2, r1
 8003cc2:	1cfb      	adds	r3, r7, #3
 8003cc4:	701a      	strb	r2, [r3, #0]
	this->num = num;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	1cfa      	adds	r2, r7, #3
 8003cca:	7812      	ldrb	r2, [r2, #0]
 8003ccc:	709a      	strb	r2, [r3, #2]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}
	...

08003cd8 <_ZN5Digit15getSegmentValueEv>:

uint8_t Digit::getSegmentValue() {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	return digitMap[num];
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	789b      	ldrb	r3, [r3, #2]
 8003ce4:	001a      	movs	r2, r3
 8003ce6:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <_ZN5Digit15getSegmentValueEv+0x1c>)
 8003ce8:	5c9b      	ldrb	r3, [r3, r2]
}
 8003cea:	0018      	movs	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	b002      	add	sp, #8
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	080059d0 	.word	0x080059d0

08003cf8 <_ZN5Digit5getD1Ev>:
public:
	const static uint8_t NUMBER_OF_SEGMENTS = 7;
	void init(uint8_t d1, uint8_t d2);
	void setNumber(uint8_t num);
	uint8_t getSegmentValue();
	inline uint8_t getD1() { return d1; }
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	781b      	ldrb	r3, [r3, #0]
 8003d04:	0018      	movs	r0, r3
 8003d06:	46bd      	mov	sp, r7
 8003d08:	b002      	add	sp, #8
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN5Digit5getD2Ev>:
	inline uint8_t getD2() { return d2; }
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	785b      	ldrb	r3, [r3, #1]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	b002      	add	sp, #8
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <_ZN3Lcd4initEv>:
 */

#include "Lcd.h"
#include "hardware.h"

void Lcd::init(){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	dig[0].init(19, 18);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	333c      	adds	r3, #60	; 0x3c
 8003d2c:	2212      	movs	r2, #18
 8003d2e:	2113      	movs	r1, #19
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff ffa9 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[1].init(21, 20);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	333f      	adds	r3, #63	; 0x3f
 8003d3a:	2214      	movs	r2, #20
 8003d3c:	2115      	movs	r1, #21
 8003d3e:	0018      	movs	r0, r3
 8003d40:	f7ff ffa2 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[2].init(1, 0);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3342      	adds	r3, #66	; 0x42
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	0018      	movs	r0, r3
 8003d4e:	f7ff ff9b 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[3].init(6, 2);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	3345      	adds	r3, #69	; 0x45
 8003d56:	2202      	movs	r2, #2
 8003d58:	2106      	movs	r1, #6
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7ff ff94 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[4].init(26, 27);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	3348      	adds	r3, #72	; 0x48
 8003d64:	221b      	movs	r2, #27
 8003d66:	211a      	movs	r1, #26
 8003d68:	0018      	movs	r0, r3
 8003d6a:	f7ff ff8d 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[5].init(24, 25);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	334b      	adds	r3, #75	; 0x4b
 8003d72:	2219      	movs	r2, #25
 8003d74:	2118      	movs	r1, #24
 8003d76:	0018      	movs	r0, r3
 8003d78:	f7ff ff86 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[6].init(14, 15);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	334e      	adds	r3, #78	; 0x4e
 8003d80:	220f      	movs	r2, #15
 8003d82:	210e      	movs	r1, #14
 8003d84:	0018      	movs	r0, r3
 8003d86:	f7ff ff7f 	bl	8003c88 <_ZN5Digit4initEhh>
	dig[7].init(11, 13);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	3351      	adds	r3, #81	; 0x51
 8003d8e:	220d      	movs	r2, #13
 8003d90:	210b      	movs	r1, #11
 8003d92:	0018      	movs	r0, r3
 8003d94:	f7ff ff78 	bl	8003c88 <_ZN5Digit4initEhh>

	__HAL_RCC_LCD_CLK_ENABLE();
 8003d98:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <_ZN3Lcd4initEv+0xfc>)
 8003d9a:	4a20      	ldr	r2, [pc, #128]	; (8003e1c <_ZN3Lcd4initEv+0xfc>)
 8003d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d9e:	2180      	movs	r1, #128	; 0x80
 8003da0:	0089      	lsls	r1, r1, #2
 8003da2:	430a      	orrs	r2, r1
 8003da4:	639a      	str	r2, [r3, #56]	; 0x38
	lcdHandler.Instance = LCD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <_ZN3Lcd4initEv+0x100>)
 8003daa:	601a      	str	r2, [r3, #0]
	lcdHandler.Init.Prescaler = LCD_PRESCALER_1;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	605a      	str	r2, [r3, #4]
	lcdHandler.Init.Divider = LCD_DIVIDER_16;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
	lcdHandler.Init.Duty = LCD_DUTY_1_4;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	220c      	movs	r2, #12
 8003dbc:	60da      	str	r2, [r3, #12]
	lcdHandler.Init.Bias = LCD_BIAS_1_4;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
	lcdHandler.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	615a      	str	r2, [r3, #20]
	lcdHandler.Init.Contrast = LCD_CONTRASTLEVEL_3;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	22c0      	movs	r2, #192	; 0xc0
 8003dce:	0112      	lsls	r2, r2, #4
 8003dd0:	619a      	str	r2, [r3, #24]
	lcdHandler.Init.DeadTime = LCD_DEADTIME_0;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	61da      	str	r2, [r3, #28]
	lcdHandler.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	621a      	str	r2, [r3, #32]
	lcdHandler.Init.HighDrive = LCD_HIGHDRIVE_1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	625a      	str	r2, [r3, #36]	; 0x24
	lcdHandler.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	629a      	str	r2, [r3, #40]	; 0x28
	lcdHandler.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c
	lcdHandler.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Initialize the LCD */
	HAL_LCD_Init(&lcdHandler);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fc fec9 	bl	8000b90 <HAL_LCD_Init>
	pinInit();
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	0018      	movs	r0, r3
 8003e02:	f000 f811 	bl	8003e28 <_ZN3Lcd7pinInitEv>
	//todo: poprawic bias i vlcd
	__HAL_SYSCFG_VLCD_CAPA_CONFIG(
 8003e06:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <_ZN3Lcd4initEv+0x104>)
 8003e08:	4a06      	ldr	r2, [pc, #24]	; (8003e24 <_ZN3Lcd4initEv+0x104>)
 8003e0a:	6852      	ldr	r2, [r2, #4]
 8003e0c:	210e      	movs	r1, #14
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	605a      	str	r2, [r3, #4]
			SYSCFG_VLCD_PB0_EXT_CAPA_ON | SYSCFG_VLCD_PB2_EXT_CAPA_ON |SYSCFG_VLCD_PB12_EXT_CAPA_ON );
//	test();
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b002      	add	sp, #8
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40002400 	.word	0x40002400
 8003e24:	40010000 	.word	0x40010000

08003e28 <_ZN3Lcd7pinInitEv>:

void Lcd::pinInit() {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	230c      	movs	r3, #12
 8003e32:	18fb      	adds	r3, r7, r3
 8003e34:	2202      	movs	r2, #2
 8003e36:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e38:	230c      	movs	r3, #12
 8003e3a:	18fb      	adds	r3, r7, r3
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e40:	230c      	movs	r3, #12
 8003e42:	18fb      	adds	r3, r7, r3
 8003e44:	2200      	movs	r2, #0
 8003e46:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LCD_VLCD1_PIN;
 8003e48:	230c      	movs	r3, #12
 8003e4a:	18fb      	adds	r3, r7, r3
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD1_PORT, &GPIO_InitStruct);
 8003e50:	230c      	movs	r3, #12
 8003e52:	18fb      	adds	r3, r7, r3
 8003e54:	4a8d      	ldr	r2, [pc, #564]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003e56:	0019      	movs	r1, r3
 8003e58:	0010      	movs	r0, r2
 8003e5a:	f7fc fd05 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_VLCD2_PIN;
 8003e5e:	230c      	movs	r3, #12
 8003e60:	18fb      	adds	r3, r7, r3
 8003e62:	2280      	movs	r2, #128	; 0x80
 8003e64:	0152      	lsls	r2, r2, #5
 8003e66:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD2_PORT, &GPIO_InitStruct);
 8003e68:	230c      	movs	r3, #12
 8003e6a:	18fb      	adds	r3, r7, r3
 8003e6c:	4a87      	ldr	r2, [pc, #540]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003e6e:	0019      	movs	r1, r3
 8003e70:	0010      	movs	r0, r2
 8003e72:	f7fc fcf9 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_VLCD3_PIN;
 8003e76:	230c      	movs	r3, #12
 8003e78:	18fb      	adds	r3, r7, r3
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD3_PORT, &GPIO_InitStruct);
 8003e7e:	230c      	movs	r3, #12
 8003e80:	18fb      	adds	r3, r7, r3
 8003e82:	4a82      	ldr	r2, [pc, #520]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003e84:	0019      	movs	r1, r3
 8003e86:	0010      	movs	r0, r2
 8003e88:	f7fc fcee 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8c:	230c      	movs	r3, #12
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	2202      	movs	r2, #2
 8003e92:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e94:	230c      	movs	r3, #12
 8003e96:	18fb      	adds	r3, r7, r3
 8003e98:	2200      	movs	r2, #0
 8003e9a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e9c:	230c      	movs	r3, #12
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_LCD;
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	18fb      	adds	r3, r7, r3
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = LCD_COM0_PIN;
 8003eac:	230c      	movs	r3, #12
 8003eae:	18fb      	adds	r3, r7, r3
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	0052      	lsls	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM0_PORT, &GPIO_InitStruct);
 8003eb6:	230c      	movs	r3, #12
 8003eb8:	18fa      	adds	r2, r7, r3
 8003eba:	23a0      	movs	r3, #160	; 0xa0
 8003ebc:	05db      	lsls	r3, r3, #23
 8003ebe:	0011      	movs	r1, r2
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7fc fcd1 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM1_PIN;
 8003ec6:	230c      	movs	r3, #12
 8003ec8:	18fb      	adds	r3, r7, r3
 8003eca:	2280      	movs	r2, #128	; 0x80
 8003ecc:	0092      	lsls	r2, r2, #2
 8003ece:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM1_PORT, &GPIO_InitStruct);
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	18fa      	adds	r2, r7, r3
 8003ed4:	23a0      	movs	r3, #160	; 0xa0
 8003ed6:	05db      	lsls	r3, r3, #23
 8003ed8:	0011      	movs	r1, r2
 8003eda:	0018      	movs	r0, r3
 8003edc:	f7fc fcc4 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM2_PIN;
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	18fb      	adds	r3, r7, r3
 8003ee4:	2280      	movs	r2, #128	; 0x80
 8003ee6:	00d2      	lsls	r2, r2, #3
 8003ee8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM2_PORT, &GPIO_InitStruct);
 8003eea:	230c      	movs	r3, #12
 8003eec:	18fa      	adds	r2, r7, r3
 8003eee:	23a0      	movs	r3, #160	; 0xa0
 8003ef0:	05db      	lsls	r3, r3, #23
 8003ef2:	0011      	movs	r1, r2
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fc fcb7 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM3_PIN;
 8003efa:	230c      	movs	r3, #12
 8003efc:	18fb      	adds	r3, r7, r3
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0092      	lsls	r2, r2, #2
 8003f02:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM3_PORT, &GPIO_InitStruct);
 8003f04:	230c      	movs	r3, #12
 8003f06:	18fb      	adds	r3, r7, r3
 8003f08:	4a60      	ldr	r2, [pc, #384]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003f0a:	0019      	movs	r1, r3
 8003f0c:	0010      	movs	r0, r2
 8003f0e:	f7fc fcab 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG0_PIN;
 8003f12:	230c      	movs	r3, #12
 8003f14:	18fb      	adds	r3, r7, r3
 8003f16:	2202      	movs	r2, #2
 8003f18:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG0_PORT, &GPIO_InitStruct);
 8003f1a:	230c      	movs	r3, #12
 8003f1c:	18fa      	adds	r2, r7, r3
 8003f1e:	23a0      	movs	r3, #160	; 0xa0
 8003f20:	05db      	lsls	r3, r3, #23
 8003f22:	0011      	movs	r1, r2
 8003f24:	0018      	movs	r0, r3
 8003f26:	f7fc fc9f 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG1_PIN;
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	18fb      	adds	r3, r7, r3
 8003f2e:	2204      	movs	r2, #4
 8003f30:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG1_PORT, &GPIO_InitStruct);
 8003f32:	230c      	movs	r3, #12
 8003f34:	18fa      	adds	r2, r7, r3
 8003f36:	23a0      	movs	r3, #160	; 0xa0
 8003f38:	05db      	lsls	r3, r3, #23
 8003f3a:	0011      	movs	r1, r2
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7fc fc93 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG2_PIN;
 8003f42:	230c      	movs	r3, #12
 8003f44:	18fb      	adds	r3, r7, r3
 8003f46:	2208      	movs	r2, #8
 8003f48:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG2_PORT, &GPIO_InitStruct);
 8003f4a:	230c      	movs	r3, #12
 8003f4c:	18fa      	adds	r2, r7, r3
 8003f4e:	23a0      	movs	r3, #160	; 0xa0
 8003f50:	05db      	lsls	r3, r3, #23
 8003f52:	0011      	movs	r1, r2
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7fc fc87 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG6_PIN;
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	18fb      	adds	r3, r7, r3
 8003f5e:	2202      	movs	r2, #2
 8003f60:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG6_PORT, &GPIO_InitStruct);
 8003f62:	230c      	movs	r3, #12
 8003f64:	18fb      	adds	r3, r7, r3
 8003f66:	4a49      	ldr	r2, [pc, #292]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003f68:	0019      	movs	r1, r3
 8003f6a:	0010      	movs	r0, r2
 8003f6c:	f7fc fc7c 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG11_PIN;
 8003f70:	230c      	movs	r3, #12
 8003f72:	18fb      	adds	r3, r7, r3
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0112      	lsls	r2, r2, #4
 8003f78:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG11_PORT, &GPIO_InitStruct);
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	4a43      	ldr	r2, [pc, #268]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003f80:	0019      	movs	r1, r3
 8003f82:	0010      	movs	r0, r2
 8003f84:	f7fc fc70 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG13_PIN;
 8003f88:	230c      	movs	r3, #12
 8003f8a:	18fb      	adds	r3, r7, r3
 8003f8c:	2280      	movs	r2, #128	; 0x80
 8003f8e:	0192      	lsls	r2, r2, #6
 8003f90:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG13_PORT, &GPIO_InitStruct);
 8003f92:	230c      	movs	r3, #12
 8003f94:	18fb      	adds	r3, r7, r3
 8003f96:	4a3d      	ldr	r2, [pc, #244]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003f98:	0019      	movs	r1, r3
 8003f9a:	0010      	movs	r0, r2
 8003f9c:	f7fc fc64 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG14_PIN;
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	2280      	movs	r2, #128	; 0x80
 8003fa6:	01d2      	lsls	r2, r2, #7
 8003fa8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG14_PORT, &GPIO_InitStruct);
 8003faa:	230c      	movs	r3, #12
 8003fac:	18fb      	adds	r3, r7, r3
 8003fae:	4a37      	ldr	r2, [pc, #220]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003fb0:	0019      	movs	r1, r3
 8003fb2:	0010      	movs	r0, r2
 8003fb4:	f7fc fc58 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG15_PIN;
 8003fb8:	230c      	movs	r3, #12
 8003fba:	18fb      	adds	r3, r7, r3
 8003fbc:	2280      	movs	r2, #128	; 0x80
 8003fbe:	0212      	lsls	r2, r2, #8
 8003fc0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG15_PORT, &GPIO_InitStruct);
 8003fc2:	230c      	movs	r3, #12
 8003fc4:	18fb      	adds	r3, r7, r3
 8003fc6:	4a31      	ldr	r2, [pc, #196]	; (800408c <_ZN3Lcd7pinInitEv+0x264>)
 8003fc8:	0019      	movs	r1, r3
 8003fca:	0010      	movs	r0, r2
 8003fcc:	f7fc fc4c 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG18_PIN;
 8003fd0:	230c      	movs	r3, #12
 8003fd2:	18fb      	adds	r3, r7, r3
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG18_PORT, &GPIO_InitStruct);
 8003fd8:	230c      	movs	r3, #12
 8003fda:	18fb      	adds	r3, r7, r3
 8003fdc:	4a2c      	ldr	r2, [pc, #176]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 8003fde:	0019      	movs	r1, r3
 8003fe0:	0010      	movs	r0, r2
 8003fe2:	f7fc fc41 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG19_PIN;
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	2202      	movs	r2, #2
 8003fec:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG19_PORT, &GPIO_InitStruct);
 8003fee:	230c      	movs	r3, #12
 8003ff0:	18fb      	adds	r3, r7, r3
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 8003ff4:	0019      	movs	r1, r3
 8003ff6:	0010      	movs	r0, r2
 8003ff8:	f7fc fc36 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG20_PIN;
 8003ffc:	230c      	movs	r3, #12
 8003ffe:	18fb      	adds	r3, r7, r3
 8004000:	2204      	movs	r2, #4
 8004002:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG20_PORT, &GPIO_InitStruct);
 8004004:	230c      	movs	r3, #12
 8004006:	18fb      	adds	r3, r7, r3
 8004008:	4a21      	ldr	r2, [pc, #132]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 800400a:	0019      	movs	r1, r3
 800400c:	0010      	movs	r0, r2
 800400e:	f7fc fc2b 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG21_PIN;
 8004012:	230c      	movs	r3, #12
 8004014:	18fb      	adds	r3, r7, r3
 8004016:	2208      	movs	r2, #8
 8004018:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG21_PORT, &GPIO_InitStruct);
 800401a:	230c      	movs	r3, #12
 800401c:	18fb      	adds	r3, r7, r3
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 8004020:	0019      	movs	r1, r3
 8004022:	0010      	movs	r0, r2
 8004024:	f7fc fc20 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG24_PIN;
 8004028:	230c      	movs	r3, #12
 800402a:	18fb      	adds	r3, r7, r3
 800402c:	2240      	movs	r2, #64	; 0x40
 800402e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG24_PORT, &GPIO_InitStruct);
 8004030:	230c      	movs	r3, #12
 8004032:	18fb      	adds	r3, r7, r3
 8004034:	4a16      	ldr	r2, [pc, #88]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 8004036:	0019      	movs	r1, r3
 8004038:	0010      	movs	r0, r2
 800403a:	f7fc fc15 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG25_PIN;
 800403e:	230c      	movs	r3, #12
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	2280      	movs	r2, #128	; 0x80
 8004044:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG25_PORT, &GPIO_InitStruct);
 8004046:	230c      	movs	r3, #12
 8004048:	18fb      	adds	r3, r7, r3
 800404a:	4a11      	ldr	r2, [pc, #68]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 800404c:	0019      	movs	r1, r3
 800404e:	0010      	movs	r0, r2
 8004050:	f7fc fc0a 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG26_PIN;
 8004054:	230c      	movs	r3, #12
 8004056:	18fb      	adds	r3, r7, r3
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	0052      	lsls	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG26_PORT, &GPIO_InitStruct);
 800405e:	230c      	movs	r3, #12
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	4a0b      	ldr	r2, [pc, #44]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 8004064:	0019      	movs	r1, r3
 8004066:	0010      	movs	r0, r2
 8004068:	f7fc fbfe 	bl	8000868 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG27_PIN;
 800406c:	230c      	movs	r3, #12
 800406e:	18fb      	adds	r3, r7, r3
 8004070:	2280      	movs	r2, #128	; 0x80
 8004072:	0092      	lsls	r2, r2, #2
 8004074:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG27_PORT, &GPIO_InitStruct);
 8004076:	230c      	movs	r3, #12
 8004078:	18fb      	adds	r3, r7, r3
 800407a:	4a05      	ldr	r2, [pc, #20]	; (8004090 <_ZN3Lcd7pinInitEv+0x268>)
 800407c:	0019      	movs	r1, r3
 800407e:	0010      	movs	r0, r2
 8004080:	f7fc fbf2 	bl	8000868 <HAL_GPIO_Init>
}
 8004084:	46c0      	nop			; (mov r8, r8)
 8004086:	46bd      	mov	sp, r7
 8004088:	b008      	add	sp, #32
 800408a:	bd80      	pop	{r7, pc}
 800408c:	50000400 	.word	0x50000400
 8004090:	50000800 	.word	0x50000800

08004094 <_ZN3Lcd5clearEv>:

void Lcd::clear() {
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	HAL_LCD_Clear (&lcdHandler);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	0018      	movs	r0, r3
 80040a0:	f7fc feb1 	bl	8000e06 <HAL_LCD_Clear>
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	46bd      	mov	sp, r7
 80040a8:	b002      	add	sp, #8
 80040aa:	bd80      	pop	{r7, pc}

080040ac <_ZN3Lcd9writeCharEPhh>:

void Lcd::writeChar(uint8_t* ch, uint8_t pos) {
 80040ac:	b5b0      	push	{r4, r5, r7, lr}
 80040ae:	b08a      	sub	sp, #40	; 0x28
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	1dfb      	adds	r3, r7, #7
 80040b8:	701a      	strb	r2, [r3, #0]
	dig[pos].setNumber(*ch - 0x30);
 80040ba:	1dfb      	adds	r3, r7, #7
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	0013      	movs	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	189b      	adds	r3, r3, r2
 80040c4:	3338      	adds	r3, #56	; 0x38
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	18d3      	adds	r3, r2, r3
 80040ca:	1d1a      	adds	r2, r3, #4
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	3b30      	subs	r3, #48	; 0x30
 80040d2:	b2db      	uxtb	r3, r3
 80040d4:	0019      	movs	r1, r3
 80040d6:	0010      	movs	r0, r2
 80040d8:	f7ff fdee 	bl	8003cb8 <_ZN5Digit9setNumberEh>
	uint8_t segVal = dig[pos].getSegmentValue();
 80040dc:	1dfb      	adds	r3, r7, #7
 80040de:	781a      	ldrb	r2, [r3, #0]
 80040e0:	0013      	movs	r3, r2
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	189b      	adds	r3, r3, r2
 80040e6:	3338      	adds	r3, #56	; 0x38
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	18d3      	adds	r3, r2, r3
 80040ec:	3304      	adds	r3, #4
 80040ee:	2227      	movs	r2, #39	; 0x27
 80040f0:	18bc      	adds	r4, r7, r2
 80040f2:	0018      	movs	r0, r3
 80040f4:	f7ff fdf0 	bl	8003cd8 <_ZN5Digit15getSegmentValueEv>
 80040f8:	0003      	movs	r3, r0
 80040fa:	7023      	strb	r3, [r4, #0]

	uint32_t R0 = 0x00;
 80040fc:	2300      	movs	r3, #0
 80040fe:	623b      	str	r3, [r7, #32]
	uint32_t R2 = 0x00;
 8004100:	2300      	movs	r3, #0
 8004102:	61fb      	str	r3, [r7, #28]
	uint32_t R4 = 0x00;
 8004104:	2300      	movs	r3, #0
 8004106:	61bb      	str	r3, [r7, #24]
	uint32_t R6 = 0x00;
 8004108:	2300      	movs	r3, #0
 800410a:	617b      	str	r3, [r7, #20]

	R0 = ((segVal >> 3) & 0x1) << dig[pos].getD2();
 800410c:	2327      	movs	r3, #39	; 0x27
 800410e:	18fb      	adds	r3, r7, r3
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	10db      	asrs	r3, r3, #3
 8004114:	2201      	movs	r2, #1
 8004116:	4013      	ands	r3, r2
 8004118:	001c      	movs	r4, r3
 800411a:	1dfb      	adds	r3, r7, #7
 800411c:	781a      	ldrb	r2, [r3, #0]
 800411e:	0013      	movs	r3, r2
 8004120:	005b      	lsls	r3, r3, #1
 8004122:	189b      	adds	r3, r3, r2
 8004124:	3338      	adds	r3, #56	; 0x38
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	18d3      	adds	r3, r2, r3
 800412a:	3304      	adds	r3, #4
 800412c:	0018      	movs	r0, r3
 800412e:	f7ff fded 	bl	8003d0c <_ZN5Digit5getD2Ev>
 8004132:	0003      	movs	r3, r0
 8004134:	409c      	lsls	r4, r3
 8004136:	0023      	movs	r3, r4
 8004138:	623b      	str	r3, [r7, #32]
	R2 = ((segVal >> 6) & 0x1) << dig[pos].getD2() | ((segVal >> 1) & 0x1) << dig[pos].getD1();
 800413a:	2327      	movs	r3, #39	; 0x27
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	119b      	asrs	r3, r3, #6
 8004142:	2201      	movs	r2, #1
 8004144:	4013      	ands	r3, r2
 8004146:	001c      	movs	r4, r3
 8004148:	1dfb      	adds	r3, r7, #7
 800414a:	781a      	ldrb	r2, [r3, #0]
 800414c:	0013      	movs	r3, r2
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	189b      	adds	r3, r3, r2
 8004152:	3338      	adds	r3, #56	; 0x38
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	3304      	adds	r3, #4
 800415a:	0018      	movs	r0, r3
 800415c:	f7ff fdd6 	bl	8003d0c <_ZN5Digit5getD2Ev>
 8004160:	0003      	movs	r3, r0
 8004162:	409c      	lsls	r4, r3
 8004164:	2327      	movs	r3, #39	; 0x27
 8004166:	18fb      	adds	r3, r7, r3
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	105b      	asrs	r3, r3, #1
 800416c:	2201      	movs	r2, #1
 800416e:	4013      	ands	r3, r2
 8004170:	001d      	movs	r5, r3
 8004172:	1dfb      	adds	r3, r7, #7
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	0013      	movs	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	189b      	adds	r3, r3, r2
 800417c:	3338      	adds	r3, #56	; 0x38
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	18d3      	adds	r3, r2, r3
 8004182:	3304      	adds	r3, #4
 8004184:	0018      	movs	r0, r3
 8004186:	f7ff fdb7 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 800418a:	0003      	movs	r3, r0
 800418c:	409d      	lsls	r5, r3
 800418e:	002b      	movs	r3, r5
 8004190:	4323      	orrs	r3, r4
 8004192:	61fb      	str	r3, [r7, #28]
	R4 = ((segVal >> 4) & 0x1) << dig[pos].getD2() | ((segVal >> 2) & 0x1) << dig[pos].getD1();
 8004194:	2327      	movs	r3, #39	; 0x27
 8004196:	18fb      	adds	r3, r7, r3
 8004198:	781b      	ldrb	r3, [r3, #0]
 800419a:	111b      	asrs	r3, r3, #4
 800419c:	2201      	movs	r2, #1
 800419e:	4013      	ands	r3, r2
 80041a0:	001c      	movs	r4, r3
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781a      	ldrb	r2, [r3, #0]
 80041a6:	0013      	movs	r3, r2
 80041a8:	005b      	lsls	r3, r3, #1
 80041aa:	189b      	adds	r3, r3, r2
 80041ac:	3338      	adds	r3, #56	; 0x38
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	18d3      	adds	r3, r2, r3
 80041b2:	3304      	adds	r3, #4
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7ff fda9 	bl	8003d0c <_ZN5Digit5getD2Ev>
 80041ba:	0003      	movs	r3, r0
 80041bc:	409c      	lsls	r4, r3
 80041be:	2327      	movs	r3, #39	; 0x27
 80041c0:	18fb      	adds	r3, r7, r3
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	109b      	asrs	r3, r3, #2
 80041c6:	2201      	movs	r2, #1
 80041c8:	4013      	ands	r3, r2
 80041ca:	001d      	movs	r5, r3
 80041cc:	1dfb      	adds	r3, r7, #7
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	0013      	movs	r3, r2
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	3338      	adds	r3, #56	; 0x38
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	18d3      	adds	r3, r2, r3
 80041dc:	3304      	adds	r3, #4
 80041de:	0018      	movs	r0, r3
 80041e0:	f7ff fd8a 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 80041e4:	0003      	movs	r3, r0
 80041e6:	409d      	lsls	r5, r3
 80041e8:	002b      	movs	r3, r5
 80041ea:	4323      	orrs	r3, r4
 80041ec:	61bb      	str	r3, [r7, #24]
	R6 = ((segVal >> 5) & 0x1) << dig[pos].getD2() | (segVal & 0x1) << dig[pos].getD1();
 80041ee:	2327      	movs	r3, #39	; 0x27
 80041f0:	18fb      	adds	r3, r7, r3
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	115b      	asrs	r3, r3, #5
 80041f6:	2201      	movs	r2, #1
 80041f8:	4013      	ands	r3, r2
 80041fa:	001c      	movs	r4, r3
 80041fc:	1dfb      	adds	r3, r7, #7
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	0013      	movs	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	189b      	adds	r3, r3, r2
 8004206:	3338      	adds	r3, #56	; 0x38
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	18d3      	adds	r3, r2, r3
 800420c:	3304      	adds	r3, #4
 800420e:	0018      	movs	r0, r3
 8004210:	f7ff fd7c 	bl	8003d0c <_ZN5Digit5getD2Ev>
 8004214:	0003      	movs	r3, r0
 8004216:	409c      	lsls	r4, r3
 8004218:	2327      	movs	r3, #39	; 0x27
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2201      	movs	r2, #1
 8004220:	4013      	ands	r3, r2
 8004222:	001d      	movs	r5, r3
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781a      	ldrb	r2, [r3, #0]
 8004228:	0013      	movs	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	189b      	adds	r3, r3, r2
 800422e:	3338      	adds	r3, #56	; 0x38
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	18d3      	adds	r3, r2, r3
 8004234:	3304      	adds	r3, #4
 8004236:	0018      	movs	r0, r3
 8004238:	f7ff fd5e 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 800423c:	0003      	movs	r3, r0
 800423e:	409d      	lsls	r5, r3
 8004240:	002b      	movs	r3, r5
 8004242:	4323      	orrs	r3, r4
 8004244:	617b      	str	r3, [r7, #20]


	uint32_t MASK = 0xFFFFFFFF;
 8004246:	2301      	movs	r3, #1
 8004248:	425b      	negs	r3, r3
 800424a:	613b      	str	r3, [r7, #16]

	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER0, MASK & ~(1 << dig[pos].getD2()), R0);
 800424c:	68fc      	ldr	r4, [r7, #12]
 800424e:	1dfb      	adds	r3, r7, #7
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	0013      	movs	r3, r2
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	189b      	adds	r3, r3, r2
 8004258:	3338      	adds	r3, #56	; 0x38
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	18d3      	adds	r3, r2, r3
 800425e:	3304      	adds	r3, #4
 8004260:	0018      	movs	r0, r3
 8004262:	f7ff fd53 	bl	8003d0c <_ZN5Digit5getD2Ev>
 8004266:	0003      	movs	r3, r0
 8004268:	001a      	movs	r2, r3
 800426a:	2301      	movs	r3, #1
 800426c:	4093      	lsls	r3, r2
 800426e:	43db      	mvns	r3, r3
 8004270:	001a      	movs	r2, r3
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	401a      	ands	r2, r3
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	2100      	movs	r1, #0
 800427a:	0020      	movs	r0, r4
 800427c:	f7fc fd60 	bl	8000d40 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER2, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R2);
 8004280:	68fd      	ldr	r5, [r7, #12]
 8004282:	1dfb      	adds	r3, r7, #7
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	0013      	movs	r3, r2
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	189b      	adds	r3, r3, r2
 800428c:	3338      	adds	r3, #56	; 0x38
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	18d3      	adds	r3, r2, r3
 8004292:	3304      	adds	r3, #4
 8004294:	0018      	movs	r0, r3
 8004296:	f7ff fd39 	bl	8003d0c <_ZN5Digit5getD2Ev>
 800429a:	0003      	movs	r3, r0
 800429c:	001a      	movs	r2, r3
 800429e:	2301      	movs	r3, #1
 80042a0:	4093      	lsls	r3, r2
 80042a2:	43db      	mvns	r3, r3
 80042a4:	001a      	movs	r2, r3
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4013      	ands	r3, r2
 80042aa:	001c      	movs	r4, r3
 80042ac:	1dfb      	adds	r3, r7, #7
 80042ae:	781a      	ldrb	r2, [r3, #0]
 80042b0:	0013      	movs	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	189b      	adds	r3, r3, r2
 80042b6:	3338      	adds	r3, #56	; 0x38
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	18d3      	adds	r3, r2, r3
 80042bc:	3304      	adds	r3, #4
 80042be:	0018      	movs	r0, r3
 80042c0:	f7ff fd1a 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 80042c4:	0003      	movs	r3, r0
 80042c6:	001a      	movs	r2, r3
 80042c8:	2301      	movs	r3, #1
 80042ca:	4093      	lsls	r3, r2
 80042cc:	43db      	mvns	r3, r3
 80042ce:	4023      	ands	r3, r4
 80042d0:	001a      	movs	r2, r3
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	2102      	movs	r1, #2
 80042d6:	0028      	movs	r0, r5
 80042d8:	f7fc fd32 	bl	8000d40 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER4, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R4);
 80042dc:	68fd      	ldr	r5, [r7, #12]
 80042de:	1dfb      	adds	r3, r7, #7
 80042e0:	781a      	ldrb	r2, [r3, #0]
 80042e2:	0013      	movs	r3, r2
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	3338      	adds	r3, #56	; 0x38
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	18d3      	adds	r3, r2, r3
 80042ee:	3304      	adds	r3, #4
 80042f0:	0018      	movs	r0, r3
 80042f2:	f7ff fd0b 	bl	8003d0c <_ZN5Digit5getD2Ev>
 80042f6:	0003      	movs	r3, r0
 80042f8:	001a      	movs	r2, r3
 80042fa:	2301      	movs	r3, #1
 80042fc:	4093      	lsls	r3, r2
 80042fe:	43db      	mvns	r3, r3
 8004300:	001a      	movs	r2, r3
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	4013      	ands	r3, r2
 8004306:	001c      	movs	r4, r3
 8004308:	1dfb      	adds	r3, r7, #7
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	0013      	movs	r3, r2
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	189b      	adds	r3, r3, r2
 8004312:	3338      	adds	r3, #56	; 0x38
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	18d3      	adds	r3, r2, r3
 8004318:	3304      	adds	r3, #4
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fcec 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 8004320:	0003      	movs	r3, r0
 8004322:	001a      	movs	r2, r3
 8004324:	2301      	movs	r3, #1
 8004326:	4093      	lsls	r3, r2
 8004328:	43db      	mvns	r3, r3
 800432a:	4023      	ands	r3, r4
 800432c:	001a      	movs	r2, r3
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	2104      	movs	r1, #4
 8004332:	0028      	movs	r0, r5
 8004334:	f7fc fd04 	bl	8000d40 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER6, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R6);
 8004338:	68fd      	ldr	r5, [r7, #12]
 800433a:	1dfb      	adds	r3, r7, #7
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	0013      	movs	r3, r2
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	189b      	adds	r3, r3, r2
 8004344:	3338      	adds	r3, #56	; 0x38
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	18d3      	adds	r3, r2, r3
 800434a:	3304      	adds	r3, #4
 800434c:	0018      	movs	r0, r3
 800434e:	f7ff fcdd 	bl	8003d0c <_ZN5Digit5getD2Ev>
 8004352:	0003      	movs	r3, r0
 8004354:	001a      	movs	r2, r3
 8004356:	2301      	movs	r3, #1
 8004358:	4093      	lsls	r3, r2
 800435a:	43db      	mvns	r3, r3
 800435c:	001a      	movs	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4013      	ands	r3, r2
 8004362:	001c      	movs	r4, r3
 8004364:	1dfb      	adds	r3, r7, #7
 8004366:	781a      	ldrb	r2, [r3, #0]
 8004368:	0013      	movs	r3, r2
 800436a:	005b      	lsls	r3, r3, #1
 800436c:	189b      	adds	r3, r3, r2
 800436e:	3338      	adds	r3, #56	; 0x38
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	18d3      	adds	r3, r2, r3
 8004374:	3304      	adds	r3, #4
 8004376:	0018      	movs	r0, r3
 8004378:	f7ff fcbe 	bl	8003cf8 <_ZN5Digit5getD1Ev>
 800437c:	0003      	movs	r3, r0
 800437e:	001a      	movs	r2, r3
 8004380:	2301      	movs	r3, #1
 8004382:	4093      	lsls	r3, r2
 8004384:	43db      	mvns	r3, r3
 8004386:	4023      	ands	r3, r4
 8004388:	001a      	movs	r2, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2106      	movs	r1, #6
 800438e:	0028      	movs	r0, r5
 8004390:	f7fc fcd6 	bl	8000d40 <HAL_LCD_Write>

	HAL_LCD_UpdateDisplayRequest (&lcdHandler);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fc fd93 	bl	8000ec2 <HAL_LCD_UpdateDisplayRequest>
}
 800439c:	46c0      	nop			; (mov r8, r8)
 800439e:	46bd      	mov	sp, r7
 80043a0:	b00a      	add	sp, #40	; 0x28
 80043a2:	bdb0      	pop	{r4, r5, r7, pc}

080043a4 <_ZN3Lcd13print2ndColonEb>:
	uint32_t MASK = 0xFFFFFFFF;
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER0, MASK & ~(status << 6), R0);
	HAL_LCD_UpdateDisplayRequest (&lcdHandler);
}

void Lcd::print2ndColon(bool status){
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	000a      	movs	r2, r1
 80043ae:	1cfb      	adds	r3, r7, #3
 80043b0:	701a      	strb	r2, [r3, #0]
	uint32_t R0 = (1<<24);
 80043b2:	2380      	movs	r3, #128	; 0x80
 80043b4:	045b      	lsls	r3, r3, #17
 80043b6:	60fb      	str	r3, [r7, #12]
	uint32_t MASK = 0xFFFFFFFF;
 80043b8:	2301      	movs	r3, #1
 80043ba:	425b      	negs	r3, r3
 80043bc:	60bb      	str	r3, [r7, #8]
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER0, MASK & ~(status << 24), R0);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	1cfb      	adds	r3, r7, #3
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	061b      	lsls	r3, r3, #24
 80043c6:	43db      	mvns	r3, r3
 80043c8:	001a      	movs	r2, r3
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	401a      	ands	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2100      	movs	r1, #0
 80043d2:	f7fc fcb5 	bl	8000d40 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest (&lcdHandler);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0018      	movs	r0, r3
 80043da:	f7fc fd72 	bl	8000ec2 <HAL_LCD_UpdateDisplayRequest>
}
 80043de:	46c0      	nop			; (mov r8, r8)
 80043e0:	46bd      	mov	sp, r7
 80043e2:	b004      	add	sp, #16
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <_ZN3Lcd8printDotEb>:

void Lcd::printDot(bool status){
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
 80043ee:	000a      	movs	r2, r1
 80043f0:	1cfb      	adds	r3, r7, #3
 80043f2:	701a      	strb	r2, [r3, #0]
	uint32_t R0 = (1<<14);
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	01db      	lsls	r3, r3, #7
 80043f8:	60fb      	str	r3, [r7, #12]
	uint32_t MASK = 0xFFFFFFFF;
 80043fa:	2301      	movs	r3, #1
 80043fc:	425b      	negs	r3, r3
 80043fe:	60bb      	str	r3, [r7, #8]
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER0, MASK & ~(status << 14), R0);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	1cfb      	adds	r3, r7, #3
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	039b      	lsls	r3, r3, #14
 8004408:	43db      	mvns	r3, r3
 800440a:	001a      	movs	r2, r3
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	401a      	ands	r2, r3
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2100      	movs	r1, #0
 8004414:	f7fc fc94 	bl	8000d40 <HAL_LCD_Write>
	HAL_LCD_UpdateDisplayRequest (&lcdHandler);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	0018      	movs	r0, r3
 800441c:	f7fc fd51 	bl	8000ec2 <HAL_LCD_UpdateDisplayRequest>
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b004      	add	sp, #16
 8004426:	bd80      	pop	{r7, pc}

08004428 <_ZN11MotoCounter4initEv>:

class MotoCounter: public IWtp3Device {
public:
	MotoCounter();
	virtual ~MotoCounter();
	void init(){}
 8004428:	b580      	push	{r7, lr}
 800442a:	b082      	sub	sp, #8
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	46c0      	nop			; (mov r8, r8)
 8004432:	46bd      	mov	sp, r7
 8004434:	b002      	add	sp, #8
 8004436:	bd80      	pop	{r7, pc}

08004438 <_ZN11MotoCounter6updateEv>:
	void update(){}
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	46bd      	mov	sp, r7
 8004444:	b002      	add	sp, #8
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZN11MotoCounter15getDeviceNumberEv>:
	uint16_t getDeviceNumber() { return 1; }
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	2301      	movs	r3, #1
 8004452:	0018      	movs	r0, r3
 8004454:	46bd      	mov	sp, r7
 8004456:	b002      	add	sp, #8
 8004458:	bd80      	pop	{r7, pc}

0800445a <_ZN11MotoCounter10sendNeededEv>:
	bool sendNeeded(){ return false; }
 800445a:	b580      	push	{r7, lr}
 800445c:	b082      	sub	sp, #8
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
 8004462:	2300      	movs	r3, #0
 8004464:	0018      	movs	r0, r3
 8004466:	46bd      	mov	sp, r7
 8004468:	b002      	add	sp, #8
 800446a:	bd80      	pop	{r7, pc}

0800446c <_ZN11MotoCounter11createFrameEP10Wtp3Driver>:
	void createFrame(Wtp3Driver* driver){}
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b002      	add	sp, #8
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ZN11MotoCounter12receiveFrameEP10Wtp3Driver>:
	ERecFrameResult receiveFrame(Wtp3Driver* driver){ return REC_FRAME_NO_ANSWER; }
 800447e:	b580      	push	{r7, lr}
 8004480:	b082      	sub	sp, #8
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
 8004488:	2300      	movs	r3, #0
 800448a:	0018      	movs	r0, r3
 800448c:	46bd      	mov	sp, r7
 800448e:	b002      	add	sp, #8
 8004490:	bd80      	pop	{r7, pc}
	...

08004494 <_ZN11IWtp3DeviceC1Ev>:
#include "wtp3driver.h"
#include "wtp3structs.h"

class Wtp3Driver;

class IWtp3Device
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	4a03      	ldr	r2, [pc, #12]	; (80044ac <_ZN11IWtp3DeviceC1Ev+0x18>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	0018      	movs	r0, r3
 80044a6:	46bd      	mov	sp, r7
 80044a8:	b002      	add	sp, #8
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	08005a0c 	.word	0x08005a0c

080044b0 <_ZN11MotoCounterC1Ev>:
 *      Author: marcin
 */

#include "MotoCounter.h"

MotoCounter::MotoCounter() {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	0018      	movs	r0, r3
 80044bc:	f7ff ffea 	bl	8004494 <_ZN11IWtp3DeviceC1Ev>
 80044c0:	4a03      	ldr	r2, [pc, #12]	; (80044d0 <_ZN11MotoCounterC1Ev+0x20>)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	080059e4 	.word	0x080059e4

080044d4 <_ZN11MotoCounterD1Ev>:

MotoCounter::~MotoCounter() {
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	4a03      	ldr	r2, [pc, #12]	; (80044ec <_ZN11MotoCounterD1Ev+0x18>)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	0018      	movs	r0, r3
 80044e6:	46bd      	mov	sp, r7
 80044e8:	b002      	add	sp, #8
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	080059e4 	.word	0x080059e4

080044f0 <_ZN11MotoCounterD0Ev>:
MotoCounter::~MotoCounter() {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
}
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	0018      	movs	r0, r3
 80044fc:	f7ff ffea 	bl	80044d4 <_ZN11MotoCounterD1Ev>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	0018      	movs	r0, r3
 8004504:	f000 fefe 	bl	8005304 <_ZdlPv>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	46bd      	mov	sp, r7
 800450e:	b002      	add	sp, #8
 8004510:	bd80      	pop	{r7, pc}

08004512 <_ZN13VersionScreen4initEP3Lcd>:
 */

#include "VersionScreen.h"
#include "stdlib.h"

void VersionScreen::init(Lcd* lcd) {
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
 800451a:	6039      	str	r1, [r7, #0]
	this->lcd = lcd;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	683a      	ldr	r2, [r7, #0]
 8004520:	601a      	str	r2, [r3, #0]
}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	46bd      	mov	sp, r7
 8004526:	b002      	add	sp, #8
 8004528:	bd80      	pop	{r7, pc}

0800452a <_ZN13VersionScreen12printVerisonEv>:

void VersionScreen::printVerison() {
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
	char buffer[Lcd::NUM_OF_DIG] = {0};
 8004532:	230c      	movs	r3, #12
 8004534:	18fb      	adds	r3, r7, r3
 8004536:	0018      	movs	r0, r3
 8004538:	2308      	movs	r3, #8
 800453a:	001a      	movs	r2, r3
 800453c:	2100      	movs	r1, #0
 800453e:	f000 ff50 	bl	80053e2 <memset>
	itoa(VERSION, buffer, 10);
 8004542:	230c      	movs	r3, #12
 8004544:	18fb      	adds	r3, r7, r3
 8004546:	220a      	movs	r2, #10
 8004548:	0019      	movs	r1, r3
 800454a:	2064      	movs	r0, #100	; 0x64
 800454c:	f000 ff32 	bl	80053b4 <itoa>
	uint8_t i = 0;
 8004550:	2317      	movs	r3, #23
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8004558:	2317      	movs	r3, #23
 800455a:	18fb      	adds	r3, r7, r3
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	220c      	movs	r2, #12
 8004560:	18ba      	adds	r2, r7, r2
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d017      	beq.n	8004598 <_ZN13VersionScreen12printVerisonEv+0x6e>
		lcd->writeChar((uint8_t*)&buffer[i], i+5);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6818      	ldr	r0, [r3, #0]
 800456c:	2317      	movs	r3, #23
 800456e:	18fb      	adds	r3, r7, r3
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	220c      	movs	r2, #12
 8004574:	18ba      	adds	r2, r7, r2
 8004576:	18d1      	adds	r1, r2, r3
 8004578:	2317      	movs	r3, #23
 800457a:	18fb      	adds	r3, r7, r3
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	3305      	adds	r3, #5
 8004580:	b2db      	uxtb	r3, r3
 8004582:	001a      	movs	r2, r3
 8004584:	f7ff fd92 	bl	80040ac <_ZN3Lcd9writeCharEPhh>
		i++;
 8004588:	2317      	movs	r3, #23
 800458a:	18fb      	adds	r3, r7, r3
 800458c:	781a      	ldrb	r2, [r3, #0]
 800458e:	2317      	movs	r3, #23
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	3201      	adds	r2, #1
 8004594:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8004596:	e7df      	b.n	8004558 <_ZN13VersionScreen12printVerisonEv+0x2e>
	}
	lcd->print2ndColon(true);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2101      	movs	r1, #1
 800459e:	0018      	movs	r0, r3
 80045a0:	f7ff ff00 	bl	80043a4 <_ZN3Lcd13print2ndColonEb>
	lcd->printDot(true);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	0018      	movs	r0, r3
 80045ac:	f7ff ff1b 	bl	80043e6 <_ZN3Lcd8printDotEb>

}
 80045b0:	46c0      	nop			; (mov r8, r8)
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b006      	add	sp, #24
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZN6CTimer13classInit1000EPFmvE>:
uint32_t (*CTimer::getTickFunc)() = CTimer::defaultGetTickFunc;

/*---CLASS FUNCTIONS-------------------------------------*/
/*-------------------------------------------------------*/
void CTimer::classInit1000(uint32_t (*getterTick1000)())
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
    getTickFunc = getterTick1000;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <_ZN6CTimer13classInit1000EPFmvE+0x18>)
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	601a      	str	r2, [r3, #0]
}
 80045c6:	46c0      	nop			; (mov r8, r8)
 80045c8:	46bd      	mov	sp, r7
 80045ca:	b002      	add	sp, #8
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	46c0      	nop			; (mov r8, r8)
 80045d0:	20000000 	.word	0x20000000

080045d4 <_ZN6CTimer18defaultGetTickFuncEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::defaultGetTickFunc()
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
    return 0;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	0018      	movs	r0, r3
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <_ZN6CTimer7getTickEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::getTick()
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
    return getTickFunc();
 80045e4:	4b03      	ldr	r3, [pc, #12]	; (80045f4 <_ZN6CTimer7getTickEv+0x14>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4798      	blx	r3
 80045ea:	0003      	movs	r3, r0
}
 80045ec:	0018      	movs	r0, r3
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	46c0      	nop			; (mov r8, r8)
 80045f4:	20000000 	.word	0x20000000

080045f8 <_ZN6CTimerC1ENS_4UnitE>:

/*---OBJECT FUNCTIONS------------------------------------*/
/*-------------------------------------------------------*/
CTimer::CTimer(Unit unit)
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	000a      	movs	r2, r1
 8004602:	1cfb      	adds	r3, r7, #3
 8004604:	701a      	strb	r2, [r3, #0]
{
    setCounterUnit(unit);
 8004606:	1cfb      	adds	r3, r7, #3
 8004608:	781a      	ldrb	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	0011      	movs	r1, r2
 800460e:	0018      	movs	r0, r3
 8004610:	f000 f805 	bl	800461e <_ZN6CTimer14setCounterUnitENS_4UnitE>
}
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	0018      	movs	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	b002      	add	sp, #8
 800461c:	bd80      	pop	{r7, pc}

0800461e <_ZN6CTimer14setCounterUnitENS_4UnitE>:

/*-------------------------------------------------------*/
void CTimer::setCounterUnit(Unit unit)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b082      	sub	sp, #8
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	000a      	movs	r2, r1
 8004628:	1cfb      	adds	r3, r7, #3
 800462a:	701a      	strb	r2, [r3, #0]
    turnOff();
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	0018      	movs	r0, r3
 8004630:	f000 f81c 	bl	800466c <_ZN6CTimer7turnOffEv>
    this->unit = unit;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	1cfa      	adds	r2, r7, #3
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	721a      	strb	r2, [r3, #8]
}
 800463c:	46c0      	nop			; (mov r8, r8)
 800463e:	46bd      	mov	sp, r7
 8004640:	b002      	add	sp, #8
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZN6CTimer5startEm>:
    setCounterUnit(unit);
}

/*-------------------------------------------------------*/
void CTimer::start(uint32_t time)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b082      	sub	sp, #8
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
	timState = TS_DOWNCOUNTING;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	725a      	strb	r2, [r3, #9]
    startTick = getTick();
 8004654:	f7ff ffc4 	bl	80045e0 <_ZN6CTimer7getTickEv>
 8004658:	0002      	movs	r2, r0
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
    duration = time;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	605a      	str	r2, [r3, #4]
}
 8004664:	46c0      	nop			; (mov r8, r8)
 8004666:	46bd      	mov	sp, r7
 8004668:	b002      	add	sp, #8
 800466a:	bd80      	pop	{r7, pc}

0800466c <_ZN6CTimer7turnOffEv>:
    return result;
}

/*-------------------------------------------------------*/
void CTimer::turnOff()
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
    timState = TS_OFF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	725a      	strb	r2, [r3, #9]
}
 800467a:	46c0      	nop			; (mov r8, r8)
 800467c:	46bd      	mov	sp, r7
 800467e:	b002      	add	sp, #8
 8004680:	bd80      	pop	{r7, pc}

08004682 <_ZN6CTimer9isElapsedEv>:
    return !isZero();
}

/*-------------------------------------------------------*/
bool CTimer::isElapsed()
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b084      	sub	sp, #16
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
    bool elapsedFlag = false;
 800468a:	230f      	movs	r3, #15
 800468c:	18fb      	adds	r3, r7, r3
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]

    _updateDowncounter();
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	0018      	movs	r0, r3
 8004696:	f000 f82d 	bl	80046f4 <_ZN6CTimer18_updateDowncounterEv>
    switch(timState)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	7a5b      	ldrb	r3, [r3, #9]
 800469e:	2b02      	cmp	r3, #2
 80046a0:	d003      	beq.n	80046aa <_ZN6CTimer9isElapsedEv+0x28>
 80046a2:	dc07      	bgt.n	80046b4 <_ZN6CTimer9isElapsedEv+0x32>
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db06      	blt.n	80046b6 <_ZN6CTimer9isElapsedEv+0x34>
        elapsedFlag = true;
        break;
    case TS_OFF:
    case TS_DOWNCOUNTING:
    case TS_FREE_RUN:
        break;
 80046a8:	e004      	b.n	80046b4 <_ZN6CTimer9isElapsedEv+0x32>
        elapsedFlag = true;
 80046aa:	230f      	movs	r3, #15
 80046ac:	18fb      	adds	r3, r7, r3
 80046ae:	2201      	movs	r2, #1
 80046b0:	701a      	strb	r2, [r3, #0]
        break;
 80046b2:	e000      	b.n	80046b6 <_ZN6CTimer9isElapsedEv+0x34>
        break;
 80046b4:	46c0      	nop			; (mov r8, r8)
    }
    return elapsedFlag;
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	781b      	ldrb	r3, [r3, #0]
}
 80046bc:	0018      	movs	r0, r3
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <_ZN6CTimer18_getTimeSinceStartEv>:
}

//--------PRIVATE----------------------------------------------------
/*-------------------------------------------------------*/
uint32_t CTimer::_getTimeSinceStart()
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    uint32_t ticksDuration;
    uint32_t unitsDuration;

    ticksDuration = getTick() - startTick;
 80046cc:	f7ff ff88 	bl	80045e0 <_ZN6CTimer7getTickEv>
 80046d0:	0002      	movs	r2, r0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	60fb      	str	r3, [r7, #12]
    unitsDuration = _ticks2timerUnits(ticksDuration);
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	0011      	movs	r1, r2
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 f86f 	bl	80047c4 <_ZN6CTimer17_ticks2timerUnitsEm>
 80046e6:	0003      	movs	r3, r0
 80046e8:	60bb      	str	r3, [r7, #8]

    return unitsDuration;
 80046ea:	68bb      	ldr	r3, [r7, #8]
}
 80046ec:	0018      	movs	r0, r3
 80046ee:	46bd      	mov	sp, r7
 80046f0:	b004      	add	sp, #16
 80046f2:	bd80      	pop	{r7, pc}

080046f4 <_ZN6CTimer18_updateDowncounterEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::_updateDowncounter()
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
    uint32_t timeSinceStart = 0;
 80046fc:	2300      	movs	r3, #0
 80046fe:	60fb      	str	r3, [r7, #12]

    switch(timState)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	7a5b      	ldrb	r3, [r3, #9]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d003      	beq.n	8004710 <_ZN6CTimer18_updateDowncounterEv+0x1c>
 8004708:	dd14      	ble.n	8004734 <_ZN6CTimer18_updateDowncounterEv+0x40>
 800470a:	2b03      	cmp	r3, #3
 800470c:	dc15      	bgt.n	800473a <_ZN6CTimer18_updateDowncounterEv+0x46>
            timState = TS_ELAPSED;
        }
        break;
    case TS_ELAPSED:
    case TS_FREE_RUN:
        break;
 800470e:	e014      	b.n	800473a <_ZN6CTimer18_updateDowncounterEv+0x46>
        timeSinceStart = _getTimeSinceStart();
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	0018      	movs	r0, r3
 8004714:	f7ff ffd6 	bl	80046c4 <_ZN6CTimer18_getTimeSinceStartEv>
 8004718:	0003      	movs	r3, r0
 800471a:	60fb      	str	r3, [r7, #12]
        if (_isTimeElapsed(timeSinceStart))
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	0011      	movs	r1, r2
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f80e 	bl	8004744 <_ZN6CTimer14_isTimeElapsedEm>
 8004728:	1e03      	subs	r3, r0, #0
 800472a:	d005      	beq.n	8004738 <_ZN6CTimer18_updateDowncounterEv+0x44>
            timState = TS_ELAPSED;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	725a      	strb	r2, [r3, #9]
        break;
 8004732:	e001      	b.n	8004738 <_ZN6CTimer18_updateDowncounterEv+0x44>
        break;
 8004734:	46c0      	nop			; (mov r8, r8)
 8004736:	e000      	b.n	800473a <_ZN6CTimer18_updateDowncounterEv+0x46>
        break;
 8004738:	46c0      	nop			; (mov r8, r8)
    }

    return timeSinceStart;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	0018      	movs	r0, r3
 800473e:	46bd      	mov	sp, r7
 8004740:	b004      	add	sp, #16
 8004742:	bd80      	pop	{r7, pc}

08004744 <_ZN6CTimer14_isTimeElapsedEm>:
    return result;
}

/*-------------------------------------------------------*/
bool CTimer::_isTimeElapsed(uint32_t _timeSinceStart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
    return _timeSinceStart >= duration;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	6839      	ldr	r1, [r7, #0]
 8004754:	2300      	movs	r3, #0
 8004756:	4291      	cmp	r1, r2
 8004758:	415b      	adcs	r3, r3
 800475a:	b2db      	uxtb	r3, r3
}
 800475c:	0018      	movs	r0, r3
 800475e:	46bd      	mov	sp, r7
 8004760:	b002      	add	sp, #8
 8004762:	bd80      	pop	{r7, pc}

08004764 <_ZN6CTimer13getFactor1000ENS_4UnitE>:

/*-------------------------------------------------------*/
uint32_t CTimer::getFactor1000(Unit unit)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b084      	sub	sp, #16
 8004768:	af00      	add	r7, sp, #0
 800476a:	0002      	movs	r2, r0
 800476c:	1dfb      	adds	r3, r7, #7
 800476e:	701a      	strb	r2, [r3, #0]
    uint32_t factor;

    switch (unit)
 8004770:	1dfb      	adds	r3, r7, #7
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	2b05      	cmp	r3, #5
 8004776:	d817      	bhi.n	80047a8 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x44>
 8004778:	009a      	lsls	r2, r3, #2
 800477a:	4b0f      	ldr	r3, [pc, #60]	; (80047b8 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x54>)
 800477c:	18d3      	adds	r3, r2, r3
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	469f      	mov	pc, r3
    {
        case UNIT_MILISEC:
            //0.001s <-> 0.001s
            factor = 1U;
 8004782:	2301      	movs	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
            break;
 8004786:	e012      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_HUNDRETHS_SEC:
            //0.001s <-> 0.01s
            factor = 10U;
 8004788:	230a      	movs	r3, #10
 800478a:	60fb      	str	r3, [r7, #12]
            break;
 800478c:	e00f      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_TENTHS_SEC:
            //0.001s <-> 0.1s
            factor = 100U;
 800478e:	2364      	movs	r3, #100	; 0x64
 8004790:	60fb      	str	r3, [r7, #12]
            break;
 8004792:	e00c      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_SEC:
            //0.001s <-> 1s
            factor = 1000U;
 8004794:	23fa      	movs	r3, #250	; 0xfa
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	60fb      	str	r3, [r7, #12]
            break;
 800479a:	e008      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_MIN:
            //0.001s <-> 1min
            factor = 60000U;
 800479c:	4b07      	ldr	r3, [pc, #28]	; (80047bc <_ZN6CTimer13getFactor1000ENS_4UnitE+0x58>)
 800479e:	60fb      	str	r3, [r7, #12]
            break;
 80047a0:	e005      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_HOUR:
            //0.001s <-> 1hour
            factor = 3600000U;
 80047a2:	4b07      	ldr	r3, [pc, #28]	; (80047c0 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5c>)
 80047a4:	60fb      	str	r3, [r7, #12]
            break;
 80047a6:	e002      	b.n	80047ae <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        default:
            factor = 1U;
 80047a8:	2301      	movs	r3, #1
 80047aa:	60fb      	str	r3, [r7, #12]
            break;
 80047ac:	46c0      	nop			; (mov r8, r8)
    }
    return factor;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	0018      	movs	r0, r3
 80047b2:	46bd      	mov	sp, r7
 80047b4:	b004      	add	sp, #16
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	08005a24 	.word	0x08005a24
 80047bc:	0000ea60 	.word	0x0000ea60
 80047c0:	0036ee80 	.word	0x0036ee80

080047c4 <_ZN6CTimer17_ticks2timerUnitsEm>:
    return timerUnits * getFactor1000(unit);
}

/*-------------------------------------------------------*/
uint32_t CTimer::_ticks2timerUnits(uint32_t ticks)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
    return ticks / getFactor1000(unit);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	7a1b      	ldrb	r3, [r3, #8]
 80047d2:	0018      	movs	r0, r3
 80047d4:	f7ff ffc6 	bl	8004764 <_ZN6CTimer13getFactor1000ENS_4UnitE>
 80047d8:	0003      	movs	r3, r0
 80047da:	0019      	movs	r1, r3
 80047dc:	6838      	ldr	r0, [r7, #0]
 80047de:	f7fb fc93 	bl	8000108 <__udivsi3>
 80047e2:	0003      	movs	r3, r0
}
 80047e4:	0018      	movs	r0, r3
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b002      	add	sp, #8
 80047ea:	bd80      	pop	{r7, pc}

080047ec <_ZN14CControlerInfoC1Ev>:
EEPROMVar CControlerInfo::m_eepromInitialization = EEPROMVar(sizeof(uint8_t));
EEPROMVar CControlerInfo::m_eeppromMotominutes = EEPROMVar(sizeof(uint8_t));
EEPROMVar CControlerInfo::m_eeppromMotohours = EEPROMVar(sizeof(MOTOHOUR));
EEPROMVar CControlerInfo::m_eeppromMaxMotohours = EEPROMVar(sizeof(MOTOHOUR));

CControlerInfo::CControlerInfo() {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	if (getStatusInitialization() != INITIATED) {
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	0018      	movs	r0, r3
 80047f8:	f000 f82a 	bl	8004850 <_ZN14CControlerInfo23getStatusInitializationEv>
 80047fc:	0003      	movs	r3, r0
 80047fe:	3b02      	subs	r3, #2
 8004800:	1e5a      	subs	r2, r3, #1
 8004802:	4193      	sbcs	r3, r2
 8004804:	b2db      	uxtb	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	d015      	beq.n	8004836 <_ZN14CControlerInfoC1Ev+0x4a>
		m_eepromInitialization = (uint8_t) INITIATED;
 800480a:	4b0d      	ldr	r3, [pc, #52]	; (8004840 <_ZN14CControlerInfoC1Ev+0x54>)
 800480c:	2102      	movs	r1, #2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f990 	bl	8003b34 <_ZN9EEPROMVaraSEh>
		m_eeppromMotohours = (MOTOHOUR)0;
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <_ZN14CControlerInfoC1Ev+0x58>)
 8004816:	2100      	movs	r1, #0
 8004818:	0018      	movs	r0, r3
 800481a:	f7ff f9ab 	bl	8003b74 <_ZN9EEPROMVaraSEt>
		m_eeppromMotominutes = (uint8_t)0;
 800481e:	4b0a      	ldr	r3, [pc, #40]	; (8004848 <_ZN14CControlerInfoC1Ev+0x5c>)
 8004820:	2100      	movs	r1, #0
 8004822:	0018      	movs	r0, r3
 8004824:	f7ff f986 	bl	8003b34 <_ZN9EEPROMVaraSEh>
		m_eeppromMaxMotohours = (MOTOHOUR)400;
 8004828:	23c8      	movs	r3, #200	; 0xc8
 800482a:	005a      	lsls	r2, r3, #1
 800482c:	4b07      	ldr	r3, [pc, #28]	; (800484c <_ZN14CControlerInfoC1Ev+0x60>)
 800482e:	0011      	movs	r1, r2
 8004830:	0018      	movs	r0, r3
 8004832:	f7ff f99f 	bl	8003b74 <_ZN9EEPROMVaraSEt>
	}
}
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	46bd      	mov	sp, r7
 800483c:	b002      	add	sp, #8
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000228 	.word	0x20000228
 8004844:	20000238 	.word	0x20000238
 8004848:	20000230 	.word	0x20000230
 800484c:	20000240 	.word	0x20000240

08004850 <_ZN14CControlerInfo23getStatusInitializationEv>:

CControlerInfo::TStatusInitialization CControlerInfo::getStatusInitialization() {
 8004850:	b590      	push	{r4, r7, lr}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = m_eepromInitialization;
 8004858:	230f      	movs	r3, #15
 800485a:	18fc      	adds	r4, r7, r3
 800485c:	4b06      	ldr	r3, [pc, #24]	; (8004878 <_ZN14CControlerInfo23getStatusInitializationEv+0x28>)
 800485e:	0018      	movs	r0, r3
 8004860:	f7ff f9a8 	bl	8003bb4 <_ZN9EEPROMVarcvhEv>
 8004864:	0003      	movs	r3, r0
 8004866:	7023      	strb	r3, [r4, #0]
	return (TStatusInitialization) temp;
 8004868:	230f      	movs	r3, #15
 800486a:	18fb      	adds	r3, r7, r3
 800486c:	781b      	ldrb	r3, [r3, #0]
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	b005      	add	sp, #20
 8004874:	bd90      	pop	{r4, r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	20000228 	.word	0x20000228

0800487c <_ZN14CControlerInfo12getMotohoursEv>:

void CControlerInfo::deinitialization() {
	m_eepromInitialization = (uint8_t) NO_INITIATED;
}

MOTOHOUR CControlerInfo::getMotohours() {
 800487c:	b590      	push	{r4, r7, lr}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
	MOTOHOUR temp;
	temp = m_eeppromMotohours;
 8004884:	230e      	movs	r3, #14
 8004886:	18fc      	adds	r4, r7, r3
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <_ZN14CControlerInfo12getMotohoursEv+0x28>)
 800488a:	0018      	movs	r0, r3
 800488c:	f7ff f9ae 	bl	8003bec <_ZN9EEPROMVarcvtEv>
 8004890:	0003      	movs	r3, r0
 8004892:	8023      	strh	r3, [r4, #0]
	return temp;
 8004894:	230e      	movs	r3, #14
 8004896:	18fb      	adds	r3, r7, r3
 8004898:	881b      	ldrh	r3, [r3, #0]
}
 800489a:	0018      	movs	r0, r3
 800489c:	46bd      	mov	sp, r7
 800489e:	b005      	add	sp, #20
 80048a0:	bd90      	pop	{r4, r7, pc}
 80048a2:	46c0      	nop			; (mov r8, r8)
 80048a4:	20000238 	.word	0x20000238

080048a8 <_ZN14CControlerInfo12setMotohoursEt>:

void CControlerInfo::setMotohours(MOTOHOUR val) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	000a      	movs	r2, r1
 80048b2:	1cbb      	adds	r3, r7, #2
 80048b4:	801a      	strh	r2, [r3, #0]
	m_eeppromMotohours = val;
 80048b6:	1cbb      	adds	r3, r7, #2
 80048b8:	881a      	ldrh	r2, [r3, #0]
 80048ba:	4b04      	ldr	r3, [pc, #16]	; (80048cc <_ZN14CControlerInfo12setMotohoursEt+0x24>)
 80048bc:	0011      	movs	r1, r2
 80048be:	0018      	movs	r0, r3
 80048c0:	f7ff f958 	bl	8003b74 <_ZN9EEPROMVaraSEt>
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000238 	.word	0x20000238

080048d0 <_ZN14CControlerInfo14getMotominutesEv>:

uint8_t CControlerInfo::getMotominutes() {
 80048d0:	b590      	push	{r4, r7, lr}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = m_eeppromMotominutes;
 80048d8:	230f      	movs	r3, #15
 80048da:	18fc      	adds	r4, r7, r3
 80048dc:	4b06      	ldr	r3, [pc, #24]	; (80048f8 <_ZN14CControlerInfo14getMotominutesEv+0x28>)
 80048de:	0018      	movs	r0, r3
 80048e0:	f7ff f968 	bl	8003bb4 <_ZN9EEPROMVarcvhEv>
 80048e4:	0003      	movs	r3, r0
 80048e6:	7023      	strb	r3, [r4, #0]
	return temp;
 80048e8:	230f      	movs	r3, #15
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	781b      	ldrb	r3, [r3, #0]
}
 80048ee:	0018      	movs	r0, r3
 80048f0:	46bd      	mov	sp, r7
 80048f2:	b005      	add	sp, #20
 80048f4:	bd90      	pop	{r4, r7, pc}
 80048f6:	46c0      	nop			; (mov r8, r8)
 80048f8:	20000230 	.word	0x20000230

080048fc <_ZN14CControlerInfo14setMotominutesEh>:

void CControlerInfo::setMotominutes(uint8_t val) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	000a      	movs	r2, r1
 8004906:	1cfb      	adds	r3, r7, #3
 8004908:	701a      	strb	r2, [r3, #0]
	m_eeppromMotominutes = val;
 800490a:	1cfb      	adds	r3, r7, #3
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	4b04      	ldr	r3, [pc, #16]	; (8004920 <_ZN14CControlerInfo14setMotominutesEh+0x24>)
 8004910:	0011      	movs	r1, r2
 8004912:	0018      	movs	r0, r3
 8004914:	f7ff f90e 	bl	8003b34 <_ZN9EEPROMVaraSEh>
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}
 8004920:	20000230 	.word	0x20000230

08004924 <_Z41__static_initialization_and_destruction_0ii>:
	return m_cpuid_2;
}

uint32_t CControlerInfo::getCpuId_3() {
	return m_cpuid_3;
}
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b01      	cmp	r3, #1
 8004932:	d123      	bne.n	800497c <_Z41__static_initialization_and_destruction_0ii+0x58>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	4a13      	ldr	r2, [pc, #76]	; (8004984 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d11f      	bne.n	800497c <_Z41__static_initialization_and_destruction_0ii+0x58>
uint32_t CControlerInfo::m_cpuid_1 = *(uint32_t *) 0x1FF80050;
 800493c:	4b12      	ldr	r3, [pc, #72]	; (8004988 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8004942:	601a      	str	r2, [r3, #0]
uint32_t CControlerInfo::m_cpuid_2 = *(uint32_t *) 0x1FF80054;
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b12      	ldr	r3, [pc, #72]	; (8004994 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800494a:	601a      	str	r2, [r3, #0]
uint32_t CControlerInfo::m_cpuid_3 = *(uint32_t *) 0x1FF80064;
 800494c:	4b12      	ldr	r3, [pc, #72]	; (8004998 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b12      	ldr	r3, [pc, #72]	; (800499c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8004952:	601a      	str	r2, [r3, #0]
EEPROMVar CControlerInfo::m_eepromInitialization = EEPROMVar(sizeof(uint8_t));
 8004954:	4b12      	ldr	r3, [pc, #72]	; (80049a0 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8004956:	2101      	movs	r1, #1
 8004958:	0018      	movs	r0, r3
 800495a:	f7ff f8cd 	bl	8003af8 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMotominutes = EEPROMVar(sizeof(uint8_t));
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8004960:	2101      	movs	r1, #1
 8004962:	0018      	movs	r0, r3
 8004964:	f7ff f8c8 	bl	8003af8 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMotohours = EEPROMVar(sizeof(MOTOHOUR));
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800496a:	2102      	movs	r1, #2
 800496c:	0018      	movs	r0, r3
 800496e:	f7ff f8c3 	bl	8003af8 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMaxMotohours = EEPROMVar(sizeof(MOTOHOUR));
 8004972:	4b0e      	ldr	r3, [pc, #56]	; (80049ac <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004974:	2102      	movs	r1, #2
 8004976:	0018      	movs	r0, r3
 8004978:	f7ff f8be 	bl	8003af8 <_ZN9EEPROMVarC1Et>
}
 800497c:	46c0      	nop			; (mov r8, r8)
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	0000ffff 	.word	0x0000ffff
 8004988:	1ff80050 	.word	0x1ff80050
 800498c:	2000021c 	.word	0x2000021c
 8004990:	1ff80054 	.word	0x1ff80054
 8004994:	20000220 	.word	0x20000220
 8004998:	1ff80064 	.word	0x1ff80064
 800499c:	20000224 	.word	0x20000224
 80049a0:	20000228 	.word	0x20000228
 80049a4:	20000230 	.word	0x20000230
 80049a8:	20000238 	.word	0x20000238
 80049ac:	20000240 	.word	0x20000240

080049b0 <_GLOBAL__sub_I__ZN14CControlerInfo9m_cpuid_1E>:
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	4b03      	ldr	r3, [pc, #12]	; (80049c4 <_GLOBAL__sub_I__ZN14CControlerInfo9m_cpuid_1E+0x14>)
 80049b6:	0019      	movs	r1, r3
 80049b8:	2001      	movs	r0, #1
 80049ba:	f7ff ffb3 	bl	8004924 <_Z41__static_initialization_and_destruction_0ii>
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	0000ffff 	.word	0x0000ffff

080049c8 <_ZN6Driver4initEv>:

const uint8_t Driver::MINUTE = 60;
const uint8_t Driver::TIME_UPDATE_MINUTES_EEPROM = 15;
const uint8_t Driver::TIME_UPDATE_HOURS_EEPROM = 60;

void Driver::init() {
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b088      	sub	sp, #32
 80049cc:	af04      	add	r7, sp, #16
 80049ce:	6078      	str	r0, [r7, #4]
	lcd.init();
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3308      	adds	r3, #8
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7ff f9a3 	bl	8003d20 <_ZN3Lcd4initEv>
	lcd.clear();
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	3308      	adds	r3, #8
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff fb58 	bl	8004094 <_ZN3Lcd5clearEv>
	alarm.init(BUZZER_PORT, BUZZER_PIN);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	335c      	adds	r3, #92	; 0x5c
 80049e8:	0018      	movs	r0, r3
 80049ea:	2380      	movs	r3, #128	; 0x80
 80049ec:	015b      	lsls	r3, r3, #5
 80049ee:	4924      	ldr	r1, [pc, #144]	; (8004a80 <_ZN6Driver4initEv+0xb8>)
 80049f0:	001a      	movs	r2, r3
 80049f2:	f7ff f843 	bl	8003a7c <_ZN5Alarm4initEP12GPIO_TypeDeft>
	actualScreen = MOTOHOURS;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	22a4      	movs	r2, #164	; 0xa4
 80049fa:	2102      	movs	r1, #2
 80049fc:	5499      	strb	r1, [r3, r2]
	actualMotohours = controlerInfo.getMotohours();
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	3307      	adds	r3, #7
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7ff ff3a 	bl	800487c <_ZN14CControlerInfo12getMotohoursEv>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	001a      	movs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	809a      	strh	r2, [r3, #4]
	actualMotominutes = controlerInfo.getMotominutes();
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3307      	adds	r3, #7
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7ff ff5b 	bl	80048d0 <_ZN14CControlerInfo14getMotominutesEv>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	719a      	strb	r2, [r3, #6]

	minuteTimer.start(MINUTE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3364      	adds	r3, #100	; 0x64
 8004a26:	213c      	movs	r1, #60	; 0x3c
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f7ff fe0b 	bl	8004644 <_ZN6CTimer5startEm>

	versionScreen.init(&lcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	33a8      	adds	r3, #168	; 0xa8
 8004a32:	001a      	movs	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3308      	adds	r3, #8
 8004a38:	0019      	movs	r1, r3
 8004a3a:	0010      	movs	r0, r2
 8004a3c:	f7ff fd69 	bl	8004512 <_ZN13VersionScreen4initEP3Lcd>


	wtp3Devices[0] = &motoCounter;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3370      	adds	r3, #112	; 0x70
 8004a44:	001a      	movs	r2, r3
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	675a      	str	r2, [r3, #116]	; 0x74
	wtp_address_gen_init();
 8004a4a:	f7fe ff7f 	bl	800394c <_Z20wtp_address_gen_initv>
	uint32_t address = wtp_address_gen_get_address();
 8004a4e:	f7fe ff90 	bl	8003972 <_Z27wtp_address_gen_get_addressv>
 8004a52:	0003      	movs	r3, r0
 8004a54:	60fb      	str	r3, [r7, #12]
	wtp3Driver.init(wtp3Devices, 1, address, 1, RECEIVE_MODE_CONTINUOUS, 170);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3378      	adds	r3, #120	; 0x78
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	3374      	adds	r3, #116	; 0x74
 8004a60:	0019      	movs	r1, r3
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	23aa      	movs	r3, #170	; 0xaa
 8004a66:	9302      	str	r3, [sp, #8]
 8004a68:	2302      	movs	r3, #2
 8004a6a:	9301      	str	r3, [sp, #4]
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	0013      	movs	r3, r2
 8004a72:	2201      	movs	r2, #1
 8004a74:	f7fe fe4e 	bl	8003714 <_ZN10Wtp3Driver4initEPP11IWtp3Devicetmt12EReceiveModeh>
}
 8004a78:	46c0      	nop			; (mov r8, r8)
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	b004      	add	sp, #16
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	50000800 	.word	0x50000800

08004a84 <_ZN6Driver6updateEv>:

void Driver::update() {
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
//	checkMotohours();
	updateMinutes();
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	0018      	movs	r0, r3
 8004a90:	f000 f844 	bl	8004b1c <_ZN6Driver13updateMinutesEv>
	updateScreen();
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	0018      	movs	r0, r3
 8004a98:	f000 f882 	bl	8004ba0 <_ZN6Driver12updateScreenEv>
}
 8004a9c:	46c0      	nop			; (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <_ZN6Driver13printMotohourEv>:

void Driver::printMotohour() {
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b086      	sub	sp, #24
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
	char buffer[Lcd::NUM_OF_DIG] = {0};
 8004aac:	230c      	movs	r3, #12
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	2308      	movs	r3, #8
 8004ab4:	001a      	movs	r2, r3
 8004ab6:	2100      	movs	r1, #0
 8004ab8:	f000 fc93 	bl	80053e2 <memset>
	itoa(actualMotohours, buffer, 10);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	889b      	ldrh	r3, [r3, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	18fb      	adds	r3, r7, r3
 8004ac6:	220a      	movs	r2, #10
 8004ac8:	0019      	movs	r1, r3
 8004aca:	f000 fc73 	bl	80053b4 <itoa>
	uint8_t i = 0;
 8004ace:	2317      	movs	r3, #23
 8004ad0:	18fb      	adds	r3, r7, r3
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8004ad6:	2317      	movs	r3, #23
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	220c      	movs	r2, #12
 8004ade:	18ba      	adds	r2, r7, r2
 8004ae0:	5cd3      	ldrb	r3, [r2, r3]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d016      	beq.n	8004b14 <_ZN6Driver13printMotohourEv+0x70>
		lcd.writeChar((uint8_t*)&buffer[i], i);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	0018      	movs	r0, r3
 8004aec:	2317      	movs	r3, #23
 8004aee:	18fb      	adds	r3, r7, r3
 8004af0:	781b      	ldrb	r3, [r3, #0]
 8004af2:	220c      	movs	r2, #12
 8004af4:	18ba      	adds	r2, r7, r2
 8004af6:	18d1      	adds	r1, r2, r3
 8004af8:	2317      	movs	r3, #23
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	001a      	movs	r2, r3
 8004b00:	f7ff fad4 	bl	80040ac <_ZN3Lcd9writeCharEPhh>
		i++;
 8004b04:	2317      	movs	r3, #23
 8004b06:	18fb      	adds	r3, r7, r3
 8004b08:	781a      	ldrb	r2, [r3, #0]
 8004b0a:	2317      	movs	r3, #23
 8004b0c:	18fb      	adds	r3, r7, r3
 8004b0e:	3201      	adds	r2, #1
 8004b10:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8004b12:	e7e0      	b.n	8004ad6 <_ZN6Driver13printMotohourEv+0x32>
	}
}
 8004b14:	46c0      	nop			; (mov r8, r8)
 8004b16:	46bd      	mov	sp, r7
 8004b18:	b006      	add	sp, #24
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <_ZN6Driver13updateMinutesEv>:
	} else {
		alarm.off();
	}
}

void Driver::updateMinutes() {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b082      	sub	sp, #8
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
	if(minuteTimer.isElapsed()) {
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3364      	adds	r3, #100	; 0x64
 8004b28:	0018      	movs	r0, r3
 8004b2a:	f7ff fdaa 	bl	8004682 <_ZN6CTimer9isElapsedEv>
 8004b2e:	1e03      	subs	r3, r0, #0
 8004b30:	d032      	beq.n	8004b98 <_ZN6Driver13updateMinutesEv+0x7c>
		minuteTimer.start(MINUTE);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3364      	adds	r3, #100	; 0x64
 8004b36:	213c      	movs	r1, #60	; 0x3c
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f7ff fd83 	bl	8004644 <_ZN6CTimer5startEm>
		actualMotominutes++;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	799b      	ldrb	r3, [r3, #6]
 8004b42:	3301      	adds	r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	719a      	strb	r2, [r3, #6]
		if (actualMotominutes % TIME_UPDATE_MINUTES_EEPROM == 0) {
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	799b      	ldrb	r3, [r3, #6]
 8004b4e:	210f      	movs	r1, #15
 8004b50:	0018      	movs	r0, r3
 8004b52:	f7fb fb5f 	bl	8000214 <__aeabi_uidivmod>
 8004b56:	000b      	movs	r3, r1
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d107      	bne.n	8004b6e <_ZN6Driver13updateMinutesEv+0x52>
			controlerInfo.setMotominutes(actualMotominutes);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	1dda      	adds	r2, r3, #7
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	799b      	ldrb	r3, [r3, #6]
 8004b66:	0019      	movs	r1, r3
 8004b68:	0010      	movs	r0, r2
 8004b6a:	f7ff fec7 	bl	80048fc <_ZN14CControlerInfo14setMotominutesEh>
		}
		if(actualMotominutes == TIME_UPDATE_HOURS_EEPROM) {
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	799b      	ldrb	r3, [r3, #6]
 8004b72:	2b3c      	cmp	r3, #60	; 0x3c
 8004b74:	d110      	bne.n	8004b98 <_ZN6Driver13updateMinutesEv+0x7c>
			actualMotominutes = 0;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	719a      	strb	r2, [r3, #6]
			actualMotohours++;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	889b      	ldrh	r3, [r3, #4]
 8004b80:	3301      	adds	r3, #1
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	809a      	strh	r2, [r3, #4]
			controlerInfo.setMotohours(actualMotohours);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	1dda      	adds	r2, r3, #7
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	889b      	ldrh	r3, [r3, #4]
 8004b90:	0019      	movs	r1, r3
 8004b92:	0010      	movs	r0, r2
 8004b94:	f7ff fe88 	bl	80048a8 <_ZN14CControlerInfo12setMotohoursEt>
		}
	}
}
 8004b98:	46c0      	nop			; (mov r8, r8)
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	b002      	add	sp, #8
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <_ZN6Driver12updateScreenEv>:

void Driver::updateScreen() {
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	switch(actualScreen){
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	22a4      	movs	r2, #164	; 0xa4
 8004bac:	5c9b      	ldrb	r3, [r3, r2]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <_ZN6Driver12updateScreenEv+0x1a>
 8004bb2:	db0d      	blt.n	8004bd0 <_ZN6Driver12updateScreenEv+0x30>
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	dc0b      	bgt.n	8004bd0 <_ZN6Driver12updateScreenEv+0x30>
 8004bb8:	e005      	b.n	8004bc6 <_ZN6Driver12updateScreenEv+0x26>
	case VERSION:
		versionScreen.printVerison();
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	33a8      	adds	r3, #168	; 0xa8
 8004bbe:	0018      	movs	r0, r3
 8004bc0:	f7ff fcb3 	bl	800452a <_ZN13VersionScreen12printVerisonEv>
		break;
 8004bc4:	e004      	b.n	8004bd0 <_ZN6Driver12updateScreenEv+0x30>
	case ADDRES:
	case MOTOHOURS:
		printMotohour();
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7ff ff6b 	bl	8004aa4 <_ZN6Driver13printMotohourEv>
		break;
 8004bce:	46c0      	nop			; (mov r8, r8)
	}
}
 8004bd0:	46c0      	nop			; (mov r8, r8)
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	b002      	add	sp, #8
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <_ZN6DriverC1Ev>:
class Driver {
public:
	enum ScreenType {
		VERSION, ADDRES, MOTOHOURS
	};
	Driver(){}
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	4a0e      	ldr	r2, [pc, #56]	; (8004c1c <_ZN6DriverC1Ev+0x44>)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3307      	adds	r3, #7
 8004bea:	0018      	movs	r0, r3
 8004bec:	f7ff fdfe 	bl	80047ec <_ZN14CControlerInfoC1Ev>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	3364      	adds	r3, #100	; 0x64
 8004bf4:	2103      	movs	r1, #3
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7ff fcfe 	bl	80045f8 <_ZN6CTimerC1ENS_4UnitE>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	3370      	adds	r3, #112	; 0x70
 8004c00:	0018      	movs	r0, r3
 8004c02:	f7ff fc55 	bl	80044b0 <_ZN11MotoCounterC1Ev>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3378      	adds	r3, #120	; 0x78
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7fe fd70 	bl	80036f0 <_ZN10Wtp3DriverC1Ev>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	0018      	movs	r0, r3
 8004c14:	46bd      	mov	sp, r7
 8004c16:	b002      	add	sp, #8
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	08005a44 	.word	0x08005a44

08004c20 <_ZN6DriverD1Ev>:
	virtual ~Driver(){}
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	4a06      	ldr	r2, [pc, #24]	; (8004c44 <_ZN6DriverD1Ev+0x24>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	3370      	adds	r3, #112	; 0x70
 8004c32:	0018      	movs	r0, r3
 8004c34:	f7ff fc4e 	bl	80044d4 <_ZN11MotoCounterD1Ev>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	b002      	add	sp, #8
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	46c0      	nop			; (mov r8, r8)
 8004c44:	08005a44 	.word	0x08005a44

08004c48 <_ZN6DriverD0Ev>:
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	0018      	movs	r0, r3
 8004c54:	f7ff ffe4 	bl	8004c20 <_ZN6DriverD1Ev>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	f000 fb52 	bl	8005304 <_ZdlPv>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <main>:
void SystemClock_Config();
void TurnOnWorkingClock();
void initPinBuzzer();

int main(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b0ac      	sub	sp, #176	; 0xb0
 8004c70:	af00      	add	r7, sp, #0
	HAL_Init();
 8004c72:	f7fb fad5 	bl	8000220 <HAL_Init>
	SystemClock_Config();
 8004c76:	f000 f815 	bl	8004ca4 <_Z18SystemClock_Configv>
	TurnOnWorkingClock();
 8004c7a:	f000 f873 	bl	8004d64 <_Z18TurnOnWorkingClockv>
	CTimer::classInit1000(HAL_GetTick);
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <main+0x34>)
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff fc99 	bl	80045b8 <_ZN6CTimer13classInit1000EPFmvE>
	Driver driver;
 8004c86:	1d3b      	adds	r3, r7, #4
 8004c88:	0018      	movs	r0, r3
 8004c8a:	f7ff ffa5 	bl	8004bd8 <_ZN6DriverC1Ev>

	driver.init();
 8004c8e:	1d3b      	adds	r3, r7, #4
 8004c90:	0018      	movs	r0, r3
 8004c92:	f7ff fe99 	bl	80049c8 <_ZN6Driver4initEv>
	while(true){
		driver.update();
 8004c96:	1d3b      	adds	r3, r7, #4
 8004c98:	0018      	movs	r0, r3
 8004c9a:	f7ff fef3 	bl	8004a84 <_ZN6Driver6updateEv>
 8004c9e:	e7fa      	b.n	8004c96 <main+0x2a>
 8004ca0:	080002cd 	.word	0x080002cd

08004ca4 <_Z18SystemClock_Configv>:
	}
}

void SystemClock_Config() {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b09c      	sub	sp, #112	; 0x70
 8004ca8:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	  __HAL_RCC_PWR_CLK_ENABLE();
 8004caa:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <_Z18SystemClock_Configv+0xb4>)
 8004cac:	4a2a      	ldr	r2, [pc, #168]	; (8004d58 <_Z18SystemClock_Configv+0xb4>)
 8004cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb0:	2180      	movs	r1, #128	; 0x80
 8004cb2:	0549      	lsls	r1, r1, #21
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	639a      	str	r2, [r3, #56]	; 0x38

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004cb8:	4b28      	ldr	r3, [pc, #160]	; (8004d5c <_Z18SystemClock_Configv+0xb8>)
 8004cba:	4a28      	ldr	r2, [pc, #160]	; (8004d5c <_Z18SystemClock_Configv+0xb8>)
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	4928      	ldr	r1, [pc, #160]	; (8004d60 <_Z18SystemClock_Configv+0xbc>)
 8004cc0:	400a      	ands	r2, r1
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	0109      	lsls	r1, r1, #4
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	601a      	str	r2, [r3, #0]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8004cca:	2324      	movs	r3, #36	; 0x24
 8004ccc:	18fb      	adds	r3, r7, r3
 8004cce:	2218      	movs	r2, #24
 8004cd0:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004cd2:	2324      	movs	r3, #36	; 0x24
 8004cd4:	18fb      	adds	r3, r7, r3
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004cda:	2324      	movs	r3, #36	; 0x24
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	2201      	movs	r2, #1
 8004ce0:	61da      	str	r2, [r3, #28]
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8004ce2:	2324      	movs	r3, #36	; 0x24
 8004ce4:	18fb      	adds	r3, r7, r3
 8004ce6:	22a0      	movs	r2, #160	; 0xa0
 8004ce8:	0212      	lsls	r2, r2, #8
 8004cea:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.MSICalibrationValue=0x00;
 8004cec:	2324      	movs	r3, #36	; 0x24
 8004cee:	18fb      	adds	r3, r7, r3
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	621a      	str	r2, [r3, #32]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004cf4:	2324      	movs	r3, #36	; 0x24
 8004cf6:	18fb      	adds	r3, r7, r3
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004cfc:	2324      	movs	r3, #36	; 0x24
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	0018      	movs	r0, r3
 8004d02:	f7fc f945 	bl	8000f90 <HAL_RCC_OscConfig>

	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004d06:	235c      	movs	r3, #92	; 0x5c
 8004d08:	18fb      	adds	r3, r7, r3
 8004d0a:	220f      	movs	r2, #15
 8004d0c:	601a      	str	r2, [r3, #0]
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8004d0e:	235c      	movs	r3, #92	; 0x5c
 8004d10:	18fb      	adds	r3, r7, r3
 8004d12:	2200      	movs	r2, #0
 8004d14:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d16:	235c      	movs	r3, #92	; 0x5c
 8004d18:	18fb      	adds	r3, r7, r3
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004d1e:	235c      	movs	r3, #92	; 0x5c
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	2200      	movs	r2, #0
 8004d24:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d26:	235c      	movs	r3, #92	; 0x5c
 8004d28:	18fb      	adds	r3, r7, r3
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	611a      	str	r2, [r3, #16]
	  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8004d2e:	235c      	movs	r3, #92	; 0x5c
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	2100      	movs	r1, #0
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7fc fce7 	bl	8001708 <HAL_RCC_ClockConfig>

	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004d3a:	003b      	movs	r3, r7
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.RTCClockSelection = RCC_CSR_RTCSEL_LSI;
 8004d40:	003b      	movs	r3, r7
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	0292      	lsls	r2, r2, #10
 8004d46:	605a      	str	r2, [r3, #4]
	  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8004d48:	003b      	movs	r3, r7
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f7fc fe78 	bl	8001a40 <HAL_RCCEx_PeriphCLKConfig>
}
 8004d50:	46c0      	nop			; (mov r8, r8)
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b01c      	add	sp, #112	; 0x70
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	40021000 	.word	0x40021000
 8004d5c:	40007000 	.word	0x40007000
 8004d60:	ffffe7ff 	.word	0xffffe7ff

08004d64 <_Z18TurnOnWorkingClockv>:

void TurnOnWorkingClock(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 8004d6a:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d6c:	4a19      	ldr	r2, [pc, #100]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d6e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d70:	2101      	movs	r1, #1
 8004d72:	430a      	orrs	r2, r1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d76:	4b17      	ldr	r3, [pc, #92]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
	__GPIOB_CLK_ENABLE();
 8004d82:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d86:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d88:	2102      	movs	r1, #2
 8004d8a:	430a      	orrs	r2, r1
 8004d8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	2202      	movs	r2, #2
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]
 8004d98:	68bb      	ldr	r3, [r7, #8]
	__GPIOC_CLK_ENABLE();
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d9c:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004d9e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004da0:	2104      	movs	r1, #4
 8004da2:	430a      	orrs	r2, r1
 8004da4:	62da      	str	r2, [r3, #44]	; 0x2c
 8004da6:	4b0b      	ldr	r3, [pc, #44]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004daa:	2204      	movs	r2, #4
 8004dac:	4013      	ands	r3, r2
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
	__GPIOD_CLK_ENABLE();
 8004db2:	4b08      	ldr	r3, [pc, #32]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004db4:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004db6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004db8:	2108      	movs	r1, #8
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8004dbe:	4b05      	ldr	r3, [pc, #20]	; (8004dd4 <_Z18TurnOnWorkingClockv+0x70>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc2:	2208      	movs	r2, #8
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	603b      	str	r3, [r7, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
}
 8004dca:	46c0      	nop			; (mov r8, r8)
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	b004      	add	sp, #16
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	46c0      	nop			; (mov r8, r8)
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8004dd8:	480d      	ldr	r0, [pc, #52]	; (8004e10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004dda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8004ddc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004dde:	e003      	b.n	8004de8 <LoopCopyDataInit>

08004de0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8004de2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004de4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004de6:	3104      	adds	r1, #4

08004de8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8004de8:	480b      	ldr	r0, [pc, #44]	; (8004e18 <LoopForever+0xa>)
  ldr  r3, =_edata
 8004dea:	4b0c      	ldr	r3, [pc, #48]	; (8004e1c <LoopForever+0xe>)
  adds  r2, r0, r1
 8004dec:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004dee:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004df0:	d3f6      	bcc.n	8004de0 <CopyDataInit>
  ldr  r2, =_sbss
 8004df2:	4a0b      	ldr	r2, [pc, #44]	; (8004e20 <LoopForever+0x12>)
  b  LoopFillZerobss
 8004df4:	e002      	b.n	8004dfc <LoopFillZerobss>

08004df6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8004df6:	2300      	movs	r3, #0
  str  r3, [r2]
 8004df8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004dfa:	3204      	adds	r2, #4

08004dfc <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8004dfc:	4b09      	ldr	r3, [pc, #36]	; (8004e24 <LoopForever+0x16>)
  cmp  r2, r3
 8004dfe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004e00:	d3f9      	bcc.n	8004df6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004e02:	f000 f813 	bl	8004e2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e06:	f000 fa99 	bl	800533c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e0a:	f7ff ff2f 	bl	8004c6c <main>

08004e0e <LoopForever>:

LoopForever:
    b LoopForever
 8004e0e:	e7fe      	b.n	8004e0e <LoopForever>
  ldr   r0, =_estack
 8004e10:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8004e14:	08005ab8 	.word	0x08005ab8
  ldr  r0, =_sdata
 8004e18:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004e1c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8004e20:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8004e24:	200002ec 	.word	0x200002ec

08004e28 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e28:	e7fe      	b.n	8004e28 <ADC1_COMP_IRQHandler>
	...

08004e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
 /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8004e30:	4b17      	ldr	r3, [pc, #92]	; (8004e90 <SystemInit+0x64>)
 8004e32:	4a17      	ldr	r2, [pc, #92]	; (8004e90 <SystemInit+0x64>)
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	2180      	movs	r1, #128	; 0x80
 8004e38:	0049      	lsls	r1, r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 8004e3e:	4b14      	ldr	r3, [pc, #80]	; (8004e90 <SystemInit+0x64>)
 8004e40:	4a13      	ldr	r2, [pc, #76]	; (8004e90 <SystemInit+0x64>)
 8004e42:	68d2      	ldr	r2, [r2, #12]
 8004e44:	4913      	ldr	r1, [pc, #76]	; (8004e94 <SystemInit+0x68>)
 8004e46:	400a      	ands	r2, r1
 8004e48:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 8004e4a:	4b11      	ldr	r3, [pc, #68]	; (8004e90 <SystemInit+0x64>)
 8004e4c:	4a10      	ldr	r2, [pc, #64]	; (8004e90 <SystemInit+0x64>)
 8004e4e:	6812      	ldr	r2, [r2, #0]
 8004e50:	4911      	ldr	r1, [pc, #68]	; (8004e98 <SystemInit+0x6c>)
 8004e52:	400a      	ands	r2, r1
 8004e54:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8004e56:	4b0e      	ldr	r3, [pc, #56]	; (8004e90 <SystemInit+0x64>)
 8004e58:	4a0d      	ldr	r2, [pc, #52]	; (8004e90 <SystemInit+0x64>)
 8004e5a:	6892      	ldr	r2, [r2, #8]
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	438a      	bics	r2, r1
 8004e60:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004e62:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <SystemInit+0x64>)
 8004e64:	4a0a      	ldr	r2, [pc, #40]	; (8004e90 <SystemInit+0x64>)
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	490c      	ldr	r1, [pc, #48]	; (8004e9c <SystemInit+0x70>)
 8004e6a:	400a      	ands	r2, r1
 8004e6c:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8004e6e:	4b08      	ldr	r3, [pc, #32]	; (8004e90 <SystemInit+0x64>)
 8004e70:	4a07      	ldr	r2, [pc, #28]	; (8004e90 <SystemInit+0x64>)
 8004e72:	68d2      	ldr	r2, [r2, #12]
 8004e74:	490a      	ldr	r1, [pc, #40]	; (8004ea0 <SystemInit+0x74>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <SystemInit+0x64>)
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004e80:	4b08      	ldr	r3, [pc, #32]	; (8004ea4 <SystemInit+0x78>)
 8004e82:	2280      	movs	r2, #128	; 0x80
 8004e84:	0512      	lsls	r2, r2, #20
 8004e86:	609a      	str	r2, [r3, #8]
#endif
  
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	46c0      	nop			; (mov r8, r8)
 8004e90:	40021000 	.word	0x40021000
 8004e94:	88ff400c 	.word	0x88ff400c
 8004e98:	fef6fff6 	.word	0xfef6fff6
 8004e9c:	fffbffff 	.word	0xfffbffff
 8004ea0:	ff02ffff 	.word	0xff02ffff
 8004ea4:	e000ed00 	.word	0xe000ed00

08004ea8 <_Z26rfm22callbacks_set_channelh>:
static const uint8_t rfm22callbacks_power = RFM22BANDS_DEFAULT_POWER;

/*channel*/
/*--------------------------------------------------------------------*/
void rfm22callbacks_set_channel(uint8_t channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	0002      	movs	r2, r0
 8004eb0:	1dfb      	adds	r3, r7, #7
 8004eb2:	701a      	strb	r2, [r3, #0]

}
 8004eb4:	46c0      	nop			; (mov r8, r8)
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b002      	add	sp, #8
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <_Z26rfm22callbacks_get_channelv>:

/*--------------------------------------------------------------------*/
uint8_t rfm22callbacks_get_channel()
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	af00      	add	r7, sp, #0
    return rfm22callbacks_channel;
 8004ec0:	2331      	movs	r3, #49	; 0x31
}
 8004ec2:	0018      	movs	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <_Z24rfm22callbacks_set_powerh>:

/*--------------------------------------------------------------------*/
void rfm22callbacks_set_power(uint8_t power)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	0002      	movs	r2, r0
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	701a      	strb	r2, [r3, #0]

}
 8004ed4:	46c0      	nop			; (mov r8, r8)
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	b002      	add	sp, #8
 8004eda:	bd80      	pop	{r7, pc}

08004edc <_Z24rfm22callbacks_get_powerv>:

/*--------------------------------------------------------------------*/
uint8_t rfm22callbacks_get_power()
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
    return rfm22callbacks_power;
 8004ee0:	2306      	movs	r3, #6
}
 8004ee2:	0018      	movs	r0, r3
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <_Z23rfm22callbacks_delay_mst>:

/*--------------------------------------------------------------------*/
void rfm22callbacks_delay_ms(uint16_t ms)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	0002      	movs	r2, r0
 8004ef0:	1dbb      	adds	r3, r7, #6
 8004ef2:	801a      	strh	r2, [r3, #0]
    HAL_Delay(ms);
 8004ef4:	1dbb      	adds	r3, r7, #6
 8004ef6:	881b      	ldrh	r3, [r3, #0]
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f7fb f9f1 	bl	80002e0 <HAL_Delay>
}
 8004efe:	46c0      	nop			; (mov r8, r8)
 8004f00:	46bd      	mov	sp, r7
 8004f02:	b002      	add	sp, #8
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <_Z23rfm22ports_clearIntFlagv>:
{
    return HAL_GPIO_ReadPin(RFM22_INT_PORT, RFM22_INT_BIT) == GPIO_PIN_RESET;
}

void rfm22ports_clearIntFlag()
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
    __HAL_GPIO_EXTI_CLEAR_IT(RFM22_INT_BIT);
 8004f0c:	4b04      	ldr	r3, [pc, #16]	; (8004f20 <_Z23rfm22ports_clearIntFlagv+0x18>)
 8004f0e:	2210      	movs	r2, #16
 8004f10:	615a      	str	r2, [r3, #20]
    HAL_NVIC_ClearPendingIRQ(RFM22_IRQ);
 8004f12:	2007      	movs	r0, #7
 8004f14:	f7fb faf5 	bl	8000502 <HAL_NVIC_ClearPendingIRQ>
}
 8004f18:	46c0      	nop			; (mov r8, r8)
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	46c0      	nop			; (mov r8, r8)
 8004f20:	40010400 	.word	0x40010400

08004f24 <_Z22rfm22ports_activateIntv>:

void rfm22ports_activateInt()
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	af00      	add	r7, sp, #0
    rfm22ports_clearIntFlag();
 8004f28:	f7ff ffee 	bl	8004f08 <_Z23rfm22ports_clearIntFlagv>
    HAL_NVIC_EnableIRQ(RFM22_IRQ);
 8004f2c:	2007      	movs	r0, #7
 8004f2e:	f7fb facb 	bl	80004c8 <HAL_NVIC_EnableIRQ>
}
 8004f32:	46c0      	nop			; (mov r8, r8)
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <_Z22rfm22ports_initIntPortv>:
{
    HAL_NVIC_DisableIRQ(RFM22_IRQ);
}

void rfm22ports_initIntPort()
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b086      	sub	sp, #24
 8004f3c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    RFM22_INT_PORT_ENABLE();
 8004f3e:	4b15      	ldr	r3, [pc, #84]	; (8004f94 <_Z22rfm22ports_initIntPortv+0x5c>)
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <_Z22rfm22ports_initIntPortv+0x5c>)
 8004f42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f44:	2104      	movs	r1, #4
 8004f46:	430a      	orrs	r2, r1
 8004f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8004f4a:	4b12      	ldr	r3, [pc, #72]	; (8004f94 <_Z22rfm22ports_initIntPortv+0x5c>)
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	2204      	movs	r2, #4
 8004f50:	4013      	ands	r3, r2
 8004f52:	603b      	str	r3, [r7, #0]
 8004f54:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = RFM22_INT_BIT;
 8004f56:	1d3b      	adds	r3, r7, #4
 8004f58:	2210      	movs	r2, #16
 8004f5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004f5c:	1d3b      	adds	r3, r7, #4
 8004f5e:	4a0e      	ldr	r2, [pc, #56]	; (8004f98 <_Z22rfm22ports_initIntPortv+0x60>)
 8004f60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8004f6e:	1d3b      	adds	r3, r7, #4
 8004f70:	2200      	movs	r2, #0
 8004f72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RFM22_INT_PORT, &GPIO_InitStruct);
 8004f74:	1d3b      	adds	r3, r7, #4
 8004f76:	4a09      	ldr	r2, [pc, #36]	; (8004f9c <_Z22rfm22ports_initIntPortv+0x64>)
 8004f78:	0019      	movs	r1, r3
 8004f7a:	0010      	movs	r0, r2
 8004f7c:	f7fb fc74 	bl	8000868 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(RFM22_IRQ, 1, 0);
 8004f80:	2200      	movs	r2, #0
 8004f82:	2101      	movs	r1, #1
 8004f84:	2007      	movs	r0, #7
 8004f86:	f7fb fa89 	bl	800049c <HAL_NVIC_SetPriority>
}
 8004f8a:	46c0      	nop			; (mov r8, r8)
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	b006      	add	sp, #24
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	46c0      	nop			; (mov r8, r8)
 8004f94:	40021000 	.word	0x40021000
 8004f98:	10210000 	.word	0x10210000
 8004f9c:	50000800 	.word	0x50000800

08004fa0 <_Z22rfm22ports_initVccPortv>:

void rfm22ports_initVccPort()
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
}
 8004fa4:	46c0      	nop			; (mov r8, r8)
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <_Z17rfm22ports_setVcch>:

void rfm22ports_setVcc(uint8_t value)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	0002      	movs	r2, r0
 8004fb2:	1dfb      	adds	r3, r7, #7
 8004fb4:	701a      	strb	r2, [r3, #0]
}
 8004fb6:	46c0      	nop			; (mov r8, r8)
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	b002      	add	sp, #8
 8004fbc:	bd80      	pop	{r7, pc}
	...

08004fc0 <_Z22rfm22ports_initSDNPortv>:

void rfm22ports_initSDNPort()
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af00      	add	r7, sp, #0
    //od razu po przelaczeniu na wyjscie stan wysoki (shutdown)

    GPIO_InitTypeDef GPIO_InitStruct;

    RFM22_SDN_PORT_ENABLE();
 8004fc6:	4b12      	ldr	r3, [pc, #72]	; (8005010 <_Z22rfm22ports_initSDNPortv+0x50>)
 8004fc8:	4a11      	ldr	r2, [pc, #68]	; (8005010 <_Z22rfm22ports_initSDNPortv+0x50>)
 8004fca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004fcc:	2104      	movs	r1, #4
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <_Z22rfm22ports_initSDNPortv+0x50>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd6:	2204      	movs	r2, #4
 8004fd8:	4013      	ands	r3, r2
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	683b      	ldr	r3, [r7, #0]

    GPIO_InitStruct.Pin = RFM22_SDN_BIT;
 8004fde:	1d3b      	adds	r3, r7, #4
 8004fe0:	2220      	movs	r2, #32
 8004fe2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fe4:	1d3b      	adds	r3, r7, #4
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fea:	1d3b      	adds	r3, r7, #4
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_MEDIUM;
 8004ff0:	1d3b      	adds	r3, r7, #4
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = 0;
 8004ff6:	1d3b      	adds	r3, r7, #4
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(RFM22_SDN_PORT, &GPIO_InitStruct);
 8004ffc:	1d3b      	adds	r3, r7, #4
 8004ffe:	4a05      	ldr	r2, [pc, #20]	; (8005014 <_Z22rfm22ports_initSDNPortv+0x54>)
 8005000:	0019      	movs	r1, r3
 8005002:	0010      	movs	r0, r2
 8005004:	f7fb fc30 	bl	8000868 <HAL_GPIO_Init>
    //HAL_GPIO_WritePin(RFM22_SDN_PORT, RFM22_SDN_BIT, GPIO_PIN_SET);
}
 8005008:	46c0      	nop			; (mov r8, r8)
 800500a:	46bd      	mov	sp, r7
 800500c:	b006      	add	sp, #24
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40021000 	.word	0x40021000
 8005014:	50000800 	.word	0x50000800

08005018 <_Z17rfm22ports_setSDNh>:

void rfm22ports_setSDN(uint8_t value)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	0002      	movs	r2, r0
 8005020:	1dfb      	adds	r3, r7, #7
 8005022:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(RFM22_SDN_PORT, RFM22_SDN_BIT, value ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8005024:	1dfb      	adds	r3, r7, #7
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d001      	beq.n	8005030 <_Z17rfm22ports_setSDNh+0x18>
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <_Z17rfm22ports_setSDNh+0x1a>
 8005030:	2300      	movs	r3, #0
 8005032:	4804      	ldr	r0, [pc, #16]	; (8005044 <_Z17rfm22ports_setSDNh+0x2c>)
 8005034:	001a      	movs	r2, r3
 8005036:	2120      	movs	r1, #32
 8005038:	f7fb fd8c 	bl	8000b54 <HAL_GPIO_WritePin>
}
 800503c:	46c0      	nop			; (mov r8, r8)
 800503e:	46bd      	mov	sp, r7
 8005040:	b002      	add	sp, #8
 8005042:	bd80      	pop	{r7, pc}
 8005044:	50000800 	.word	0x50000800

08005048 <_Z25rfm22ports_getResetMethodv>:

uint8_t rfm22ports_getResetMethod()
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
    return RFM22PORTS_RESET_SDN;
 800504c:	2301      	movs	r3, #1
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <_Z18rfm22ports_initSPIv>:

void rfm22ports_initSPI()
{
 8005054:	b580      	push	{r7, lr}
 8005056:	af00      	add	r7, sp, #0
	RFM22_SPI_HANDLE.Instance = SPI1;
 8005058:	4b16      	ldr	r3, [pc, #88]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 800505a:	4a17      	ldr	r2, [pc, #92]	; (80050b8 <_Z18rfm22ports_initSPIv+0x64>)
 800505c:	601a      	str	r2, [r3, #0]
	RFM22_SPI_HANDLE.Init.Mode = SPI_MODE_MASTER;
 800505e:	4b15      	ldr	r3, [pc, #84]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005060:	2282      	movs	r2, #130	; 0x82
 8005062:	0052      	lsls	r2, r2, #1
 8005064:	605a      	str	r2, [r3, #4]
	RFM22_SPI_HANDLE.Init.Direction = SPI_DIRECTION_2LINES;
 8005066:	4b13      	ldr	r3, [pc, #76]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]
	RFM22_SPI_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 800506c:	4b11      	ldr	r3, [pc, #68]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 800506e:	2200      	movs	r2, #0
 8005070:	60da      	str	r2, [r3, #12]
	RFM22_SPI_HANDLE.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005072:	4b10      	ldr	r3, [pc, #64]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005074:	2200      	movs	r2, #0
 8005076:	611a      	str	r2, [r3, #16]
	RFM22_SPI_HANDLE.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 800507a:	2200      	movs	r2, #0
 800507c:	615a      	str	r2, [r3, #20]
	RFM22_SPI_HANDLE.Init.NSS = SPI_NSS_SOFT;
 800507e:	4b0d      	ldr	r3, [pc, #52]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005080:	2280      	movs	r2, #128	; 0x80
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	619a      	str	r2, [r3, #24]
	RFM22_SPI_HANDLE.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8005086:	4b0b      	ldr	r3, [pc, #44]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005088:	2208      	movs	r2, #8
 800508a:	61da      	str	r2, [r3, #28]
	RFM22_SPI_HANDLE.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800508c:	4b09      	ldr	r3, [pc, #36]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 800508e:	2200      	movs	r2, #0
 8005090:	621a      	str	r2, [r3, #32]
	RFM22_SPI_HANDLE.Init.TIMode = SPI_TIMODE_DISABLED;
 8005092:	4b08      	ldr	r3, [pc, #32]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 8005094:	2200      	movs	r2, #0
 8005096:	625a      	str	r2, [r3, #36]	; 0x24
	RFM22_SPI_HANDLE.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8005098:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 800509a:	2200      	movs	r2, #0
 800509c:	629a      	str	r2, [r3, #40]	; 0x28
	RFM22_SPI_HANDLE.Init.CRCPolynomial = 10;
 800509e:	4b05      	ldr	r3, [pc, #20]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 80050a0:	220a      	movs	r2, #10
 80050a2:	62da      	str	r2, [r3, #44]	; 0x2c
	HAL_SPI_Init(&RFM22_SPI_HANDLE);
 80050a4:	4b03      	ldr	r3, [pc, #12]	; (80050b4 <_Z18rfm22ports_initSPIv+0x60>)
 80050a6:	0018      	movs	r0, r3
 80050a8:	f7fc fe28 	bl	8001cfc <HAL_SPI_Init>
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	46c0      	nop			; (mov r8, r8)
 80050b4:	20000248 	.word	0x20000248
 80050b8:	40013000 	.word	0x40013000

080050bc <_Z20rfm22ports_deinitSPIv>:

void rfm22ports_deinitSPI()
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	HAL_SPI_DeInit(&RFM22_SPI_HANDLE);
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <_Z20rfm22ports_deinitSPIv+0x14>)
 80050c2:	0018      	movs	r0, r3
 80050c4:	f7fc fe8a 	bl	8001ddc <HAL_SPI_DeInit>
}
 80050c8:	46c0      	nop			; (mov r8, r8)
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	20000248 	.word	0x20000248

080050d4 <_Z16rfm22ports_transhh>:

uint8_t rfm22ports_trans(uint8_t address, uint8_t value)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b086      	sub	sp, #24
 80050d8:	af02      	add	r7, sp, #8
 80050da:	0002      	movs	r2, r0
 80050dc:	1dfb      	adds	r3, r7, #7
 80050de:	701a      	strb	r2, [r3, #0]
 80050e0:	1dbb      	adds	r3, r7, #6
 80050e2:	1c0a      	adds	r2, r1, #0
 80050e4:	701a      	strb	r2, [r3, #0]
    uint8_t txData[2] = {address, value};
 80050e6:	230c      	movs	r3, #12
 80050e8:	18fb      	adds	r3, r7, r3
 80050ea:	1dfa      	adds	r2, r7, #7
 80050ec:	7812      	ldrb	r2, [r2, #0]
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	230c      	movs	r3, #12
 80050f2:	18fb      	adds	r3, r7, r3
 80050f4:	1dba      	adds	r2, r7, #6
 80050f6:	7812      	ldrb	r2, [r2, #0]
 80050f8:	705a      	strb	r2, [r3, #1]
    uint8_t feedback[2] = {0, 0};
 80050fa:	2308      	movs	r3, #8
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2200      	movs	r2, #0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	2308      	movs	r3, #8
 8005104:	18fb      	adds	r3, r7, r3
 8005106:	2200      	movs	r2, #0
 8005108:	705a      	strb	r2, [r3, #1]

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_RESET);
 800510a:	23a0      	movs	r3, #160	; 0xa0
 800510c:	05db      	lsls	r3, r3, #23
 800510e:	2200      	movs	r2, #0
 8005110:	2110      	movs	r1, #16
 8005112:	0018      	movs	r0, r3
 8005114:	f7fb fd1e 	bl	8000b54 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, txData, feedback, 2, 50);
 8005118:	2308      	movs	r3, #8
 800511a:	18fa      	adds	r2, r7, r3
 800511c:	230c      	movs	r3, #12
 800511e:	18f9      	adds	r1, r7, r3
 8005120:	4809      	ldr	r0, [pc, #36]	; (8005148 <_Z16rfm22ports_transhh+0x74>)
 8005122:	2332      	movs	r3, #50	; 0x32
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	2302      	movs	r3, #2
 8005128:	f7fc fe92 	bl	8001e50 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_SET);
 800512c:	23a0      	movs	r3, #160	; 0xa0
 800512e:	05db      	lsls	r3, r3, #23
 8005130:	2201      	movs	r2, #1
 8005132:	2110      	movs	r1, #16
 8005134:	0018      	movs	r0, r3
 8005136:	f7fb fd0d 	bl	8000b54 <HAL_GPIO_WritePin>

    return feedback[1];
 800513a:	2308      	movs	r3, #8
 800513c:	18fb      	adds	r3, r7, r3
 800513e:	785b      	ldrb	r3, [r3, #1]
}
 8005140:	0018      	movs	r0, r3
 8005142:	46bd      	mov	sp, r7
 8005144:	b004      	add	sp, #16
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000248 	.word	0x20000248

0800514c <_Z16rfm22ports_bursthhPh>:

void rfm22ports_burst(uint8_t address, uint8_t length, uint8_t *values)
{
 800514c:	b590      	push	{r4, r7, lr}
 800514e:	b087      	sub	sp, #28
 8005150:	af02      	add	r7, sp, #8
 8005152:	603a      	str	r2, [r7, #0]
 8005154:	1dfb      	adds	r3, r7, #7
 8005156:	1c02      	adds	r2, r0, #0
 8005158:	701a      	strb	r2, [r3, #0]
 800515a:	1dbb      	adds	r3, r7, #6
 800515c:	1c0a      	adds	r2, r1, #0
 800515e:	701a      	strb	r2, [r3, #0]
    uint8_t i;

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_RESET);
 8005160:	23a0      	movs	r3, #160	; 0xa0
 8005162:	05db      	lsls	r3, r3, #23
 8005164:	2200      	movs	r2, #0
 8005166:	2110      	movs	r1, #16
 8005168:	0018      	movs	r0, r3
 800516a:	f7fb fcf3 	bl	8000b54 <HAL_GPIO_WritePin>

    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, &address, &i, 1, 50);
 800516e:	230f      	movs	r3, #15
 8005170:	18fa      	adds	r2, r7, r3
 8005172:	1df9      	adds	r1, r7, #7
 8005174:	480e      	ldr	r0, [pc, #56]	; (80051b0 <_Z16rfm22ports_bursthhPh+0x64>)
 8005176:	2332      	movs	r3, #50	; 0x32
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2301      	movs	r3, #1
 800517c:	f7fc fe68 	bl	8001e50 <HAL_SPI_TransmitReceive>
    HAL_SPI_TransmitReceive(&RFM22_SPI_HANDLE, values, values, length, 300);
 8005180:	1dbb      	adds	r3, r7, #6
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	b29c      	uxth	r4, r3
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	4809      	ldr	r0, [pc, #36]	; (80051b0 <_Z16rfm22ports_bursthhPh+0x64>)
 800518c:	2396      	movs	r3, #150	; 0x96
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	9300      	str	r3, [sp, #0]
 8005192:	0023      	movs	r3, r4
 8005194:	f7fc fe5c 	bl	8001e50 <HAL_SPI_TransmitReceive>

    HAL_GPIO_WritePin(RFM22_SPI_CS_PORT, RFM22_SPI_CS_BIT, GPIO_PIN_SET);
 8005198:	23a0      	movs	r3, #160	; 0xa0
 800519a:	05db      	lsls	r3, r3, #23
 800519c:	2201      	movs	r2, #1
 800519e:	2110      	movs	r1, #16
 80051a0:	0018      	movs	r0, r3
 80051a2:	f7fb fcd7 	bl	8000b54 <HAL_GPIO_WritePin>
}
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b005      	add	sp, #20
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	46c0      	nop			; (mov r8, r8)
 80051b0:	20000248 	.word	0x20000248

080051b4 <_Z39rfm22profiles_internal2external_profilePK20rfm22profiles_regs_tPS_>:
 *
 * param intPr    pointer to rfm22profiles_regs_t located in pernament memory, ex. eeprom
 * param extPr    pointer to ram
 */
void rfm22profiles_internal2external_profile(const rfm22profiles_regs_t *intPr, rfm22profiles_regs_t *extPr)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
	memcpy(extPr, intPr, sizeof(rfm22profiles_regs_t));
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2218      	movs	r2, #24
 80051c4:	0018      	movs	r0, r3
 80051c6:	f000 f903 	bl	80053d0 <memcpy>
}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	46bd      	mov	sp, r7
 80051ce:	b002      	add	sp, #8
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t>:
/**
 * Don't modify funtions below
 */

void rfm22profiles_fill_standard_profile(rfm22profiles_regs_t *regs)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
    rfm22profiles_internal2external_profile(&rfm22profiles_standard_profile, regs);
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <_Z35rfm22profiles_fill_standard_profileP20rfm22profiles_regs_t+0x1c>)
 80051e0:	0011      	movs	r1, r2
 80051e2:	0018      	movs	r0, r3
 80051e4:	f7ff ffe6 	bl	80051b4 <_Z39rfm22profiles_internal2external_profilePK20rfm22profiles_regs_tPS_>
}
 80051e8:	46c0      	nop			; (mov r8, r8)
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b002      	add	sp, #8
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	08005a68 	.word	0x08005a68

080051f4 <_Z24wtp3drivercalls_setTimerhm>:
#include "timer.h"

static CTimer wtp4timers[3] = {CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC)};

void wtp3drivercalls_setTimer(uint8_t nr, uint32_t ms)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	0002      	movs	r2, r0
 80051fc:	6039      	str	r1, [r7, #0]
 80051fe:	1dfb      	adds	r3, r7, #7
 8005200:	701a      	strb	r2, [r3, #0]
    wtp4timers[nr].start(ms);
 8005202:	1dfb      	adds	r3, r7, #7
 8005204:	781a      	ldrb	r2, [r3, #0]
 8005206:	0013      	movs	r3, r2
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	189b      	adds	r3, r3, r2
 800520c:	009b      	lsls	r3, r3, #2
 800520e:	4a05      	ldr	r2, [pc, #20]	; (8005224 <_Z24wtp3drivercalls_setTimerhm+0x30>)
 8005210:	189b      	adds	r3, r3, r2
 8005212:	683a      	ldr	r2, [r7, #0]
 8005214:	0011      	movs	r1, r2
 8005216:	0018      	movs	r0, r3
 8005218:	f7ff fa14 	bl	8004644 <_ZN6CTimer5startEm>
}
 800521c:	46c0      	nop			; (mov r8, r8)
 800521e:	46bd      	mov	sp, r7
 8005220:	b002      	add	sp, #8
 8005222:	bd80      	pop	{r7, pc}
 8005224:	200002a0 	.word	0x200002a0

08005228 <_Z41__static_initialization_and_destruction_0ii>:

    for(i = 0; i < 3; i++)
    {
        wtp4timers[i].isZero();
    }
}
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2b01      	cmp	r3, #1
 8005236:	d113      	bne.n	8005260 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	4a0b      	ldr	r2, [pc, #44]	; (8005268 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d10f      	bne.n	8005260 <_Z41__static_initialization_and_destruction_0ii+0x38>
static CTimer wtp4timers[3] = {CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC), CTimer(CTimer::UNIT_MILISEC)};
 8005240:	4c0a      	ldr	r4, [pc, #40]	; (800526c <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8005242:	2100      	movs	r1, #0
 8005244:	0020      	movs	r0, r4
 8005246:	f7ff f9d7 	bl	80045f8 <_ZN6CTimerC1ENS_4UnitE>
 800524a:	340c      	adds	r4, #12
 800524c:	2100      	movs	r1, #0
 800524e:	0020      	movs	r0, r4
 8005250:	f7ff f9d2 	bl	80045f8 <_ZN6CTimerC1ENS_4UnitE>
 8005254:	0023      	movs	r3, r4
 8005256:	330c      	adds	r3, #12
 8005258:	2100      	movs	r1, #0
 800525a:	0018      	movs	r0, r3
 800525c:	f7ff f9cc 	bl	80045f8 <_ZN6CTimerC1ENS_4UnitE>
}
 8005260:	46c0      	nop			; (mov r8, r8)
 8005262:	46bd      	mov	sp, r7
 8005264:	b003      	add	sp, #12
 8005266:	bd90      	pop	{r4, r7, pc}
 8005268:	0000ffff 	.word	0x0000ffff
 800526c:	200002a0 	.word	0x200002a0

08005270 <_GLOBAL__sub_I__Z24wtp3drivercalls_setTimerhm>:
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
 8005274:	4b03      	ldr	r3, [pc, #12]	; (8005284 <_GLOBAL__sub_I__Z24wtp3drivercalls_setTimerhm+0x14>)
 8005276:	0019      	movs	r1, r3
 8005278:	2001      	movs	r0, #1
 800527a:	f7ff ffd5 	bl	8005228 <_Z41__static_initialization_and_destruction_0ii>
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	0000ffff 	.word	0x0000ffff

08005288 <_Z27wtp_address_srv_get_addressv>:
#define WTP_ADDRESS_SRV_CHIP_ID_OFFSET_WORD_2  0x14

static uint32_t wtp_address_srv_addr = WTP_ADDRESS_UNINITIALIZED;

uint32_t wtp_address_srv_get_address()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
    return wtp_address_srv_addr;
 800528c:	4b02      	ldr	r3, [pc, #8]	; (8005298 <_Z27wtp_address_srv_get_addressv+0x10>)
 800528e:	681b      	ldr	r3, [r3, #0]
}
 8005290:	0018      	movs	r0, r3
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	200002c4 	.word	0x200002c4

0800529c <_Z27wtp_address_srv_set_addressm>:

void wtp_address_srv_set_address(uint32_t address)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
    wtp_address_srv_addr = address;
 80052a4:	4b03      	ldr	r3, [pc, #12]	; (80052b4 <_Z27wtp_address_srv_set_addressm+0x18>)
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	46c0      	nop			; (mov r8, r8)
 80052ac:	46bd      	mov	sp, r7
 80052ae:	b002      	add	sp, #8
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	46c0      	nop			; (mov r8, r8)
 80052b4:	200002c4 	.word	0x200002c4

080052b8 <_Z27wtp_address_srv_get_chip_idh>:

uint8_t wtp_address_srv_get_chip_id(uint8_t byte_index)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	0002      	movs	r2, r0
 80052c0:	1dfb      	adds	r3, r7, #7
 80052c2:	701a      	strb	r2, [r3, #0]
    uint8_t *id_ptr = (uint8_t*)WTP_ADDRESS_SRV_CHIP_ID_BASE_ADDRESS;
 80052c4:	4b0e      	ldr	r3, [pc, #56]	; (8005300 <_Z27wtp_address_srv_get_chip_idh+0x48>)
 80052c6:	60fb      	str	r3, [r7, #12]

    if(byte_index < WTP_ADDRESS_SRV_CHIP_ID_BYTES)
 80052c8:	1dfb      	adds	r3, r7, #7
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	2b0b      	cmp	r3, #11
 80052ce:	dc11      	bgt.n	80052f4 <_Z27wtp_address_srv_get_chip_idh+0x3c>
    {
        if(byte_index < 8)
 80052d0:	1dfb      	adds	r3, r7, #7
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	2b07      	cmp	r3, #7
 80052d6:	dd07      	ble.n	80052e8 <_Z27wtp_address_srv_get_chip_idh+0x30>
            //pointer arithmetics
            id_ptr += WTP_ADDRESS_SRV_CHIP_ID_OFFSET_WORD_0;
        }
        else //byte_index < 12
        {
            byte_index -= 8;
 80052d8:	1dfb      	adds	r3, r7, #7
 80052da:	1dfa      	adds	r2, r7, #7
 80052dc:	7812      	ldrb	r2, [r2, #0]
 80052de:	3a08      	subs	r2, #8
 80052e0:	701a      	strb	r2, [r3, #0]
            id_ptr += WTP_ADDRESS_SRV_CHIP_ID_OFFSET_WORD_2;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	3314      	adds	r3, #20
 80052e6:	60fb      	str	r3, [r7, #12]
        }
        return id_ptr[byte_index];
 80052e8:	1dfb      	adds	r3, r7, #7
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	18d3      	adds	r3, r2, r3
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	e000      	b.n	80052f6 <_Z27wtp_address_srv_get_chip_idh+0x3e>
    }
    return 0;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	0018      	movs	r0, r3
 80052f8:	46bd      	mov	sp, r7
 80052fa:	b004      	add	sp, #16
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	1ff80050 	.word	0x1ff80050

08005304 <_ZdlPv>:
 8005304:	b510      	push	{r4, lr}
 8005306:	f000 f859 	bl	80053bc <free>
 800530a:	bd10      	pop	{r4, pc}

0800530c <__cxa_pure_virtual>:
 800530c:	b510      	push	{r4, lr}
 800530e:	f000 f805 	bl	800531c <_ZSt9terminatev>

08005312 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005312:	b510      	push	{r4, lr}
 8005314:	4780      	blx	r0
 8005316:	f000 f809 	bl	800532c <abort>
	...

0800531c <_ZSt9terminatev>:
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <_ZSt9terminatev+0xc>)
 800531e:	b510      	push	{r4, lr}
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	f7ff fff6 	bl	8005312 <_ZN10__cxxabiv111__terminateEPFvvE>
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	20000008 	.word	0x20000008

0800532c <abort>:
 800532c:	b510      	push	{r4, lr}
 800532e:	2006      	movs	r0, #6
 8005330:	f000 f8d4 	bl	80054dc <raise>
 8005334:	2001      	movs	r0, #1
 8005336:	f000 f93d 	bl	80055b4 <_exit>
	...

0800533c <__libc_init_array>:
 800533c:	b570      	push	{r4, r5, r6, lr}
 800533e:	2600      	movs	r6, #0
 8005340:	4d0c      	ldr	r5, [pc, #48]	; (8005374 <__libc_init_array+0x38>)
 8005342:	4c0d      	ldr	r4, [pc, #52]	; (8005378 <__libc_init_array+0x3c>)
 8005344:	1b64      	subs	r4, r4, r5
 8005346:	10a4      	asrs	r4, r4, #2
 8005348:	42a6      	cmp	r6, r4
 800534a:	d109      	bne.n	8005360 <__libc_init_array+0x24>
 800534c:	2600      	movs	r6, #0
 800534e:	f000 f933 	bl	80055b8 <_init>
 8005352:	4d0a      	ldr	r5, [pc, #40]	; (800537c <__libc_init_array+0x40>)
 8005354:	4c0a      	ldr	r4, [pc, #40]	; (8005380 <__libc_init_array+0x44>)
 8005356:	1b64      	subs	r4, r4, r5
 8005358:	10a4      	asrs	r4, r4, #2
 800535a:	42a6      	cmp	r6, r4
 800535c:	d105      	bne.n	800536a <__libc_init_array+0x2e>
 800535e:	bd70      	pop	{r4, r5, r6, pc}
 8005360:	00b3      	lsls	r3, r6, #2
 8005362:	58eb      	ldr	r3, [r5, r3]
 8005364:	4798      	blx	r3
 8005366:	3601      	adds	r6, #1
 8005368:	e7ee      	b.n	8005348 <__libc_init_array+0xc>
 800536a:	00b3      	lsls	r3, r6, #2
 800536c:	58eb      	ldr	r3, [r5, r3]
 800536e:	4798      	blx	r3
 8005370:	3601      	adds	r6, #1
 8005372:	e7f2      	b.n	800535a <__libc_init_array+0x1e>
 8005374:	08005aa8 	.word	0x08005aa8
 8005378:	08005aa8 	.word	0x08005aa8
 800537c:	08005aa8 	.word	0x08005aa8
 8005380:	08005ab4 	.word	0x08005ab4

08005384 <__itoa>:
 8005384:	1e93      	subs	r3, r2, #2
 8005386:	b510      	push	{r4, lr}
 8005388:	000c      	movs	r4, r1
 800538a:	2b22      	cmp	r3, #34	; 0x22
 800538c:	d904      	bls.n	8005398 <__itoa+0x14>
 800538e:	2300      	movs	r3, #0
 8005390:	001c      	movs	r4, r3
 8005392:	700b      	strb	r3, [r1, #0]
 8005394:	0020      	movs	r0, r4
 8005396:	bd10      	pop	{r4, pc}
 8005398:	2a0a      	cmp	r2, #10
 800539a:	d109      	bne.n	80053b0 <__itoa+0x2c>
 800539c:	2800      	cmp	r0, #0
 800539e:	da07      	bge.n	80053b0 <__itoa+0x2c>
 80053a0:	232d      	movs	r3, #45	; 0x2d
 80053a2:	700b      	strb	r3, [r1, #0]
 80053a4:	2101      	movs	r1, #1
 80053a6:	4240      	negs	r0, r0
 80053a8:	1861      	adds	r1, r4, r1
 80053aa:	f000 f8b7 	bl	800551c <__utoa>
 80053ae:	e7f1      	b.n	8005394 <__itoa+0x10>
 80053b0:	2100      	movs	r1, #0
 80053b2:	e7f9      	b.n	80053a8 <__itoa+0x24>

080053b4 <itoa>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	f7ff ffe5 	bl	8005384 <__itoa>
 80053ba:	bd10      	pop	{r4, pc}

080053bc <free>:
 80053bc:	b510      	push	{r4, lr}
 80053be:	4b03      	ldr	r3, [pc, #12]	; (80053cc <free+0x10>)
 80053c0:	0001      	movs	r1, r0
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	f000 f816 	bl	80053f4 <_free_r>
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	2000000c 	.word	0x2000000c

080053d0 <memcpy>:
 80053d0:	2300      	movs	r3, #0
 80053d2:	b510      	push	{r4, lr}
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d100      	bne.n	80053da <memcpy+0xa>
 80053d8:	bd10      	pop	{r4, pc}
 80053da:	5ccc      	ldrb	r4, [r1, r3]
 80053dc:	54c4      	strb	r4, [r0, r3]
 80053de:	3301      	adds	r3, #1
 80053e0:	e7f8      	b.n	80053d4 <memcpy+0x4>

080053e2 <memset>:
 80053e2:	0003      	movs	r3, r0
 80053e4:	1882      	adds	r2, r0, r2
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d100      	bne.n	80053ec <memset+0xa>
 80053ea:	4770      	bx	lr
 80053ec:	7019      	strb	r1, [r3, #0]
 80053ee:	3301      	adds	r3, #1
 80053f0:	e7f9      	b.n	80053e6 <memset+0x4>
	...

080053f4 <_free_r>:
 80053f4:	b570      	push	{r4, r5, r6, lr}
 80053f6:	0005      	movs	r5, r0
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d010      	beq.n	800541e <_free_r+0x2a>
 80053fc:	1f0c      	subs	r4, r1, #4
 80053fe:	6823      	ldr	r3, [r4, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	da00      	bge.n	8005406 <_free_r+0x12>
 8005404:	18e4      	adds	r4, r4, r3
 8005406:	0028      	movs	r0, r5
 8005408:	f000 f8c2 	bl	8005590 <__malloc_lock>
 800540c:	4a1d      	ldr	r2, [pc, #116]	; (8005484 <_free_r+0x90>)
 800540e:	6813      	ldr	r3, [r2, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d105      	bne.n	8005420 <_free_r+0x2c>
 8005414:	6063      	str	r3, [r4, #4]
 8005416:	6014      	str	r4, [r2, #0]
 8005418:	0028      	movs	r0, r5
 800541a:	f000 f8ba 	bl	8005592 <__malloc_unlock>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	42a3      	cmp	r3, r4
 8005422:	d909      	bls.n	8005438 <_free_r+0x44>
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	1860      	adds	r0, r4, r1
 8005428:	4283      	cmp	r3, r0
 800542a:	d1f3      	bne.n	8005414 <_free_r+0x20>
 800542c:	6818      	ldr	r0, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	1841      	adds	r1, r0, r1
 8005432:	6021      	str	r1, [r4, #0]
 8005434:	e7ee      	b.n	8005414 <_free_r+0x20>
 8005436:	0013      	movs	r3, r2
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	2a00      	cmp	r2, #0
 800543c:	d001      	beq.n	8005442 <_free_r+0x4e>
 800543e:	42a2      	cmp	r2, r4
 8005440:	d9f9      	bls.n	8005436 <_free_r+0x42>
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	1858      	adds	r0, r3, r1
 8005446:	42a0      	cmp	r0, r4
 8005448:	d10b      	bne.n	8005462 <_free_r+0x6e>
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1809      	adds	r1, r1, r0
 800544e:	1858      	adds	r0, r3, r1
 8005450:	6019      	str	r1, [r3, #0]
 8005452:	4282      	cmp	r2, r0
 8005454:	d1e0      	bne.n	8005418 <_free_r+0x24>
 8005456:	6810      	ldr	r0, [r2, #0]
 8005458:	6852      	ldr	r2, [r2, #4]
 800545a:	1841      	adds	r1, r0, r1
 800545c:	6019      	str	r1, [r3, #0]
 800545e:	605a      	str	r2, [r3, #4]
 8005460:	e7da      	b.n	8005418 <_free_r+0x24>
 8005462:	42a0      	cmp	r0, r4
 8005464:	d902      	bls.n	800546c <_free_r+0x78>
 8005466:	230c      	movs	r3, #12
 8005468:	602b      	str	r3, [r5, #0]
 800546a:	e7d5      	b.n	8005418 <_free_r+0x24>
 800546c:	6821      	ldr	r1, [r4, #0]
 800546e:	1860      	adds	r0, r4, r1
 8005470:	4282      	cmp	r2, r0
 8005472:	d103      	bne.n	800547c <_free_r+0x88>
 8005474:	6810      	ldr	r0, [r2, #0]
 8005476:	6852      	ldr	r2, [r2, #4]
 8005478:	1841      	adds	r1, r0, r1
 800547a:	6021      	str	r1, [r4, #0]
 800547c:	6062      	str	r2, [r4, #4]
 800547e:	605c      	str	r4, [r3, #4]
 8005480:	e7ca      	b.n	8005418 <_free_r+0x24>
 8005482:	46c0      	nop			; (mov r8, r8)
 8005484:	200002c8 	.word	0x200002c8

08005488 <_raise_r>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	0004      	movs	r4, r0
 800548c:	000d      	movs	r5, r1
 800548e:	291f      	cmp	r1, #31
 8005490:	d904      	bls.n	800549c <_raise_r+0x14>
 8005492:	2316      	movs	r3, #22
 8005494:	6003      	str	r3, [r0, #0]
 8005496:	2001      	movs	r0, #1
 8005498:	4240      	negs	r0, r0
 800549a:	bd70      	pop	{r4, r5, r6, pc}
 800549c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d004      	beq.n	80054ac <_raise_r+0x24>
 80054a2:	008a      	lsls	r2, r1, #2
 80054a4:	189b      	adds	r3, r3, r2
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	2a00      	cmp	r2, #0
 80054aa:	d108      	bne.n	80054be <_raise_r+0x36>
 80054ac:	0020      	movs	r0, r4
 80054ae:	f000 f831 	bl	8005514 <_getpid_r>
 80054b2:	002a      	movs	r2, r5
 80054b4:	0001      	movs	r1, r0
 80054b6:	0020      	movs	r0, r4
 80054b8:	f000 f81a 	bl	80054f0 <_kill_r>
 80054bc:	e7ed      	b.n	800549a <_raise_r+0x12>
 80054be:	2000      	movs	r0, #0
 80054c0:	2a01      	cmp	r2, #1
 80054c2:	d0ea      	beq.n	800549a <_raise_r+0x12>
 80054c4:	1c51      	adds	r1, r2, #1
 80054c6:	d103      	bne.n	80054d0 <_raise_r+0x48>
 80054c8:	2316      	movs	r3, #22
 80054ca:	3001      	adds	r0, #1
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	e7e4      	b.n	800549a <_raise_r+0x12>
 80054d0:	2400      	movs	r4, #0
 80054d2:	0028      	movs	r0, r5
 80054d4:	601c      	str	r4, [r3, #0]
 80054d6:	4790      	blx	r2
 80054d8:	0020      	movs	r0, r4
 80054da:	e7de      	b.n	800549a <_raise_r+0x12>

080054dc <raise>:
 80054dc:	b510      	push	{r4, lr}
 80054de:	4b03      	ldr	r3, [pc, #12]	; (80054ec <raise+0x10>)
 80054e0:	0001      	movs	r1, r0
 80054e2:	6818      	ldr	r0, [r3, #0]
 80054e4:	f7ff ffd0 	bl	8005488 <_raise_r>
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	46c0      	nop			; (mov r8, r8)
 80054ec:	2000000c 	.word	0x2000000c

080054f0 <_kill_r>:
 80054f0:	2300      	movs	r3, #0
 80054f2:	b570      	push	{r4, r5, r6, lr}
 80054f4:	4c06      	ldr	r4, [pc, #24]	; (8005510 <_kill_r+0x20>)
 80054f6:	0005      	movs	r5, r0
 80054f8:	0008      	movs	r0, r1
 80054fa:	0011      	movs	r1, r2
 80054fc:	6023      	str	r3, [r4, #0]
 80054fe:	f000 f851 	bl	80055a4 <_kill>
 8005502:	1c43      	adds	r3, r0, #1
 8005504:	d103      	bne.n	800550e <_kill_r+0x1e>
 8005506:	6823      	ldr	r3, [r4, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d000      	beq.n	800550e <_kill_r+0x1e>
 800550c:	602b      	str	r3, [r5, #0]
 800550e:	bd70      	pop	{r4, r5, r6, pc}
 8005510:	200002e8 	.word	0x200002e8

08005514 <_getpid_r>:
 8005514:	b510      	push	{r4, lr}
 8005516:	f000 f83d 	bl	8005594 <_getpid>
 800551a:	bd10      	pop	{r4, pc}

0800551c <__utoa>:
 800551c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800551e:	0017      	movs	r7, r2
 8005520:	b08f      	sub	sp, #60	; 0x3c
 8005522:	2225      	movs	r2, #37	; 0x25
 8005524:	0006      	movs	r6, r0
 8005526:	000d      	movs	r5, r1
 8005528:	a804      	add	r0, sp, #16
 800552a:	4918      	ldr	r1, [pc, #96]	; (800558c <__utoa+0x70>)
 800552c:	f7ff ff50 	bl	80053d0 <memcpy>
 8005530:	aa04      	add	r2, sp, #16
 8005532:	1ebb      	subs	r3, r7, #2
 8005534:	2400      	movs	r4, #0
 8005536:	9203      	str	r2, [sp, #12]
 8005538:	2b22      	cmp	r3, #34	; 0x22
 800553a:	d905      	bls.n	8005548 <__utoa+0x2c>
 800553c:	702c      	strb	r4, [r5, #0]
 800553e:	0025      	movs	r5, r4
 8005540:	0028      	movs	r0, r5
 8005542:	b00f      	add	sp, #60	; 0x3c
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	9c01      	ldr	r4, [sp, #4]
 8005548:	1c63      	adds	r3, r4, #1
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	18eb      	adds	r3, r5, r3
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	0030      	movs	r0, r6
 8005552:	3b01      	subs	r3, #1
 8005554:	0039      	movs	r1, r7
 8005556:	9302      	str	r3, [sp, #8]
 8005558:	f7fa fe5c 	bl	8000214 <__aeabi_uidivmod>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	9a02      	ldr	r2, [sp, #8]
 8005560:	5c5b      	ldrb	r3, [r3, r1]
 8005562:	0030      	movs	r0, r6
 8005564:	7013      	strb	r3, [r2, #0]
 8005566:	0039      	movs	r1, r7
 8005568:	f7fa fdce 	bl	8000108 <__udivsi3>
 800556c:	1e06      	subs	r6, r0, #0
 800556e:	d1ea      	bne.n	8005546 <__utoa+0x2a>
 8005570:	9b00      	ldr	r3, [sp, #0]
 8005572:	7018      	strb	r0, [r3, #0]
 8005574:	002b      	movs	r3, r5
 8005576:	1b5a      	subs	r2, r3, r5
 8005578:	4294      	cmp	r4, r2
 800557a:	dde1      	ble.n	8005540 <__utoa+0x24>
 800557c:	781a      	ldrb	r2, [r3, #0]
 800557e:	5d29      	ldrb	r1, [r5, r4]
 8005580:	7019      	strb	r1, [r3, #0]
 8005582:	552a      	strb	r2, [r5, r4]
 8005584:	3301      	adds	r3, #1
 8005586:	3c01      	subs	r4, #1
 8005588:	e7f5      	b.n	8005576 <__utoa+0x5a>
 800558a:	46c0      	nop			; (mov r8, r8)
 800558c:	08005a80 	.word	0x08005a80

08005590 <__malloc_lock>:
 8005590:	4770      	bx	lr

08005592 <__malloc_unlock>:
 8005592:	4770      	bx	lr

08005594 <_getpid>:
 8005594:	2258      	movs	r2, #88	; 0x58
 8005596:	2001      	movs	r0, #1
 8005598:	4b01      	ldr	r3, [pc, #4]	; (80055a0 <_getpid+0xc>)
 800559a:	4240      	negs	r0, r0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	4770      	bx	lr
 80055a0:	200002e8 	.word	0x200002e8

080055a4 <_kill>:
 80055a4:	2258      	movs	r2, #88	; 0x58
 80055a6:	2001      	movs	r0, #1
 80055a8:	4b01      	ldr	r3, [pc, #4]	; (80055b0 <_kill+0xc>)
 80055aa:	4240      	negs	r0, r0
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	4770      	bx	lr
 80055b0:	200002e8 	.word	0x200002e8

080055b4 <_exit>:
 80055b4:	e7fe      	b.n	80055b4 <_exit>
	...

080055b8 <_init>:
 80055b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ba:	46c0      	nop			; (mov r8, r8)
 80055bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055be:	bc08      	pop	{r3}
 80055c0:	469e      	mov	lr, r3
 80055c2:	4770      	bx	lr

080055c4 <_fini>:
 80055c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055c6:	46c0      	nop			; (mov r8, r8)
 80055c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ca:	bc08      	pop	{r3}
 80055cc:	469e      	mov	lr, r3
 80055ce:	4770      	bx	lr
