
Licznik.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002fa4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  080030d8  080030d8  000130d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080030e0  080030e0  000130e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  20000000  080030e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000006c  2000006c  08003150  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000080  200000d8  08003150  000200d8  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000bb37  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002e05  00000000  00000000  0002bbcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000958  00000000  00000000  0002e9d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000810  00000000  00000000  0002f328  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00004784  00000000  00000000  0002fb38  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003786  00000000  00000000  000342bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00037a42  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001f68  00000000  00000000  00037ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00039a28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800304c 	.word	0x0800304c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800304c 	.word	0x0800304c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000226:	1dfb      	adds	r3, r7, #7
 8000228:	2200      	movs	r2, #0
 800022a:	701a      	strb	r2, [r3, #0]
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800022c:	4b0b      	ldr	r3, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 800022e:	4a0b      	ldr	r2, [pc, #44]	; (800025c <HAL_Init+0x3c>)
 8000230:	6812      	ldr	r2, [r2, #0]
 8000232:	2102      	movs	r1, #2
 8000234:	430a      	orrs	r2, r1
 8000236:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000238:	2003      	movs	r0, #3
 800023a:	f000 f811 	bl	8000260 <HAL_InitTick>
 800023e:	1e03      	subs	r3, r0, #0
 8000240:	d003      	beq.n	800024a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000242:	1dfb      	adds	r3, r7, #7
 8000244:	2201      	movs	r2, #1
 8000246:	701a      	strb	r2, [r3, #0]
 8000248:	e001      	b.n	800024e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800024a:	f000 fe30 	bl	8000eae <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800024e:	1dfb      	adds	r3, r7, #7
 8000250:	781b      	ldrb	r3, [r3, #0]
}
 8000252:	0018      	movs	r0, r3
 8000254:	46bd      	mov	sp, r7
 8000256:	b002      	add	sp, #8
 8000258:	bd80      	pop	{r7, pc}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	40022000 	.word	0x40022000

08000260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000268:	230f      	movs	r3, #15
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000270:	4b0f      	ldr	r3, [pc, #60]	; (80002b0 <HAL_InitTick+0x50>)
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	23fa      	movs	r3, #250	; 0xfa
 8000276:	0099      	lsls	r1, r3, #2
 8000278:	0010      	movs	r0, r2
 800027a:	f7ff ff45 	bl	8000108 <__udivsi3>
 800027e:	0003      	movs	r3, r0
 8000280:	0018      	movs	r0, r3
 8000282:	f000 f8d5 	bl	8000430 <HAL_SYSTICK_Config>
 8000286:	1e03      	subs	r3, r0, #0
 8000288:	d004      	beq.n	8000294 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 800028a:	230f      	movs	r3, #15
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
 8000292:	e006      	b.n	80002a2 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	2301      	movs	r3, #1
 8000298:	425b      	negs	r3, r3
 800029a:	2200      	movs	r2, #0
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8b1 	bl	8000404 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 80002a2:	230f      	movs	r3, #15
 80002a4:	18fb      	adds	r3, r7, r3
 80002a6:	781b      	ldrb	r3, [r3, #0]
}
 80002a8:	0018      	movs	r0, r3
 80002aa:	46bd      	mov	sp, r7
 80002ac:	b004      	add	sp, #16
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004

080002b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
  uwTick++;
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <HAL_IncTick+0x14>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	1c5a      	adds	r2, r3, #1
 80002be:	4b02      	ldr	r3, [pc, #8]	; (80002c8 <HAL_IncTick+0x14>)
 80002c0:	601a      	str	r2, [r3, #0]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	200000bc 	.word	0x200000bc

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b02      	ldr	r3, [pc, #8]	; (80002dc <HAL_GetTick+0x10>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	0018      	movs	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	46c0      	nop			; (mov r8, r8)
 80002dc:	200000bc 	.word	0x200000bc

080002e0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002e0:	b5b0      	push	{r4, r5, r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	0002      	movs	r2, r0
 80002e8:	6039      	str	r1, [r7, #0]
 80002ea:	1dfb      	adds	r3, r7, #7
 80002ec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80002ee:	1dfb      	adds	r3, r7, #7
 80002f0:	781b      	ldrb	r3, [r3, #0]
 80002f2:	2b7f      	cmp	r3, #127	; 0x7f
 80002f4:	d932      	bls.n	800035c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002f6:	4c2f      	ldr	r4, [pc, #188]	; (80003b4 <NVIC_SetPriority+0xd4>)
 80002f8:	1dfb      	adds	r3, r7, #7
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	001a      	movs	r2, r3
 80002fe:	230f      	movs	r3, #15
 8000300:	4013      	ands	r3, r2
 8000302:	3b08      	subs	r3, #8
 8000304:	0899      	lsrs	r1, r3, #2
 8000306:	4a2b      	ldr	r2, [pc, #172]	; (80003b4 <NVIC_SetPriority+0xd4>)
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	0018      	movs	r0, r3
 800030e:	230f      	movs	r3, #15
 8000310:	4003      	ands	r3, r0
 8000312:	3b08      	subs	r3, #8
 8000314:	089b      	lsrs	r3, r3, #2
 8000316:	3306      	adds	r3, #6
 8000318:	009b      	lsls	r3, r3, #2
 800031a:	18d3      	adds	r3, r2, r3
 800031c:	3304      	adds	r3, #4
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	1dfa      	adds	r2, r7, #7
 8000322:	7812      	ldrb	r2, [r2, #0]
 8000324:	0010      	movs	r0, r2
 8000326:	2203      	movs	r2, #3
 8000328:	4002      	ands	r2, r0
 800032a:	00d2      	lsls	r2, r2, #3
 800032c:	20ff      	movs	r0, #255	; 0xff
 800032e:	4090      	lsls	r0, r2
 8000330:	0002      	movs	r2, r0
 8000332:	43d2      	mvns	r2, r2
 8000334:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	019b      	lsls	r3, r3, #6
 800033a:	20ff      	movs	r0, #255	; 0xff
 800033c:	4018      	ands	r0, r3
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	001d      	movs	r5, r3
 8000344:	2303      	movs	r3, #3
 8000346:	402b      	ands	r3, r5
 8000348:	00db      	lsls	r3, r3, #3
 800034a:	4098      	lsls	r0, r3
 800034c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034e:	431a      	orrs	r2, r3
 8000350:	1d8b      	adds	r3, r1, #6
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	18e3      	adds	r3, r4, r3
 8000356:	3304      	adds	r3, #4
 8000358:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800035a:	e027      	b.n	80003ac <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800035c:	4c16      	ldr	r4, [pc, #88]	; (80003b8 <NVIC_SetPriority+0xd8>)
 800035e:	1dfb      	adds	r3, r7, #7
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b25b      	sxtb	r3, r3
 8000364:	089b      	lsrs	r3, r3, #2
 8000366:	4914      	ldr	r1, [pc, #80]	; (80003b8 <NVIC_SetPriority+0xd8>)
 8000368:	1dfa      	adds	r2, r7, #7
 800036a:	7812      	ldrb	r2, [r2, #0]
 800036c:	b252      	sxtb	r2, r2
 800036e:	0892      	lsrs	r2, r2, #2
 8000370:	32c0      	adds	r2, #192	; 0xc0
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	5852      	ldr	r2, [r2, r1]
 8000376:	1df9      	adds	r1, r7, #7
 8000378:	7809      	ldrb	r1, [r1, #0]
 800037a:	0008      	movs	r0, r1
 800037c:	2103      	movs	r1, #3
 800037e:	4001      	ands	r1, r0
 8000380:	00c9      	lsls	r1, r1, #3
 8000382:	20ff      	movs	r0, #255	; 0xff
 8000384:	4088      	lsls	r0, r1
 8000386:	0001      	movs	r1, r0
 8000388:	43c9      	mvns	r1, r1
 800038a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800038c:	683a      	ldr	r2, [r7, #0]
 800038e:	0192      	lsls	r2, r2, #6
 8000390:	20ff      	movs	r0, #255	; 0xff
 8000392:	4010      	ands	r0, r2
 8000394:	1dfa      	adds	r2, r7, #7
 8000396:	7812      	ldrb	r2, [r2, #0]
 8000398:	0015      	movs	r5, r2
 800039a:	2203      	movs	r2, #3
 800039c:	402a      	ands	r2, r5
 800039e:	00d2      	lsls	r2, r2, #3
 80003a0:	4090      	lsls	r0, r2
 80003a2:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003a4:	430a      	orrs	r2, r1
 80003a6:	33c0      	adds	r3, #192	; 0xc0
 80003a8:	009b      	lsls	r3, r3, #2
 80003aa:	511a      	str	r2, [r3, r4]
}
 80003ac:	46c0      	nop			; (mov r8, r8)
 80003ae:	46bd      	mov	sp, r7
 80003b0:	b002      	add	sp, #8
 80003b2:	bdb0      	pop	{r4, r5, r7, pc}
 80003b4:	e000ed00 	.word	0xe000ed00
 80003b8:	e000e100 	.word	0xe000e100

080003bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	3b01      	subs	r3, #1
 80003c8:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <SysTick_Config+0x40>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d901      	bls.n	80003d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003ce:	2301      	movs	r3, #1
 80003d0:	e010      	b.n	80003f4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SysTick_Config+0x44>)
 80003d4:	687a      	ldr	r2, [r7, #4]
 80003d6:	3a01      	subs	r2, #1
 80003d8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003da:	2301      	movs	r3, #1
 80003dc:	425b      	negs	r3, r3
 80003de:	2103      	movs	r1, #3
 80003e0:	0018      	movs	r0, r3
 80003e2:	f7ff ff7d 	bl	80002e0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e6:	4b06      	ldr	r3, [pc, #24]	; (8000400 <SysTick_Config+0x44>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ec:	4b04      	ldr	r3, [pc, #16]	; (8000400 <SysTick_Config+0x44>)
 80003ee:	2207      	movs	r2, #7
 80003f0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003f2:	2300      	movs	r3, #0
}
 80003f4:	0018      	movs	r0, r3
 80003f6:	46bd      	mov	sp, r7
 80003f8:	b002      	add	sp, #8
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	00ffffff 	.word	0x00ffffff
 8000400:	e000e010 	.word	0xe000e010

08000404 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000404:	b580      	push	{r7, lr}
 8000406:	b084      	sub	sp, #16
 8000408:	af00      	add	r7, sp, #0
 800040a:	60b9      	str	r1, [r7, #8]
 800040c:	607a      	str	r2, [r7, #4]
 800040e:	230f      	movs	r3, #15
 8000410:	18fb      	adds	r3, r7, r3
 8000412:	1c02      	adds	r2, r0, #0
 8000414:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000416:	68ba      	ldr	r2, [r7, #8]
 8000418:	230f      	movs	r3, #15
 800041a:	18fb      	adds	r3, r7, r3
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	b25b      	sxtb	r3, r3
 8000420:	0011      	movs	r1, r2
 8000422:	0018      	movs	r0, r3
 8000424:	f7ff ff5c 	bl	80002e0 <NVIC_SetPriority>
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b004      	add	sp, #16
 800042e:	bd80      	pop	{r7, pc}

08000430 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0018      	movs	r0, r3
 800043c:	f7ff ffbe 	bl	80003bc <SysTick_Config>
 8000440:	0003      	movs	r3, r0
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b084      	sub	sp, #16
 8000450:	af00      	add	r7, sp, #0
 8000452:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000454:	f7ff ff3a 	bl	80002cc <HAL_GetTick>
 8000458:	0003      	movs	r3, r0
 800045a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800045c:	e00f      	b.n	800047e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	3301      	adds	r3, #1
 8000462:	d00c      	beq.n	800047e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d007      	beq.n	800047a <FLASH_WaitForLastOperation+0x2e>
 800046a:	f7ff ff2f 	bl	80002cc <HAL_GetTick>
 800046e:	0002      	movs	r2, r0
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	1ad2      	subs	r2, r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	429a      	cmp	r2, r3
 8000478:	d901      	bls.n	800047e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800047a:	2303      	movs	r3, #3
 800047c:	e052      	b.n	8000524 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800047e:	4b2b      	ldr	r3, [pc, #172]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 8000480:	699b      	ldr	r3, [r3, #24]
 8000482:	2201      	movs	r2, #1
 8000484:	4013      	ands	r3, r2
 8000486:	2b01      	cmp	r3, #1
 8000488:	d0e9      	beq.n	800045e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800048a:	4b28      	ldr	r3, [pc, #160]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 800048c:	699b      	ldr	r3, [r3, #24]
 800048e:	2202      	movs	r2, #2
 8000490:	4013      	ands	r3, r2
 8000492:	2b02      	cmp	r3, #2
 8000494:	d102      	bne.n	800049c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 8000498:	2202      	movs	r2, #2
 800049a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800049c:	4b23      	ldr	r3, [pc, #140]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 800049e:	699a      	ldr	r2, [r3, #24]
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	005b      	lsls	r3, r3, #1
 80004a4:	401a      	ands	r2, r3
 80004a6:	2380      	movs	r3, #128	; 0x80
 80004a8:	005b      	lsls	r3, r3, #1
 80004aa:	429a      	cmp	r2, r3
 80004ac:	d035      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80004ae:	4b1f      	ldr	r3, [pc, #124]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 80004b0:	699a      	ldr	r2, [r3, #24]
 80004b2:	2380      	movs	r3, #128	; 0x80
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 80004b8:	2380      	movs	r3, #128	; 0x80
 80004ba:	009b      	lsls	r3, r3, #2
 80004bc:	429a      	cmp	r2, r3
 80004be:	d02c      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 80004c2:	699a      	ldr	r2, [r3, #24]
 80004c4:	2380      	movs	r3, #128	; 0x80
 80004c6:	00db      	lsls	r3, r3, #3
 80004c8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	00db      	lsls	r3, r3, #3
 80004ce:	429a      	cmp	r2, r3
 80004d0:	d023      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80004d2:	4b16      	ldr	r3, [pc, #88]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 80004d4:	699a      	ldr	r2, [r3, #24]
 80004d6:	2380      	movs	r3, #128	; 0x80
 80004d8:	011b      	lsls	r3, r3, #4
 80004da:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80004dc:	2380      	movs	r3, #128	; 0x80
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	429a      	cmp	r2, r3
 80004e2:	d01a      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 80004e6:	699a      	ldr	r2, [r3, #24]
 80004e8:	2380      	movs	r3, #128	; 0x80
 80004ea:	019b      	lsls	r3, r3, #6
 80004ec:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80004ee:	2380      	movs	r3, #128	; 0x80
 80004f0:	019b      	lsls	r3, r3, #6
 80004f2:	429a      	cmp	r2, r3
 80004f4:	d011      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	2380      	movs	r3, #128	; 0x80
 80004fc:	029b      	lsls	r3, r3, #10
 80004fe:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	029b      	lsls	r3, r3, #10
 8000504:	429a      	cmp	r2, r3
 8000506:	d008      	beq.n	800051a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <FLASH_WaitForLastOperation+0xe0>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	025b      	lsls	r3, r3, #9
 8000510:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8000512:	2380      	movs	r3, #128	; 0x80
 8000514:	025b      	lsls	r3, r3, #9
 8000516:	429a      	cmp	r2, r3
 8000518:	d103      	bne.n	8000522 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800051a:	f000 f809 	bl	8000530 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
 8000520:	e000      	b.n	8000524 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000522:	2300      	movs	r3, #0
}
 8000524:	0018      	movs	r0, r3
 8000526:	46bd      	mov	sp, r7
 8000528:	b004      	add	sp, #16
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40022000 	.word	0x40022000

08000530 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800053a:	4b49      	ldr	r3, [pc, #292]	; (8000660 <FLASH_SetErrorCode+0x130>)
 800053c:	699a      	ldr	r2, [r3, #24]
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	401a      	ands	r2, r3
 8000544:	2380      	movs	r3, #128	; 0x80
 8000546:	005b      	lsls	r3, r3, #1
 8000548:	429a      	cmp	r2, r3
 800054a:	d10a      	bne.n	8000562 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800054c:	4b45      	ldr	r3, [pc, #276]	; (8000664 <FLASH_SetErrorCode+0x134>)
 800054e:	695b      	ldr	r3, [r3, #20]
 8000550:	2202      	movs	r2, #2
 8000552:	431a      	orrs	r2, r3
 8000554:	4b43      	ldr	r3, [pc, #268]	; (8000664 <FLASH_SetErrorCode+0x134>)
 8000556:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	0052      	lsls	r2, r2, #1
 800055e:	4313      	orrs	r3, r2
 8000560:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8000562:	4b3f      	ldr	r3, [pc, #252]	; (8000660 <FLASH_SetErrorCode+0x130>)
 8000564:	699a      	ldr	r2, [r3, #24]
 8000566:	2380      	movs	r3, #128	; 0x80
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	401a      	ands	r2, r3
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	429a      	cmp	r2, r3
 8000572:	d10a      	bne.n	800058a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8000574:	4b3b      	ldr	r3, [pc, #236]	; (8000664 <FLASH_SetErrorCode+0x134>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	2201      	movs	r2, #1
 800057a:	431a      	orrs	r2, r3
 800057c:	4b39      	ldr	r3, [pc, #228]	; (8000664 <FLASH_SetErrorCode+0x134>)
 800057e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2280      	movs	r2, #128	; 0x80
 8000584:	0092      	lsls	r2, r2, #2
 8000586:	4313      	orrs	r3, r2
 8000588:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800058a:	4b35      	ldr	r3, [pc, #212]	; (8000660 <FLASH_SetErrorCode+0x130>)
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	2380      	movs	r3, #128	; 0x80
 8000590:	00db      	lsls	r3, r3, #3
 8000592:	401a      	ands	r2, r3
 8000594:	2380      	movs	r3, #128	; 0x80
 8000596:	00db      	lsls	r3, r3, #3
 8000598:	429a      	cmp	r2, r3
 800059a:	d10a      	bne.n	80005b2 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800059c:	4b31      	ldr	r3, [pc, #196]	; (8000664 <FLASH_SetErrorCode+0x134>)
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	2208      	movs	r2, #8
 80005a2:	431a      	orrs	r2, r3
 80005a4:	4b2f      	ldr	r3, [pc, #188]	; (8000664 <FLASH_SetErrorCode+0x134>)
 80005a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	2280      	movs	r2, #128	; 0x80
 80005ac:	00d2      	lsls	r2, r2, #3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80005b2:	4b2b      	ldr	r3, [pc, #172]	; (8000660 <FLASH_SetErrorCode+0x130>)
 80005b4:	699a      	ldr	r2, [r3, #24]
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	011b      	lsls	r3, r3, #4
 80005ba:	401a      	ands	r2, r3
 80005bc:	2380      	movs	r3, #128	; 0x80
 80005be:	011b      	lsls	r3, r3, #4
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d10a      	bne.n	80005da <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80005c4:	4b27      	ldr	r3, [pc, #156]	; (8000664 <FLASH_SetErrorCode+0x134>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	2204      	movs	r2, #4
 80005ca:	431a      	orrs	r2, r3
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <FLASH_SetErrorCode+0x134>)
 80005ce:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2280      	movs	r2, #128	; 0x80
 80005d4:	0112      	lsls	r2, r2, #4
 80005d6:	4313      	orrs	r3, r2
 80005d8:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80005da:	4b21      	ldr	r3, [pc, #132]	; (8000660 <FLASH_SetErrorCode+0x130>)
 80005dc:	699a      	ldr	r2, [r3, #24]
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	019b      	lsls	r3, r3, #6
 80005e2:	401a      	ands	r2, r3
 80005e4:	2380      	movs	r3, #128	; 0x80
 80005e6:	019b      	lsls	r3, r3, #6
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d10a      	bne.n	8000602 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80005ec:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <FLASH_SetErrorCode+0x134>)
 80005ee:	695b      	ldr	r3, [r3, #20]
 80005f0:	2210      	movs	r2, #16
 80005f2:	431a      	orrs	r2, r3
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <FLASH_SetErrorCode+0x134>)
 80005f6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0192      	lsls	r2, r2, #6
 80005fe:	4313      	orrs	r3, r2
 8000600:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <FLASH_SetErrorCode+0x130>)
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	029b      	lsls	r3, r3, #10
 800060a:	401a      	ands	r2, r3
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	029b      	lsls	r3, r3, #10
 8000610:	429a      	cmp	r2, r3
 8000612:	d109      	bne.n	8000628 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <FLASH_SetErrorCode+0x134>)
 8000616:	695b      	ldr	r3, [r3, #20]
 8000618:	2220      	movs	r2, #32
 800061a:	431a      	orrs	r2, r3
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <FLASH_SetErrorCode+0x134>)
 800061e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2220      	movs	r2, #32
 8000624:	4313      	orrs	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <FLASH_SetErrorCode+0x130>)
 800062a:	699a      	ldr	r2, [r3, #24]
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	025b      	lsls	r3, r3, #9
 8000630:	401a      	ands	r2, r3
 8000632:	2380      	movs	r3, #128	; 0x80
 8000634:	025b      	lsls	r3, r3, #9
 8000636:	429a      	cmp	r2, r3
 8000638:	d10a      	bne.n	8000650 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800063a:	4b0a      	ldr	r3, [pc, #40]	; (8000664 <FLASH_SetErrorCode+0x134>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	2240      	movs	r2, #64	; 0x40
 8000640:	431a      	orrs	r2, r3
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <FLASH_SetErrorCode+0x134>)
 8000644:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2280      	movs	r2, #128	; 0x80
 800064a:	0252      	lsls	r2, r2, #9
 800064c:	4313      	orrs	r3, r2
 800064e:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <FLASH_SetErrorCode+0x130>)
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	619a      	str	r2, [r3, #24]
}  
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40022000 	.word	0x40022000
 8000664:	200000c0 	.word	0x200000c0

08000668 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800066e:	4b11      	ldr	r3, [pc, #68]	; (80006b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	2201      	movs	r2, #1
 8000674:	4013      	ands	r3, r2
 8000676:	d017      	beq.n	80006a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8000678:	f3ef 8310 	mrs	r3, PRIMASK
 800067c:	607b      	str	r3, [r7, #4]
  return(result);
 800067e:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8000680:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8000682:	b672      	cpsid	i
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8000684:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 8000686:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8000688:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800068a:	4b0a      	ldr	r3, [pc, #40]	; (80006b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800068c:	4a0b      	ldr	r2, [pc, #44]	; (80006bc <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f383 8810 	msr	PRIMASK, r3

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800069a:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x4c>)
 800069c:	685b      	ldr	r3, [r3, #4]
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	d001      	beq.n	80006a8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x40>
    {
      return HAL_ERROR;
 80006a4:	2301      	movs	r3, #1
 80006a6:	e000      	b.n	80006aa <HAL_FLASHEx_DATAEEPROM_Unlock+0x42>
    }
  }

  return HAL_OK;  
 80006a8:	2300      	movs	r3, #0
}
 80006aa:	0018      	movs	r0, r3
 80006ac:	46bd      	mov	sp, r7
 80006ae:	b004      	add	sp, #16
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	46c0      	nop			; (mov r8, r8)
 80006b4:	40022000 	.word	0x40022000
 80006b8:	89abcdef 	.word	0x89abcdef
 80006bc:	02030405 	.word	0x02030405

080006c0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80006c6:	4a04      	ldr	r2, [pc, #16]	; (80006d8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 80006c8:	6852      	ldr	r2, [r2, #4]
 80006ca:	2101      	movs	r1, #1
 80006cc:	430a      	orrs	r2, r1
 80006ce:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 80006d0:	2300      	movs	r3, #0
}
 80006d2:	0018      	movs	r0, r3
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40022000 	.word	0x40022000

080006dc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	60f8      	str	r0, [r7, #12]
 80006e4:	60b9      	str	r1, [r7, #8]
 80006e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80006e8:	2317      	movs	r3, #23
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80006f0:	4b25      	ldr	r3, [pc, #148]	; (8000788 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80006f2:	7c1b      	ldrb	r3, [r3, #16]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d101      	bne.n	80006fc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 80006f8:	2302      	movs	r3, #2
 80006fa:	e040      	b.n	800077e <HAL_FLASHEx_DATAEEPROM_Program+0xa2>
 80006fc:	4b22      	ldr	r3, [pc, #136]	; (8000788 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 80006fe:	2201      	movs	r2, #1
 8000700:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000702:	2317      	movs	r3, #23
 8000704:	18fc      	adds	r4, r7, r3
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <HAL_FLASHEx_DATAEEPROM_Program+0xb0>)
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff fe9f 	bl	800044c <FLASH_WaitForLastOperation>
 800070e:	0003      	movs	r3, r0
 8000710:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8000712:	2317      	movs	r3, #23
 8000714:	18fb      	adds	r3, r7, r3
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d12a      	bne.n	8000772 <HAL_FLASHEx_DATAEEPROM_Program+0x96>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800071c:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800071e:	2200      	movs	r2, #0
 8000720:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	2b02      	cmp	r3, #2
 8000726:	d103      	bne.n	8000730 <HAL_FLASHEx_DATAEEPROM_Program+0x54>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	e013      	b.n	8000758 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d104      	bne.n	8000740 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	b292      	uxth	r2, r2
 800073c:	801a      	strh	r2, [r3, #0]
 800073e:	e00b      	b.n	8000758 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d104      	bne.n	8000750 <HAL_FLASHEx_DATAEEPROM_Program+0x74>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	b2d2      	uxtb	r2, r2
 800074c:	701a      	strb	r2, [r3, #0]
 800074e:	e003      	b.n	8000758 <HAL_FLASHEx_DATAEEPROM_Program+0x7c>
    }
    else
    {
      status = HAL_ERROR;
 8000750:	2317      	movs	r3, #23
 8000752:	18fb      	adds	r3, r7, r3
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8000758:	2317      	movs	r3, #23
 800075a:	18fb      	adds	r3, r7, r3
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d007      	beq.n	8000772 <HAL_FLASHEx_DATAEEPROM_Program+0x96>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000762:	2317      	movs	r3, #23
 8000764:	18fc      	adds	r4, r7, r3
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_FLASHEx_DATAEEPROM_Program+0xb0>)
 8000768:	0018      	movs	r0, r3
 800076a:	f7ff fe6f 	bl	800044c <FLASH_WaitForLastOperation>
 800076e:	0003      	movs	r3, r0
 8000770:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000772:	4b05      	ldr	r3, [pc, #20]	; (8000788 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8000774:	2200      	movs	r2, #0
 8000776:	741a      	strb	r2, [r3, #16]

  return status;
 8000778:	2317      	movs	r3, #23
 800077a:	18fb      	adds	r3, r7, r3
 800077c:	781b      	ldrb	r3, [r3, #0]
}
 800077e:	0018      	movs	r0, r3
 8000780:	46bd      	mov	sp, r7
 8000782:	b007      	add	sp, #28
 8000784:	bd90      	pop	{r4, r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	200000c0 	.word	0x200000c0
 800078c:	0000c350 	.word	0x0000c350

08000790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b086      	sub	sp, #24
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80007a6:	e14f      	b.n	8000a48 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2101      	movs	r1, #1
 80007ae:	697a      	ldr	r2, [r7, #20]
 80007b0:	4091      	lsls	r1, r2
 80007b2:	000a      	movs	r2, r1
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d100      	bne.n	80007c0 <HAL_GPIO_Init+0x30>
 80007be:	e140      	b.n	8000a42 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	2b02      	cmp	r3, #2
 80007c6:	d003      	beq.n	80007d0 <HAL_GPIO_Init+0x40>
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	2b12      	cmp	r3, #18
 80007ce:	d123      	bne.n	8000818 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	08da      	lsrs	r2, r3, #3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	3208      	adds	r2, #8
 80007d8:	0092      	lsls	r2, r2, #2
 80007da:	58d3      	ldr	r3, [r2, r3]
 80007dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	2207      	movs	r2, #7
 80007e2:	4013      	ands	r3, r2
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	220f      	movs	r2, #15
 80007e8:	409a      	lsls	r2, r3
 80007ea:	0013      	movs	r3, r2
 80007ec:	43da      	mvns	r2, r3
 80007ee:	693b      	ldr	r3, [r7, #16]
 80007f0:	4013      	ands	r3, r2
 80007f2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	691a      	ldr	r2, [r3, #16]
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	2107      	movs	r1, #7
 80007fc:	400b      	ands	r3, r1
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	409a      	lsls	r2, r3
 8000802:	0013      	movs	r3, r2
 8000804:	693a      	ldr	r2, [r7, #16]
 8000806:	4313      	orrs	r3, r2
 8000808:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	08da      	lsrs	r2, r3, #3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	3208      	adds	r2, #8
 8000812:	0092      	lsls	r2, r2, #2
 8000814:	6939      	ldr	r1, [r7, #16]
 8000816:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d00b      	beq.n	8000838 <HAL_GPIO_Init+0xa8>
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	685b      	ldr	r3, [r3, #4]
 8000824:	2b02      	cmp	r3, #2
 8000826:	d007      	beq.n	8000838 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082c:	2b11      	cmp	r3, #17
 800082e:	d003      	beq.n	8000838 <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b12      	cmp	r3, #18
 8000836:	d130      	bne.n	800089a <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	005b      	lsls	r3, r3, #1
 8000842:	2203      	movs	r2, #3
 8000844:	409a      	lsls	r2, r3
 8000846:	0013      	movs	r3, r2
 8000848:	43da      	mvns	r2, r3
 800084a:	693b      	ldr	r3, [r7, #16]
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	68da      	ldr	r2, [r3, #12]
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	409a      	lsls	r2, r3
 800085a:	0013      	movs	r3, r2
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	4313      	orrs	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	693a      	ldr	r2, [r7, #16]
 8000866:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800086e:	2201      	movs	r2, #1
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
 8000874:	0013      	movs	r3, r2
 8000876:	43da      	mvns	r2, r3
 8000878:	693b      	ldr	r3, [r7, #16]
 800087a:	4013      	ands	r3, r2
 800087c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	091b      	lsrs	r3, r3, #4
 8000884:	2201      	movs	r2, #1
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
 800088c:	0013      	movs	r3, r2
 800088e:	693a      	ldr	r2, [r7, #16]
 8000890:	4313      	orrs	r3, r2
 8000892:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	693a      	ldr	r2, [r7, #16]
 8000898:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	005b      	lsls	r3, r3, #1
 80008a4:	2203      	movs	r2, #3
 80008a6:	409a      	lsls	r2, r3
 80008a8:	0013      	movs	r3, r2
 80008aa:	43da      	mvns	r2, r3
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	4013      	ands	r3, r2
 80008b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2203      	movs	r2, #3
 80008b8:	401a      	ands	r2, r3
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	005b      	lsls	r3, r3, #1
 80008be:	409a      	lsls	r2, r3
 80008c0:	0013      	movs	r3, r2
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008d4:	697b      	ldr	r3, [r7, #20]
 80008d6:	005b      	lsls	r3, r3, #1
 80008d8:	2203      	movs	r2, #3
 80008da:	409a      	lsls	r2, r3
 80008dc:	0013      	movs	r3, r2
 80008de:	43da      	mvns	r2, r3
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	4013      	ands	r3, r2
 80008e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	689a      	ldr	r2, [r3, #8]
 80008ea:	697b      	ldr	r3, [r7, #20]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	409a      	lsls	r2, r3
 80008f0:	0013      	movs	r3, r2
 80008f2:	693a      	ldr	r2, [r7, #16]
 80008f4:	4313      	orrs	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	685a      	ldr	r2, [r3, #4]
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	055b      	lsls	r3, r3, #21
 8000906:	4013      	ands	r3, r2
 8000908:	d100      	bne.n	800090c <HAL_GPIO_Init+0x17c>
 800090a:	e09a      	b.n	8000a42 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090c:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 800090e:	4a54      	ldr	r2, [pc, #336]	; (8000a60 <HAL_GPIO_Init+0x2d0>)
 8000910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000912:	2101      	movs	r1, #1
 8000914:	430a      	orrs	r2, r1
 8000916:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 8000918:	4a52      	ldr	r2, [pc, #328]	; (8000a64 <HAL_GPIO_Init+0x2d4>)
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	089b      	lsrs	r3, r3, #2
 800091e:	3302      	adds	r3, #2
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	589b      	ldr	r3, [r3, r2]
 8000924:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	2203      	movs	r2, #3
 800092a:	4013      	ands	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	220f      	movs	r2, #15
 8000930:	409a      	lsls	r2, r3
 8000932:	0013      	movs	r3, r2
 8000934:	43da      	mvns	r2, r3
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	4013      	ands	r3, r2
 800093a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800093c:	687a      	ldr	r2, [r7, #4]
 800093e:	23a0      	movs	r3, #160	; 0xa0
 8000940:	05db      	lsls	r3, r3, #23
 8000942:	429a      	cmp	r2, r3
 8000944:	d019      	beq.n	800097a <HAL_GPIO_Init+0x1ea>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a47      	ldr	r2, [pc, #284]	; (8000a68 <HAL_GPIO_Init+0x2d8>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d013      	beq.n	8000976 <HAL_GPIO_Init+0x1e6>
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4a46      	ldr	r2, [pc, #280]	; (8000a6c <HAL_GPIO_Init+0x2dc>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d00d      	beq.n	8000972 <HAL_GPIO_Init+0x1e2>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a45      	ldr	r2, [pc, #276]	; (8000a70 <HAL_GPIO_Init+0x2e0>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d007      	beq.n	800096e <HAL_GPIO_Init+0x1de>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a44      	ldr	r2, [pc, #272]	; (8000a74 <HAL_GPIO_Init+0x2e4>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d101      	bne.n	800096a <HAL_GPIO_Init+0x1da>
 8000966:	2305      	movs	r3, #5
 8000968:	e008      	b.n	800097c <HAL_GPIO_Init+0x1ec>
 800096a:	2306      	movs	r3, #6
 800096c:	e006      	b.n	800097c <HAL_GPIO_Init+0x1ec>
 800096e:	2303      	movs	r3, #3
 8000970:	e004      	b.n	800097c <HAL_GPIO_Init+0x1ec>
 8000972:	2302      	movs	r3, #2
 8000974:	e002      	b.n	800097c <HAL_GPIO_Init+0x1ec>
 8000976:	2301      	movs	r3, #1
 8000978:	e000      	b.n	800097c <HAL_GPIO_Init+0x1ec>
 800097a:	2300      	movs	r3, #0
 800097c:	697a      	ldr	r2, [r7, #20]
 800097e:	2103      	movs	r1, #3
 8000980:	400a      	ands	r2, r1
 8000982:	0092      	lsls	r2, r2, #2
 8000984:	4093      	lsls	r3, r2
 8000986:	693a      	ldr	r2, [r7, #16]
 8000988:	4313      	orrs	r3, r2
 800098a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800098c:	4935      	ldr	r1, [pc, #212]	; (8000a64 <HAL_GPIO_Init+0x2d4>)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	089b      	lsrs	r3, r3, #2
 8000992:	3302      	adds	r3, #2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800099a:	4b37      	ldr	r3, [pc, #220]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	43da      	mvns	r2, r3
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	4013      	ands	r3, r2
 80009a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	025b      	lsls	r3, r3, #9
 80009b2:	4013      	ands	r3, r2
 80009b4:	d003      	beq.n	80009be <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009be:	4b2e      	ldr	r3, [pc, #184]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	43da      	mvns	r2, r3
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	2380      	movs	r3, #128	; 0x80
 80009da:	029b      	lsls	r3, r3, #10
 80009dc:	4013      	ands	r3, r2
 80009de:	d003      	beq.n	80009e8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80009e0:	693a      	ldr	r2, [r7, #16]
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 80009ea:	693a      	ldr	r2, [r7, #16]
 80009ec:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 80009f0:	689b      	ldr	r3, [r3, #8]
 80009f2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	43da      	mvns	r2, r3
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	4013      	ands	r3, r2
 80009fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685a      	ldr	r2, [r3, #4]
 8000a02:	2380      	movs	r3, #128	; 0x80
 8000a04:	035b      	lsls	r3, r3, #13
 8000a06:	4013      	ands	r3, r2
 8000a08:	d003      	beq.n	8000a12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	43da      	mvns	r2, r3
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685a      	ldr	r2, [r3, #4]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	039b      	lsls	r3, r3, #14
 8000a30:	4013      	ands	r3, r2
 8000a32:	d003      	beq.n	8000a3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a3c:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <HAL_GPIO_Init+0x2e8>)
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a48:	683b      	ldr	r3, [r7, #0]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	40da      	lsrs	r2, r3
 8000a50:	1e13      	subs	r3, r2, #0
 8000a52:	d000      	beq.n	8000a56 <HAL_GPIO_Init+0x2c6>
 8000a54:	e6a8      	b.n	80007a8 <HAL_GPIO_Init+0x18>
  }
}
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b006      	add	sp, #24
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	40021000 	.word	0x40021000
 8000a64:	40010000 	.word	0x40010000
 8000a68:	50000400 	.word	0x50000400
 8000a6c:	50000800 	.word	0x50000800
 8000a70:	50000c00 	.word	0x50000c00
 8000a74:	50001c00 	.word	0x50001c00
 8000a78:	40010400 	.word	0x40010400

08000a7c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
 8000a84:	0008      	movs	r0, r1
 8000a86:	0011      	movs	r1, r2
 8000a88:	1cbb      	adds	r3, r7, #2
 8000a8a:	1c02      	adds	r2, r0, #0
 8000a8c:	801a      	strh	r2, [r3, #0]
 8000a8e:	1c7b      	adds	r3, r7, #1
 8000a90:	1c0a      	adds	r2, r1, #0
 8000a92:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 8000a94:	1c7b      	adds	r3, r7, #1
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d004      	beq.n	8000aa6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a9c:	1cbb      	adds	r3, r7, #2
 8000a9e:	881a      	ldrh	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000aa4:	e003      	b.n	8000aae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8000aa6:	1cbb      	adds	r3, r7, #2
 8000aa8:	881a      	ldrh	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	b002      	add	sp, #8
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <HAL_LCD_Init>:
  *         The LCD HighDrive can be enabled/disabled using related macros up to user.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Init(LCD_HandleTypeDef *hlcd)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	60bb      	str	r3, [r7, #8]
  uint8_t counter = 0U;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]
    
  /* Check the LCD handle allocation */
  if(hlcd == NULL)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d101      	bne.n	8000ad6 <HAL_LCD_Init+0x1e>
  {
    return HAL_ERROR;
 8000ad2:	2301      	movs	r3, #1
 8000ad4:	e0ba      	b.n	8000c4c <HAL_LCD_Init+0x194>
  assert_param(IS_LCD_CONTRAST(hlcd->Init.Contrast)); 
  assert_param(IS_LCD_BLINK_FREQUENCY(hlcd->Init.BlinkFrequency)); 
  assert_param(IS_LCD_BLINK_MODE(hlcd->Init.BlinkMode)); 
  assert_param(IS_LCD_MUXSEGMENT(hlcd->Init.MuxSegment));
  
  if(hlcd->State == HAL_LCD_STATE_RESET)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	2235      	movs	r2, #53	; 0x35
 8000ada:	5c9b      	ldrb	r3, [r3, r2]
 8000adc:	b2db      	uxtb	r3, r3
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d107      	bne.n	8000af2 <HAL_LCD_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    __HAL_UNLOCK(hlcd);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2234      	movs	r2, #52	; 0x34
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	5499      	strb	r1, [r3, r2]

    /* Initialize the low level hardware (MSP) */
    HAL_LCD_MspInit(hlcd);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	0018      	movs	r0, r3
 8000aee:	f000 f8b3 	bl	8000c58 <HAL_LCD_MspInit>
  }
  
  hlcd->State = HAL_LCD_STATE_BUSY;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2235      	movs	r2, #53	; 0x35
 8000af6:	2102      	movs	r1, #2
 8000af8:	5499      	strb	r1, [r3, r2]
  
  /* Disable the peripheral */
  __HAL_LCD_DISABLE(hlcd);
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	6812      	ldr	r2, [r2, #0]
 8000b02:	6812      	ldr	r2, [r2, #0]
 8000b04:	2101      	movs	r1, #1
 8000b06:	438a      	bics	r2, r1
 8000b08:	601a      	str	r2, [r3, #0]
  
  /* Clear the LCD_RAM registers and enable the display request by setting the UDR bit
     in the LCD_SR register */
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2200      	movs	r2, #0
 8000b10:	701a      	strb	r2, [r3, #0]
 8000b12:	e011      	b.n	8000b38 <HAL_LCD_Init+0x80>
  {
    hlcd->Instance->RAM[counter] = 0U;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	781b      	ldrb	r3, [r3, #0]
 8000b1e:	3304      	adds	r3, #4
 8000b20:	009b      	lsls	r3, r3, #2
 8000b22:	18d3      	adds	r3, r2, r3
 8000b24:	3304      	adds	r3, #4
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
  for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781a      	ldrb	r2, [r3, #0]
 8000b30:	230f      	movs	r3, #15
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	3201      	adds	r2, #1
 8000b36:	701a      	strb	r2, [r3, #0]
 8000b38:	230f      	movs	r3, #15
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b0f      	cmp	r3, #15
 8000b40:	d9e8      	bls.n	8000b14 <HAL_LCD_Init+0x5c>
  }
  /* Enable the display request */
  SET_BIT(hlcd->Instance->SR, LCD_SR_UDR);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	6812      	ldr	r2, [r2, #0]
 8000b4a:	6892      	ldr	r2, [r2, #8]
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	609a      	str	r2, [r3, #8]
     Set DEAD[2:0] bits according to hlcd->Init.DeadTime value
     Set PON[2:0] bits according to hlcd->Init.PulseOnDuration value 
     Set CC[2:0] bits according to hlcd->Init.Contrast value
     Set HD[0] bit according to hlcd->Init.HighDrive value*/

  MODIFY_REG(hlcd->Instance->FCR, \
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	6852      	ldr	r2, [r2, #4]
 8000b5c:	493d      	ldr	r1, [pc, #244]	; (8000c54 <HAL_LCD_Init+0x19c>)
 8000b5e:	4011      	ands	r1, r2
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	6850      	ldr	r0, [r2, #4]
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	6892      	ldr	r2, [r2, #8]
 8000b68:	4310      	orrs	r0, r2
 8000b6a:	687a      	ldr	r2, [r7, #4]
 8000b6c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000b6e:	4310      	orrs	r0, r2
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000b74:	4310      	orrs	r0, r2
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	69d2      	ldr	r2, [r2, #28]
 8000b7a:	4310      	orrs	r0, r2
 8000b7c:	687a      	ldr	r2, [r7, #4]
 8000b7e:	6a12      	ldr	r2, [r2, #32]
 8000b80:	4310      	orrs	r0, r2
 8000b82:	687a      	ldr	r2, [r7, #4]
 8000b84:	6992      	ldr	r2, [r2, #24]
 8000b86:	4310      	orrs	r0, r2
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000b8c:	4302      	orrs	r2, r0
 8000b8e:	430a      	orrs	r2, r1
 8000b90:	605a      	str	r2, [r3, #4]
             hlcd->Init.DeadTime | hlcd->Init.PulseOnDuration | hlcd->Init.Contrast | hlcd->Init.HighDrive));

  /* Wait until LCD Frame Control Register Synchronization flag (FCRSF) is set in the LCD_SR register 
     This bit is set by hardware each time the LCD_FCR register is updated in the LCDCLK
     domain. It is cleared by hardware when writing to the LCD_FCR register.*/
  LCD_WaitForSynchro(hlcd);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	0018      	movs	r0, r3
 8000b96:	f000 f965 	bl	8000e64 <LCD_WaitForSynchro>
  /* Configure the LCD Duty, Bias, Voltage Source, Dead Time:
     Set DUTY[2:0] bits according to hlcd->Init.Duty value 
     Set BIAS[1:0] bits according to hlcd->Init.Bias value
     Set VSEL bit according to hlcd->Init.VoltageSource value
     Set MUX_SEG bit according to hlcd->Init.MuxSegment value */
  MODIFY_REG(hlcd->Instance->CR, \
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6812      	ldr	r2, [r2, #0]
 8000ba2:	6812      	ldr	r2, [r2, #0]
 8000ba4:	21fe      	movs	r1, #254	; 0xfe
 8000ba6:	438a      	bics	r2, r1
 8000ba8:	0011      	movs	r1, r2
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68d0      	ldr	r0, [r2, #12]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	6912      	ldr	r2, [r2, #16]
 8000bb2:	4310      	orrs	r0, r2
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	6952      	ldr	r2, [r2, #20]
 8000bb8:	4310      	orrs	r0, r2
 8000bba:	687a      	ldr	r2, [r7, #4]
 8000bbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000bbe:	4302      	orrs	r2, r0
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
             (LCD_CR_DUTY | LCD_CR_BIAS | LCD_CR_VSEL | LCD_CR_MUX_SEG), \
             (hlcd->Init.Duty | hlcd->Init.Bias | hlcd->Init.VoltageSource | hlcd->Init.MuxSegment));
  
  /* Enable the peripheral */
  __HAL_LCD_ENABLE(hlcd);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	687a      	ldr	r2, [r7, #4]
 8000bca:	6812      	ldr	r2, [r2, #0]
 8000bcc:	6812      	ldr	r2, [r2, #0]
 8000bce:	2101      	movs	r1, #1
 8000bd0:	430a      	orrs	r2, r1
 8000bd2:	601a      	str	r2, [r3, #0]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000bd4:	f7ff fb7a 	bl	80002cc <HAL_GetTick>
 8000bd8:	0003      	movs	r3, r0
 8000bda:	60bb      	str	r3, [r7, #8]
      
  /* Wait Until the LCD is enabled */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000bdc:	e00d      	b.n	8000bfa <HAL_LCD_Init+0x142>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000bde:	f7ff fb75 	bl	80002cc <HAL_GetTick>
 8000be2:	0002      	movs	r2, r0
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1ad2      	subs	r2, r2, r3
 8000be8:	23fa      	movs	r3, #250	; 0xfa
 8000bea:	009b      	lsls	r3, r3, #2
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d904      	bls.n	8000bfa <HAL_LCD_Init+0x142>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_ENS;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	2208      	movs	r2, #8
 8000bf4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e028      	b.n	8000c4c <HAL_LCD_Init+0x194>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_ENS) == RESET)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	2201      	movs	r2, #1
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d1ea      	bne.n	8000bde <HAL_LCD_Init+0x126>
    } 
  }
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000c08:	f7ff fb60 	bl	80002cc <HAL_GetTick>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	60bb      	str	r3, [r7, #8]
  
  /*!< Wait Until the LCD Booster is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000c10:	e00d      	b.n	8000c2e <HAL_LCD_Init+0x176>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000c12:	f7ff fb5b 	bl	80002cc <HAL_GetTick>
 8000c16:	0002      	movs	r2, r0
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	1ad2      	subs	r2, r2, r3
 8000c1c:	23fa      	movs	r3, #250	; 0xfa
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d904      	bls.n	8000c2e <HAL_LCD_Init+0x176>
    {   
      hlcd->ErrorCode = HAL_LCD_ERROR_RDY;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	2210      	movs	r2, #16
 8000c28:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	e00e      	b.n	8000c4c <HAL_LCD_Init+0x194>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_RDY) == RESET)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	2210      	movs	r2, #16
 8000c36:	4013      	ands	r3, r2
 8000c38:	2b10      	cmp	r3, #16
 8000c3a:	d1ea      	bne.n	8000c12 <HAL_LCD_Init+0x15a>
    } 
  }
 
  /* Initialize the LCD state */
  hlcd->ErrorCode = HAL_LCD_ERROR_NONE;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  hlcd->State= HAL_LCD_STATE_READY;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2235      	movs	r2, #53	; 0x35
 8000c46:	2101      	movs	r1, #1
 8000c48:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000c4a:	2300      	movs	r3, #0
}
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	b004      	add	sp, #16
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	fc00000f 	.word	0xfc00000f

08000c58 <HAL_LCD_MspInit>:
  * @brief  LCD MSP Init.
  * @param  hlcd LCD handle
  * @retval None
  */
 __weak void HAL_LCD_MspInit(LCD_HandleTypeDef *hlcd)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlcd);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_LCD_MspInit could be implemented in the user file
   */ 
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_LCD_Write>:
  *		    SEG[0,39] of COM(n) correspond to LSB bits of related LCD_RAM_REGISTER(2*n)[0,31]
  *		    and LCD_RAM_REGISTER(2*n+1)[0,7] 
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Write(LCD_HandleTypeDef *hlcd, uint32_t RAMRegisterIndex, uint32_t RAMRegisterMask, uint32_t Data)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	60f8      	str	r0, [r7, #12]
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	603b      	str	r3, [r7, #0]
  uint32_t tickstart = 0x00U; 
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  
  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2235      	movs	r2, #53	; 0x35
 8000c7e:	5c9b      	ldrb	r3, [r3, r2]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d005      	beq.n	8000c92 <HAL_LCD_Write+0x2a>
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	2235      	movs	r2, #53	; 0x35
 8000c8a:	5c9b      	ldrb	r3, [r3, r2]
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d148      	bne.n	8000d24 <HAL_LCD_Write+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_LCD_RAM_REGISTER(RAMRegisterIndex));
    
    if(hlcd->State == HAL_LCD_STATE_READY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2235      	movs	r2, #53	; 0x35
 8000c96:	5c9b      	ldrb	r3, [r3, r2]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d12c      	bne.n	8000cf8 <HAL_LCD_Write+0x90>
    {
      /* Process Locked */
      __HAL_LOCK(hlcd);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2234      	movs	r2, #52	; 0x34
 8000ca2:	5c9b      	ldrb	r3, [r3, r2]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_LCD_Write+0x44>
 8000ca8:	2302      	movs	r3, #2
 8000caa:	e03c      	b.n	8000d26 <HAL_LCD_Write+0xbe>
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	2234      	movs	r2, #52	; 0x34
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	5499      	strb	r1, [r3, r2]
      hlcd->State = HAL_LCD_STATE_BUSY;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	2235      	movs	r2, #53	; 0x35
 8000cb8:	2102      	movs	r1, #2
 8000cba:	5499      	strb	r1, [r3, r2]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8000cbc:	f7ff fb06 	bl	80002cc <HAL_GetTick>
 8000cc0:	0003      	movs	r3, r0
 8000cc2:	617b      	str	r3, [r7, #20]
      
      /*!< Wait Until the LCD is ready */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000cc4:	e011      	b.n	8000cea <HAL_LCD_Write+0x82>
      {
        if((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000cc6:	f7ff fb01 	bl	80002cc <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	1ad2      	subs	r2, r2, r3
 8000cd0:	23fa      	movs	r3, #250	; 0xfa
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	429a      	cmp	r2, r3
 8000cd6:	d908      	bls.n	8000cea <HAL_LCD_Write+0x82>
        { 
          hlcd->ErrorCode = HAL_LCD_ERROR_UDR;      
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	2202      	movs	r2, #2
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
          /* Process Unlocked */
          __HAL_UNLOCK(hlcd);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2234      	movs	r2, #52	; 0x34
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e01d      	b.n	8000d26 <HAL_LCD_Write+0xbe>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2204      	movs	r2, #4
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b04      	cmp	r3, #4
 8000cf6:	d0e6      	beq.n	8000cc6 <HAL_LCD_Write+0x5e>
        } 
      }
    }
/* Copy the new Data bytes to LCD RAM register */
    MODIFY_REG(hlcd->Instance->RAM[RAMRegisterIndex], ~(RAMRegisterMask), Data);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6819      	ldr	r1, [r3, #0]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3304      	adds	r3, #4
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	3304      	adds	r3, #4
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	687a      	ldr	r2, [r7, #4]
 8000d0e:	401a      	ands	r2, r3
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	431a      	orrs	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	3304      	adds	r3, #4
 8000d18:	009b      	lsls	r3, r3, #2
 8000d1a:	18cb      	adds	r3, r1, r3
 8000d1c:	3304      	adds	r3, #4
 8000d1e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	e000      	b.n	8000d26 <HAL_LCD_Write+0xbe>
  }
  else
  {
    return HAL_ERROR;
 8000d24:	2301      	movs	r3, #1
  }
}
 8000d26:	0018      	movs	r0, r3
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	b006      	add	sp, #24
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_LCD_Clear>:
  * @brief Clears the LCD RAM registers.
  * @param hlcd: LCD handle
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_Clear(LCD_HandleTypeDef *hlcd)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b084      	sub	sp, #16
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U; 
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
  uint32_t counter = 0U;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]

  if((hlcd->State == HAL_LCD_STATE_READY) || (hlcd->State == HAL_LCD_STATE_BUSY))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2235      	movs	r2, #53	; 0x35
 8000d42:	5c9b      	ldrb	r3, [r3, r2]
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_LCD_Clear+0x28>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2235      	movs	r2, #53	; 0x35
 8000d4e:	5c9b      	ldrb	r3, [r3, r2]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d144      	bne.n	8000de0 <HAL_LCD_Clear+0xb2>
  {
    /* Process Locked */
    __HAL_LOCK(hlcd);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	5c9b      	ldrb	r3, [r3, r2]
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_LCD_Clear+0x36>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e03e      	b.n	8000de2 <HAL_LCD_Clear+0xb4>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2234      	movs	r2, #52	; 0x34
 8000d68:	2101      	movs	r1, #1
 8000d6a:	5499      	strb	r1, [r3, r2]
    
    hlcd->State = HAL_LCD_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2235      	movs	r2, #53	; 0x35
 8000d70:	2102      	movs	r1, #2
 8000d72:	5499      	strb	r1, [r3, r2]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000d74:	f7ff faaa 	bl	80002cc <HAL_GetTick>
 8000d78:	0003      	movs	r3, r0
 8000d7a:	60bb      	str	r3, [r7, #8]
    
    /*!< Wait Until the LCD is ready */
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000d7c:	e011      	b.n	8000da2 <HAL_LCD_Clear+0x74>
    {
      if( (HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000d7e:	f7ff faa5 	bl	80002cc <HAL_GetTick>
 8000d82:	0002      	movs	r2, r0
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	1ad2      	subs	r2, r2, r3
 8000d88:	23fa      	movs	r3, #250	; 0xfa
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d908      	bls.n	8000da2 <HAL_LCD_Clear+0x74>
      { 
        hlcd->ErrorCode = HAL_LCD_ERROR_UDR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2202      	movs	r2, #2
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38

        /* Process Unlocked */
        __HAL_UNLOCK(hlcd);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2234      	movs	r2, #52	; 0x34
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e01f      	b.n	8000de2 <HAL_LCD_Clear+0xb4>
    while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDR) != RESET)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	2204      	movs	r2, #4
 8000daa:	4013      	ands	r3, r2
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	d0e6      	beq.n	8000d7e <HAL_LCD_Clear+0x50>
      } 
    }
    /* Clear the LCD_RAM registers */
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000db0:	2300      	movs	r3, #0
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	e00b      	b.n	8000dce <HAL_LCD_Clear+0xa0>
    {
      hlcd->Instance->RAM[counter] = 0U;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	18d3      	adds	r3, r2, r3
 8000dc2:	3304      	adds	r3, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
    for(counter = LCD_RAM_REGISTER0; counter <= LCD_RAM_REGISTER15; counter++)
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d9f0      	bls.n	8000db6 <HAL_LCD_Clear+0x88>
    }
    
    /* Update the LCD display */
    HAL_LCD_UpdateDisplayRequest(hlcd);     
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 f807 	bl	8000dea <HAL_LCD_UpdateDisplayRequest>
    
    return HAL_OK;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e000      	b.n	8000de2 <HAL_LCD_Clear+0xb4>
  }
  else
  {
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
  }
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_LCD_UpdateDisplayRequest>:
  *         for which commons are active (depending on DUTY). For example if 
  *         DUTY = 1/2, only the LCD_DISPLAY of COM0 and COM1 will be updated.    
  * @retval None
  */
HAL_StatusTypeDef HAL_LCD_UpdateDisplayRequest(LCD_HandleTypeDef *hlcd)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b084      	sub	sp, #16
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
  
  /* Clear the Update Display Done flag before starting the update display request */
  __HAL_LCD_CLEAR_FLAG(hlcd, LCD_FLAG_UDD);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2208      	movs	r2, #8
 8000dfc:	60da      	str	r2, [r3, #12]
  
  /* Enable the display request */
  hlcd->Instance->SR |= LCD_SR_UDR;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	6812      	ldr	r2, [r2, #0]
 8000e06:	6892      	ldr	r2, [r2, #8]
 8000e08:	2104      	movs	r1, #4
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	609a      	str	r2, [r3, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e0e:	f7ff fa5d 	bl	80002cc <HAL_GetTick>
 8000e12:	0003      	movs	r3, r0
 8000e14:	60fb      	str	r3, [r7, #12]
  
  /*!< Wait Until the LCD display is done */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e16:	e011      	b.n	8000e3c <HAL_LCD_UpdateDisplayRequest+0x52>
  {
    if((HAL_GetTick() - tickstart ) > LCD_TIMEOUT_VALUE)
 8000e18:	f7ff fa58 	bl	80002cc <HAL_GetTick>
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	1ad2      	subs	r2, r2, r3
 8000e22:	23fa      	movs	r3, #250	; 0xfa
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d908      	bls.n	8000e3c <HAL_LCD_UpdateDisplayRequest+0x52>
    { 
      hlcd->ErrorCode = HAL_LCD_ERROR_UDD;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2204      	movs	r2, #4
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process Unlocked */
      __HAL_UNLOCK(hlcd);
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2234      	movs	r2, #52	; 0x34
 8000e34:	2100      	movs	r1, #0
 8000e36:	5499      	strb	r1, [r3, r2]
  
      return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e00f      	b.n	8000e5c <HAL_LCD_UpdateDisplayRequest+0x72>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_UDD) == RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	2208      	movs	r2, #8
 8000e44:	4013      	ands	r3, r2
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d1e6      	bne.n	8000e18 <HAL_LCD_UpdateDisplayRequest+0x2e>
    }
  }

  hlcd->State = HAL_LCD_STATE_READY;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2235      	movs	r2, #53	; 0x35
 8000e4e:	2101      	movs	r1, #1
 8000e50:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hlcd);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2234      	movs	r2, #52	; 0x34
 8000e56:	2100      	movs	r1, #0
 8000e58:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b004      	add	sp, #16
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <LCD_WaitForSynchro>:
  *   This function must be called after any write operation to LCD_FCR register.
  * @param  hlcd LCD handle
  * @retval None
  */
HAL_StatusTypeDef LCD_WaitForSynchro(LCD_HandleTypeDef *hlcd)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0x00U; 
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	60fb      	str	r3, [r7, #12]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 8000e70:	f7ff fa2c 	bl	80002cc <HAL_GetTick>
 8000e74:	0003      	movs	r3, r0
 8000e76:	60fb      	str	r3, [r7, #12]

  /* Loop until FCRSF flag is set */
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e78:	e00d      	b.n	8000e96 <LCD_WaitForSynchro+0x32>
  {
    if((HAL_GetTick() - tickstart) > LCD_TIMEOUT_VALUE)
 8000e7a:	f7ff fa27 	bl	80002cc <HAL_GetTick>
 8000e7e:	0002      	movs	r2, r0
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	1ad2      	subs	r2, r2, r3
 8000e84:	23fa      	movs	r3, #250	; 0xfa
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d904      	bls.n	8000e96 <LCD_WaitForSynchro+0x32>
    {       
      hlcd->ErrorCode = HAL_LCD_ERROR_FCRSF;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2201      	movs	r2, #1
 8000e90:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e007      	b.n	8000ea6 <LCD_WaitForSynchro+0x42>
  while(__HAL_LCD_GET_FLAG(hlcd, LCD_FLAG_FCRSF) == RESET)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d1ea      	bne.n	8000e7a <LCD_WaitForSynchro+0x16>
    } 
  }

  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b004      	add	sp, #16
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_MspInit>:
  * @brief  Initializes the Global BSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	af00      	add	r7, sp, #0
  /* NOTE : This function is eventually modified by the user */ 
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	b08b      	sub	sp, #44	; 0x2c
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d102      	bne.n	8000ecc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	f000 fba8 	bl	800161c <HAL_RCC_OscConfig+0x764>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ecc:	4bcd      	ldr	r3, [pc, #820]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ed6:	4bcb      	ldr	r3, [pc, #812]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000ed8:	68da      	ldr	r2, [r3, #12]
 8000eda:	2380      	movs	r3, #128	; 0x80
 8000edc:	025b      	lsls	r3, r3, #9
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	4013      	ands	r3, r2
 8000eea:	d100      	bne.n	8000eee <HAL_RCC_OscConfig+0x36>
 8000eec:	e07e      	b.n	8000fec <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eee:	6a3b      	ldr	r3, [r7, #32]
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d007      	beq.n	8000f04 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef4:	6a3b      	ldr	r3, [r7, #32]
 8000ef6:	2b0c      	cmp	r3, #12
 8000ef8:	d112      	bne.n	8000f20 <HAL_RCC_OscConfig+0x68>
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	025b      	lsls	r3, r3, #9
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d10d      	bne.n	8000f20 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f04:	4bbf      	ldr	r3, [pc, #764]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	2380      	movs	r3, #128	; 0x80
 8000f0a:	029b      	lsls	r3, r3, #10
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	d100      	bne.n	8000f12 <HAL_RCC_OscConfig+0x5a>
 8000f10:	e06b      	b.n	8000fea <HAL_RCC_OscConfig+0x132>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d167      	bne.n	8000fea <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	f000 fb7e 	bl	800161c <HAL_RCC_OscConfig+0x764>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	685a      	ldr	r2, [r3, #4]
 8000f24:	2380      	movs	r3, #128	; 0x80
 8000f26:	025b      	lsls	r3, r3, #9
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d107      	bne.n	8000f3c <HAL_RCC_OscConfig+0x84>
 8000f2c:	4bb5      	ldr	r3, [pc, #724]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f2e:	4ab5      	ldr	r2, [pc, #724]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f30:	6812      	ldr	r2, [r2, #0]
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	0249      	lsls	r1, r1, #9
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e027      	b.n	8000f8c <HAL_RCC_OscConfig+0xd4>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	23a0      	movs	r3, #160	; 0xa0
 8000f42:	02db      	lsls	r3, r3, #11
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d10e      	bne.n	8000f66 <HAL_RCC_OscConfig+0xae>
 8000f48:	4bae      	ldr	r3, [pc, #696]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f4a:	4aae      	ldr	r2, [pc, #696]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	2180      	movs	r1, #128	; 0x80
 8000f50:	02c9      	lsls	r1, r1, #11
 8000f52:	430a      	orrs	r2, r1
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	4bab      	ldr	r3, [pc, #684]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f58:	4aaa      	ldr	r2, [pc, #680]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	0249      	lsls	r1, r1, #9
 8000f60:	430a      	orrs	r2, r1
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	e012      	b.n	8000f8c <HAL_RCC_OscConfig+0xd4>
 8000f66:	4ba7      	ldr	r3, [pc, #668]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f68:	4aa6      	ldr	r2, [pc, #664]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f6a:	6812      	ldr	r2, [r2, #0]
 8000f6c:	49a6      	ldr	r1, [pc, #664]	; (8001208 <HAL_RCC_OscConfig+0x350>)
 8000f6e:	400a      	ands	r2, r1
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	4ba4      	ldr	r3, [pc, #656]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	2380      	movs	r3, #128	; 0x80
 8000f78:	025b      	lsls	r3, r3, #9
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	4ba0      	ldr	r3, [pc, #640]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f82:	4aa0      	ldr	r2, [pc, #640]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000f84:	6812      	ldr	r2, [r2, #0]
 8000f86:	49a1      	ldr	r1, [pc, #644]	; (800120c <HAL_RCC_OscConfig+0x354>)
 8000f88:	400a      	ands	r2, r1
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d015      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff f99a 	bl	80002cc <HAL_GetTick>
 8000f98:	0003      	movs	r3, r0
 8000f9a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f9c:	e009      	b.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9e:	f7ff f995 	bl	80002cc <HAL_GetTick>
 8000fa2:	0002      	movs	r2, r0
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	1ad3      	subs	r3, r2, r3
 8000fa8:	2b64      	cmp	r3, #100	; 0x64
 8000faa:	d902      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fac:	2303      	movs	r3, #3
 8000fae:	f000 fb35 	bl	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fb2:	4b94      	ldr	r3, [pc, #592]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	029b      	lsls	r3, r3, #10
 8000fba:	4013      	ands	r3, r2
 8000fbc:	d0ef      	beq.n	8000f9e <HAL_RCC_OscConfig+0xe6>
 8000fbe:	e015      	b.n	8000fec <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff f984 	bl	80002cc <HAL_GetTick>
 8000fc4:	0003      	movs	r3, r0
 8000fc6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fc8:	e008      	b.n	8000fdc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fca:	f7ff f97f 	bl	80002cc <HAL_GetTick>
 8000fce:	0002      	movs	r2, r0
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	2b64      	cmp	r3, #100	; 0x64
 8000fd6:	d901      	bls.n	8000fdc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	e31f      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fdc:	4b89      	ldr	r3, [pc, #548]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	2380      	movs	r3, #128	; 0x80
 8000fe2:	029b      	lsls	r3, r3, #10
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	d1f0      	bne.n	8000fca <HAL_RCC_OscConfig+0x112>
 8000fe8:	e000      	b.n	8000fec <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fea:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	d100      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x140>
 8000ff6:	e089      	b.n	800110c <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	6a3b      	ldr	r3, [r7, #32]
 8001000:	2b04      	cmp	r3, #4
 8001002:	d005      	beq.n	8001010 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001004:	6a3b      	ldr	r3, [r7, #32]
 8001006:	2b0c      	cmp	r3, #12
 8001008:	d13d      	bne.n	8001086 <HAL_RCC_OscConfig+0x1ce>
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d13a      	bne.n	8001086 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001010:	4b7c      	ldr	r3, [pc, #496]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2204      	movs	r2, #4
 8001016:	4013      	ands	r3, r2
 8001018:	d004      	beq.n	8001024 <HAL_RCC_OscConfig+0x16c>
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e2fb      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001024:	4a77      	ldr	r2, [pc, #476]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001026:	4b77      	ldr	r3, [pc, #476]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	4979      	ldr	r1, [pc, #484]	; (8001210 <HAL_RCC_OscConfig+0x358>)
 800102c:	4019      	ands	r1, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	430b      	orrs	r3, r1
 8001036:	6053      	str	r3, [r2, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001038:	4b72      	ldr	r3, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800103a:	4a72      	ldr	r2, [pc, #456]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800103c:	6812      	ldr	r2, [r2, #0]
 800103e:	2109      	movs	r1, #9
 8001040:	438a      	bics	r2, r1
 8001042:	0011      	movs	r1, r2
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	430a      	orrs	r2, r1
 8001048:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800104a:	f000 fc1b 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 800104e:	0001      	movs	r1, r0
 8001050:	4b6c      	ldr	r3, [pc, #432]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001052:	68db      	ldr	r3, [r3, #12]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	220f      	movs	r2, #15
 8001058:	4013      	ands	r3, r2
 800105a:	4a6e      	ldr	r2, [pc, #440]	; (8001214 <HAL_RCC_OscConfig+0x35c>)
 800105c:	5cd3      	ldrb	r3, [r2, r3]
 800105e:	000a      	movs	r2, r1
 8001060:	40da      	lsrs	r2, r3
 8001062:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <HAL_RCC_OscConfig+0x360>)
 8001064:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001066:	2313      	movs	r3, #19
 8001068:	18fc      	adds	r4, r7, r3
 800106a:	2003      	movs	r0, #3
 800106c:	f7ff f8f8 	bl	8000260 <HAL_InitTick>
 8001070:	0003      	movs	r3, r0
 8001072:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001074:	2313      	movs	r3, #19
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d046      	beq.n	800110c <HAL_RCC_OscConfig+0x254>
      {
        return status;
 800107e:	2313      	movs	r3, #19
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	e2ca      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d026      	beq.n	80010da <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800108c:	4b5d      	ldr	r3, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800108e:	4a5d      	ldr	r2, [pc, #372]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001090:	6812      	ldr	r2, [r2, #0]
 8001092:	2109      	movs	r1, #9
 8001094:	438a      	bics	r2, r1
 8001096:	0011      	movs	r1, r2
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800109e:	f7ff f915 	bl	80002cc <HAL_GetTick>
 80010a2:	0003      	movs	r3, r0
 80010a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff f910 	bl	80002cc <HAL_GetTick>
 80010ac:	0002      	movs	r2, r0
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e2b0      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80010ba:	4b52      	ldr	r3, [pc, #328]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2204      	movs	r2, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	d0f1      	beq.n	80010a8 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010c4:	4a4f      	ldr	r2, [pc, #316]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80010c6:	4b4f      	ldr	r3, [pc, #316]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	4951      	ldr	r1, [pc, #324]	; (8001210 <HAL_RCC_OscConfig+0x358>)
 80010cc:	4019      	ands	r1, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	691b      	ldr	r3, [r3, #16]
 80010d2:	021b      	lsls	r3, r3, #8
 80010d4:	430b      	orrs	r3, r1
 80010d6:	6053      	str	r3, [r2, #4]
 80010d8:	e018      	b.n	800110c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80010da:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80010dc:	4a49      	ldr	r2, [pc, #292]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80010de:	6812      	ldr	r2, [r2, #0]
 80010e0:	2101      	movs	r1, #1
 80010e2:	438a      	bics	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff f8f1 	bl	80002cc <HAL_GetTick>
 80010ea:	0003      	movs	r3, r0
 80010ec:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010ee:	e008      	b.n	8001102 <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010f0:	f7ff f8ec 	bl	80002cc <HAL_GetTick>
 80010f4:	0002      	movs	r2, r0
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b02      	cmp	r3, #2
 80010fc:	d901      	bls.n	8001102 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80010fe:	2303      	movs	r3, #3
 8001100:	e28c      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001102:	4b40      	ldr	r3, [pc, #256]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2204      	movs	r2, #4
 8001108:	4013      	ands	r3, r2
 800110a:	d1f1      	bne.n	80010f0 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2210      	movs	r2, #16
 8001112:	4013      	ands	r3, r2
 8001114:	d100      	bne.n	8001118 <HAL_RCC_OscConfig+0x260>
 8001116:	e09d      	b.n	8001254 <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d13f      	bne.n	800119e <HAL_RCC_OscConfig+0x2e6>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800111e:	4b39      	ldr	r3, [pc, #228]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	009b      	lsls	r3, r3, #2
 8001126:	4013      	ands	r3, r2
 8001128:	d005      	beq.n	8001136 <HAL_RCC_OscConfig+0x27e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d101      	bne.n	8001136 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e272      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001136:	4a33      	ldr	r2, [pc, #204]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 8001138:	4b32      	ldr	r3, [pc, #200]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	4937      	ldr	r1, [pc, #220]	; (800121c <HAL_RCC_OscConfig+0x364>)
 800113e:	4019      	ands	r1, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001144:	430b      	orrs	r3, r1
 8001146:	6053      	str	r3, [r2, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001148:	4a2e      	ldr	r2, [pc, #184]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	021b      	lsls	r3, r3, #8
 8001150:	0a19      	lsrs	r1, r3, #8
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	061b      	lsls	r3, r3, #24
 8001158:	430b      	orrs	r3, r1
 800115a:	6053      	str	r3, [r2, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001160:	0b5b      	lsrs	r3, r3, #13
 8001162:	3301      	adds	r3, #1
 8001164:	2280      	movs	r2, #128	; 0x80
 8001166:	0212      	lsls	r2, r2, #8
 8001168:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	091b      	lsrs	r3, r3, #4
 8001170:	210f      	movs	r1, #15
 8001172:	400b      	ands	r3, r1
 8001174:	4927      	ldr	r1, [pc, #156]	; (8001214 <HAL_RCC_OscConfig+0x35c>)
 8001176:	5ccb      	ldrb	r3, [r1, r3]
 8001178:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <HAL_RCC_OscConfig+0x360>)
 800117c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 800117e:	2313      	movs	r3, #19
 8001180:	18fc      	adds	r4, r7, r3
 8001182:	2003      	movs	r0, #3
 8001184:	f7ff f86c 	bl	8000260 <HAL_InitTick>
 8001188:	0003      	movs	r3, r0
 800118a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800118c:	2313      	movs	r3, #19
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d05e      	beq.n	8001254 <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 8001196:	2313      	movs	r3, #19
 8001198:	18fb      	adds	r3, r7, r3
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	e23e      	b.n	800161c <HAL_RCC_OscConfig+0x764>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d03c      	beq.n	8001220 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a6:	4b17      	ldr	r3, [pc, #92]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011a8:	4a16      	ldr	r2, [pc, #88]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011aa:	6812      	ldr	r2, [r2, #0]
 80011ac:	2180      	movs	r1, #128	; 0x80
 80011ae:	0049      	lsls	r1, r1, #1
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b4:	f7ff f88a 	bl	80002cc <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011be:	f7ff f885 	bl	80002cc <HAL_GetTick>
 80011c2:	0002      	movs	r2, r0
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e225      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011d0:	4b0c      	ldr	r3, [pc, #48]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2380      	movs	r3, #128	; 0x80
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	4013      	ands	r3, r2
 80011da:	d0f0      	beq.n	80011be <HAL_RCC_OscConfig+0x306>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011dc:	4a09      	ldr	r2, [pc, #36]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011de:	4b09      	ldr	r3, [pc, #36]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_RCC_OscConfig+0x364>)
 80011e4:	4019      	ands	r1, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ea:	430b      	orrs	r3, r1
 80011ec:	6053      	str	r3, [r2, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_RCC_OscConfig+0x34c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	0a19      	lsrs	r1, r3, #8
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a1b      	ldr	r3, [r3, #32]
 80011fc:	061b      	lsls	r3, r3, #24
 80011fe:	430b      	orrs	r3, r1
 8001200:	6053      	str	r3, [r2, #4]
 8001202:	e027      	b.n	8001254 <HAL_RCC_OscConfig+0x39c>
 8001204:	40021000 	.word	0x40021000
 8001208:	fffeffff 	.word	0xfffeffff
 800120c:	fffbffff 	.word	0xfffbffff
 8001210:	ffffe0ff 	.word	0xffffe0ff
 8001214:	08003098 	.word	0x08003098
 8001218:	20000004 	.word	0x20000004
 800121c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001220:	4bbd      	ldr	r3, [pc, #756]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001222:	4abd      	ldr	r2, [pc, #756]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001224:	6812      	ldr	r2, [r2, #0]
 8001226:	49bd      	ldr	r1, [pc, #756]	; (800151c <HAL_RCC_OscConfig+0x664>)
 8001228:	400a      	ands	r2, r1
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff f84e 	bl	80002cc <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001236:	f7ff f849 	bl	80002cc <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e1e9      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001248:	4bb3      	ldr	r3, [pc, #716]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4013      	ands	r3, r2
 8001252:	d1f0      	bne.n	8001236 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2208      	movs	r2, #8
 800125a:	4013      	ands	r3, r2
 800125c:	d036      	beq.n	80012cc <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d019      	beq.n	800129a <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001266:	4bac      	ldr	r3, [pc, #688]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001268:	4aab      	ldr	r2, [pc, #684]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800126a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800126c:	2101      	movs	r1, #1
 800126e:	430a      	orrs	r2, r1
 8001270:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff f82b 	bl	80002cc <HAL_GetTick>
 8001276:	0003      	movs	r3, r0
 8001278:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800127a:	e008      	b.n	800128e <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127c:	f7ff f826 	bl	80002cc <HAL_GetTick>
 8001280:	0002      	movs	r2, r0
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	1ad3      	subs	r3, r2, r3
 8001286:	2b02      	cmp	r3, #2
 8001288:	d901      	bls.n	800128e <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 800128a:	2303      	movs	r3, #3
 800128c:	e1c6      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800128e:	4ba2      	ldr	r3, [pc, #648]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001292:	2202      	movs	r2, #2
 8001294:	4013      	ands	r3, r2
 8001296:	d0f1      	beq.n	800127c <HAL_RCC_OscConfig+0x3c4>
 8001298:	e018      	b.n	80012cc <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800129a:	4b9f      	ldr	r3, [pc, #636]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800129c:	4a9e      	ldr	r2, [pc, #632]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800129e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80012a0:	2101      	movs	r1, #1
 80012a2:	438a      	bics	r2, r1
 80012a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a6:	f7ff f811 	bl	80002cc <HAL_GetTick>
 80012aa:	0003      	movs	r3, r0
 80012ac:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012b0:	f7ff f80c 	bl	80002cc <HAL_GetTick>
 80012b4:	0002      	movs	r2, r0
 80012b6:	69bb      	ldr	r3, [r7, #24]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e1ac      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80012c2:	4b95      	ldr	r3, [pc, #596]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80012c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d1f1      	bne.n	80012b0 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2204      	movs	r2, #4
 80012d2:	4013      	ands	r3, r2
 80012d4:	d100      	bne.n	80012d8 <HAL_RCC_OscConfig+0x420>
 80012d6:	e0af      	b.n	8001438 <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d8:	2327      	movs	r3, #39	; 0x27
 80012da:	18fb      	adds	r3, r7, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e0:	4b8d      	ldr	r3, [pc, #564]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80012e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e4:	2380      	movs	r3, #128	; 0x80
 80012e6:	055b      	lsls	r3, r3, #21
 80012e8:	4013      	ands	r3, r2
 80012ea:	d10a      	bne.n	8001302 <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	4b8a      	ldr	r3, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80012ee:	4a8a      	ldr	r2, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80012f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80012f2:	2180      	movs	r1, #128	; 0x80
 80012f4:	0549      	lsls	r1, r1, #21
 80012f6:	430a      	orrs	r2, r1
 80012f8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80012fa:	2327      	movs	r3, #39	; 0x27
 80012fc:	18fb      	adds	r3, r7, r3
 80012fe:	2201      	movs	r2, #1
 8001300:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b87      	ldr	r3, [pc, #540]	; (8001520 <HAL_RCC_OscConfig+0x668>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	2380      	movs	r3, #128	; 0x80
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4013      	ands	r3, r2
 800130c:	d11a      	bne.n	8001344 <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b84      	ldr	r3, [pc, #528]	; (8001520 <HAL_RCC_OscConfig+0x668>)
 8001310:	4a83      	ldr	r2, [pc, #524]	; (8001520 <HAL_RCC_OscConfig+0x668>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	2180      	movs	r1, #128	; 0x80
 8001316:	0049      	lsls	r1, r1, #1
 8001318:	430a      	orrs	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131c:	f7fe ffd6 	bl	80002cc <HAL_GetTick>
 8001320:	0003      	movs	r3, r0
 8001322:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7fe ffd1 	bl	80002cc <HAL_GetTick>
 800132a:	0002      	movs	r2, r0
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e171      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b79      	ldr	r3, [pc, #484]	; (8001520 <HAL_RCC_OscConfig+0x668>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4013      	ands	r3, r2
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	2380      	movs	r3, #128	; 0x80
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	429a      	cmp	r2, r3
 800134e:	d107      	bne.n	8001360 <HAL_RCC_OscConfig+0x4a8>
 8001350:	4b71      	ldr	r3, [pc, #452]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001352:	4a71      	ldr	r2, [pc, #452]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001354:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001356:	2180      	movs	r1, #128	; 0x80
 8001358:	0049      	lsls	r1, r1, #1
 800135a:	430a      	orrs	r2, r1
 800135c:	651a      	str	r2, [r3, #80]	; 0x50
 800135e:	e031      	b.n	80013c4 <HAL_RCC_OscConfig+0x50c>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d10c      	bne.n	8001382 <HAL_RCC_OscConfig+0x4ca>
 8001368:	4b6b      	ldr	r3, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800136a:	4a6b      	ldr	r2, [pc, #428]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800136c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800136e:	496b      	ldr	r1, [pc, #428]	; (800151c <HAL_RCC_OscConfig+0x664>)
 8001370:	400a      	ands	r2, r1
 8001372:	651a      	str	r2, [r3, #80]	; 0x50
 8001374:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001376:	4a68      	ldr	r2, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001378:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800137a:	496a      	ldr	r1, [pc, #424]	; (8001524 <HAL_RCC_OscConfig+0x66c>)
 800137c:	400a      	ands	r2, r1
 800137e:	651a      	str	r2, [r3, #80]	; 0x50
 8001380:	e020      	b.n	80013c4 <HAL_RCC_OscConfig+0x50c>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689a      	ldr	r2, [r3, #8]
 8001386:	23a0      	movs	r3, #160	; 0xa0
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	429a      	cmp	r2, r3
 800138c:	d10e      	bne.n	80013ac <HAL_RCC_OscConfig+0x4f4>
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001390:	4a61      	ldr	r2, [pc, #388]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001392:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	00c9      	lsls	r1, r1, #3
 8001398:	430a      	orrs	r2, r1
 800139a:	651a      	str	r2, [r3, #80]	; 0x50
 800139c:	4b5e      	ldr	r3, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800139e:	4a5e      	ldr	r2, [pc, #376]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0049      	lsls	r1, r1, #1
 80013a6:	430a      	orrs	r2, r1
 80013a8:	651a      	str	r2, [r3, #80]	; 0x50
 80013aa:	e00b      	b.n	80013c4 <HAL_RCC_OscConfig+0x50c>
 80013ac:	4b5a      	ldr	r3, [pc, #360]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013ae:	4a5a      	ldr	r2, [pc, #360]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013b2:	495a      	ldr	r1, [pc, #360]	; (800151c <HAL_RCC_OscConfig+0x664>)
 80013b4:	400a      	ands	r2, r1
 80013b6:	651a      	str	r2, [r3, #80]	; 0x50
 80013b8:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013ba:	4a57      	ldr	r2, [pc, #348]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013bc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013be:	4959      	ldr	r1, [pc, #356]	; (8001524 <HAL_RCC_OscConfig+0x66c>)
 80013c0:	400a      	ands	r2, r1
 80013c2:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d015      	beq.n	80013f8 <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013cc:	f7fe ff7e 	bl	80002cc <HAL_GetTick>
 80013d0:	0003      	movs	r3, r0
 80013d2:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013d4:	e009      	b.n	80013ea <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d6:	f7fe ff79 	bl	80002cc <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	4a51      	ldr	r2, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x670>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e118      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013ea:	4b4b      	ldr	r3, [pc, #300]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80013ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4013      	ands	r3, r2
 80013f4:	d0ef      	beq.n	80013d6 <HAL_RCC_OscConfig+0x51e>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f8:	f7fe ff68 	bl	80002cc <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001400:	e009      	b.n	8001416 <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001402:	f7fe ff63 	bl	80002cc <HAL_GetTick>
 8001406:	0002      	movs	r2, r0
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	4a46      	ldr	r2, [pc, #280]	; (8001528 <HAL_RCC_OscConfig+0x670>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e102      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001418:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800141a:	2380      	movs	r3, #128	; 0x80
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4013      	ands	r3, r2
 8001420:	d1ef      	bne.n	8001402 <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001422:	2327      	movs	r3, #39	; 0x27
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d105      	bne.n	8001438 <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800142c:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800142e:	4a3a      	ldr	r2, [pc, #232]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001430:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001432:	493e      	ldr	r1, [pc, #248]	; (800152c <HAL_RCC_OscConfig+0x674>)
 8001434:	400a      	ands	r2, r1
 8001436:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2220      	movs	r2, #32
 800143e:	4013      	ands	r3, r2
 8001440:	d049      	beq.n	80014d6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d026      	beq.n	8001498 <HAL_RCC_OscConfig+0x5e0>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800144c:	4a32      	ldr	r2, [pc, #200]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800144e:	6892      	ldr	r2, [r2, #8]
 8001450:	2101      	movs	r1, #1
 8001452:	430a      	orrs	r2, r1
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 8001458:	4a2f      	ldr	r2, [pc, #188]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800145a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800145c:	2101      	movs	r1, #1
 800145e:	430a      	orrs	r2, r1
 8001460:	635a      	str	r2, [r3, #52]	; 0x34
 8001462:	4b33      	ldr	r3, [pc, #204]	; (8001530 <HAL_RCC_OscConfig+0x678>)
 8001464:	4a32      	ldr	r2, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x678>)
 8001466:	6a12      	ldr	r2, [r2, #32]
 8001468:	2180      	movs	r1, #128	; 0x80
 800146a:	0189      	lsls	r1, r1, #6
 800146c:	430a      	orrs	r2, r1
 800146e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001470:	f7fe ff2c 	bl	80002cc <HAL_GetTick>
 8001474:	0003      	movs	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x5d4>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800147a:	f7fe ff27 	bl	80002cc <HAL_GetTick>
 800147e:	0002      	movs	r2, r0
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x5d4>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e0c7      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2202      	movs	r2, #2
 8001492:	4013      	ands	r3, r2
 8001494:	d0f1      	beq.n	800147a <HAL_RCC_OscConfig+0x5c2>
 8001496:	e01e      	b.n	80014d6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800149a:	4a1f      	ldr	r2, [pc, #124]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 800149c:	6892      	ldr	r2, [r2, #8]
 800149e:	2101      	movs	r1, #1
 80014a0:	438a      	bics	r2, r1
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x678>)
 80014a6:	4a22      	ldr	r2, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x678>)
 80014a8:	6a12      	ldr	r2, [r2, #32]
 80014aa:	4922      	ldr	r1, [pc, #136]	; (8001534 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7fe ff0c 	bl	80002cc <HAL_GetTick>
 80014b4:	0003      	movs	r3, r0
 80014b6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014b8:	e008      	b.n	80014cc <HAL_RCC_OscConfig+0x614>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014ba:	f7fe ff07 	bl	80002cc <HAL_GetTick>
 80014be:	0002      	movs	r2, r0
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d901      	bls.n	80014cc <HAL_RCC_OscConfig+0x614>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e0a7      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	2202      	movs	r2, #2
 80014d2:	4013      	ands	r3, r2
 80014d4:	d1f1      	bne.n	80014ba <HAL_RCC_OscConfig+0x602>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d100      	bne.n	80014e0 <HAL_RCC_OscConfig+0x628>
 80014de:	e09c      	b.n	800161a <HAL_RCC_OscConfig+0x762>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014e0:	6a3b      	ldr	r3, [r7, #32]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d100      	bne.n	80014e8 <HAL_RCC_OscConfig+0x630>
 80014e6:	e075      	b.n	80015d4 <HAL_RCC_OscConfig+0x71c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	2b02      	cmp	r3, #2
 80014ee:	d156      	bne.n	800159e <HAL_RCC_OscConfig+0x6e6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80014f2:	4a09      	ldr	r2, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x660>)
 80014f4:	6812      	ldr	r2, [r2, #0]
 80014f6:	4910      	ldr	r1, [pc, #64]	; (8001538 <HAL_RCC_OscConfig+0x680>)
 80014f8:	400a      	ands	r2, r1
 80014fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7fe fee6 	bl	80002cc <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001504:	e01a      	b.n	800153c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7fe fee1 	bl	80002cc <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d913      	bls.n	800153c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e081      	b.n	800161c <HAL_RCC_OscConfig+0x764>
 8001518:	40021000 	.word	0x40021000
 800151c:	fffffeff 	.word	0xfffffeff
 8001520:	40007000 	.word	0x40007000
 8001524:	fffffbff 	.word	0xfffffbff
 8001528:	00001388 	.word	0x00001388
 800152c:	efffffff 	.word	0xefffffff
 8001530:	40010000 	.word	0x40010000
 8001534:	ffffdfff 	.word	0xffffdfff
 8001538:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800153c:	4b39      	ldr	r3, [pc, #228]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	049b      	lsls	r3, r3, #18
 8001544:	4013      	ands	r3, r2
 8001546:	d1de      	bne.n	8001506 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001548:	4a36      	ldr	r2, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 800154a:	4b36      	ldr	r3, [pc, #216]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	4936      	ldr	r1, [pc, #216]	; (8001628 <HAL_RCC_OscConfig+0x770>)
 8001550:	4019      	ands	r1, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4318      	orrs	r0, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	4303      	orrs	r3, r0
 8001562:	430b      	orrs	r3, r1
 8001564:	60d3      	str	r3, [r2, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001566:	4b2f      	ldr	r3, [pc, #188]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 8001568:	4a2e      	ldr	r2, [pc, #184]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 800156a:	6812      	ldr	r2, [r2, #0]
 800156c:	2180      	movs	r1, #128	; 0x80
 800156e:	0449      	lsls	r1, r1, #17
 8001570:	430a      	orrs	r2, r1
 8001572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7fe feaa 	bl	80002cc <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x6d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7fe fea5 	bl	80002cc <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x6d8>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e045      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001590:	4b24      	ldr	r3, [pc, #144]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	049b      	lsls	r3, r3, #18
 8001598:	4013      	ands	r3, r2
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x6c6>
 800159c:	e03d      	b.n	800161a <HAL_RCC_OscConfig+0x762>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 80015a0:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 80015a2:	6812      	ldr	r2, [r2, #0]
 80015a4:	4921      	ldr	r1, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x774>)
 80015a6:	400a      	ands	r2, r1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7fe fe8f 	bl	80002cc <HAL_GetTick>
 80015ae:	0003      	movs	r3, r0
 80015b0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x70e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015b4:	f7fe fe8a 	bl	80002cc <HAL_GetTick>
 80015b8:	0002      	movs	r2, r0
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x70e>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e02a      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	049b      	lsls	r3, r3, #18
 80015ce:	4013      	ands	r3, r2
 80015d0:	d1f0      	bne.n	80015b4 <HAL_RCC_OscConfig+0x6fc>
 80015d2:	e022      	b.n	800161a <HAL_RCC_OscConfig+0x762>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_RCC_OscConfig+0x728>
      {
        return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e01d      	b.n	800161c <HAL_RCC_OscConfig+0x764>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_RCC_OscConfig+0x76c>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	025b      	lsls	r3, r3, #9
 80015ec:	401a      	ands	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d10f      	bne.n	8001616 <HAL_RCC_OscConfig+0x75e>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80015f6:	69fa      	ldr	r2, [r7, #28]
 80015f8:	23f0      	movs	r3, #240	; 0xf0
 80015fa:	039b      	lsls	r3, r3, #14
 80015fc:	401a      	ands	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001602:	429a      	cmp	r2, r3
 8001604:	d107      	bne.n	8001616 <HAL_RCC_OscConfig+0x75e>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001606:	69fa      	ldr	r2, [r7, #28]
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	041b      	lsls	r3, r3, #16
 800160c:	401a      	ands	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001612:	429a      	cmp	r2, r3
 8001614:	d001      	beq.n	800161a <HAL_RCC_OscConfig+0x762>
        {
          return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <HAL_RCC_OscConfig+0x764>
        }
      }
    }
  }

  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b00b      	add	sp, #44	; 0x2c
 8001622:	bd90      	pop	{r4, r7, pc}
 8001624:	40021000 	.word	0x40021000
 8001628:	ff02ffff 	.word	0xff02ffff
 800162c:	feffffff 	.word	0xfeffffff

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e10c      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b88      	ldr	r3, [pc, #544]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2201      	movs	r2, #1
 800164a:	401a      	ands	r2, r3
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d211      	bcs.n	8001676 <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b85      	ldr	r3, [pc, #532]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 8001654:	4a84      	ldr	r2, [pc, #528]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 8001656:	6812      	ldr	r2, [r2, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	438a      	bics	r2, r1
 800165c:	0011      	movs	r1, r2
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	430a      	orrs	r2, r1
 8001662:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001664:	4b80      	ldr	r3, [pc, #512]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	2201      	movs	r2, #1
 800166a:	401a      	ands	r2, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	429a      	cmp	r2, r3
 8001670:	d001      	beq.n	8001676 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0f3      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2202      	movs	r2, #2
 800167c:	4013      	ands	r3, r2
 800167e:	d009      	beq.n	8001694 <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001680:	4a7a      	ldr	r2, [pc, #488]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 8001682:	4b7a      	ldr	r3, [pc, #488]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	21f0      	movs	r1, #240	; 0xf0
 8001688:	438b      	bics	r3, r1
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	430b      	orrs	r3, r1
 8001692:	60d3      	str	r3, [r2, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2201      	movs	r2, #1
 800169a:	4013      	ands	r3, r2
 800169c:	d100      	bne.n	80016a0 <HAL_RCC_ClockConfig+0x70>
 800169e:	e089      	b.n	80017b4 <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d107      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016a8:	4b70      	ldr	r3, [pc, #448]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	2380      	movs	r3, #128	; 0x80
 80016ae:	029b      	lsls	r3, r3, #10
 80016b0:	4013      	ands	r3, r2
 80016b2:	d120      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0d2      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d107      	bne.n	80016d0 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016c0:	4b6a      	ldr	r3, [pc, #424]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	049b      	lsls	r3, r3, #18
 80016c8:	4013      	ands	r3, r2
 80016ca:	d114      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0c6      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d8:	4b64      	ldr	r3, [pc, #400]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2204      	movs	r2, #4
 80016de:	4013      	ands	r3, r2
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e0bb      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	2380      	movs	r3, #128	; 0x80
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4013      	ands	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e0b3      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4a5d      	ldr	r2, [pc, #372]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016f8:	4b5c      	ldr	r3, [pc, #368]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	2103      	movs	r1, #3
 80016fe:	438b      	bics	r3, r1
 8001700:	0019      	movs	r1, r3
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	430b      	orrs	r3, r1
 8001708:	60d3      	str	r3, [r2, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800170a:	f7fe fddf 	bl	80002cc <HAL_GetTick>
 800170e:	0003      	movs	r3, r0
 8001710:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d111      	bne.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800171a:	e009      	b.n	8001730 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800171c:	f7fe fdd6 	bl	80002cc <HAL_GetTick>
 8001720:	0002      	movs	r2, r0
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	4a52      	ldr	r2, [pc, #328]	; (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e096      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001730:	4b4e      	ldr	r3, [pc, #312]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	220c      	movs	r2, #12
 8001736:	4013      	ands	r3, r2
 8001738:	2b08      	cmp	r3, #8
 800173a:	d1ef      	bne.n	800171c <HAL_RCC_ClockConfig+0xec>
 800173c:	e03a      	b.n	80017b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b03      	cmp	r3, #3
 8001744:	d111      	bne.n	800176a <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001746:	e009      	b.n	800175c <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001748:	f7fe fdc0 	bl	80002cc <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	4a47      	ldr	r2, [pc, #284]	; (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e080      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 800175e:	68db      	ldr	r3, [r3, #12]
 8001760:	220c      	movs	r2, #12
 8001762:	4013      	ands	r3, r2
 8001764:	2b0c      	cmp	r3, #12
 8001766:	d1ef      	bne.n	8001748 <HAL_RCC_ClockConfig+0x118>
 8001768:	e024      	b.n	80017b4 <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d11b      	bne.n	80017aa <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001772:	e009      	b.n	8001788 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001774:	f7fe fdaa 	bl	80002cc <HAL_GetTick>
 8001778:	0002      	movs	r2, r0
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	4a3c      	ldr	r2, [pc, #240]	; (8001870 <HAL_RCC_ClockConfig+0x240>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e06a      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001788:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	220c      	movs	r2, #12
 800178e:	4013      	ands	r3, r2
 8001790:	2b04      	cmp	r3, #4
 8001792:	d1ef      	bne.n	8001774 <HAL_RCC_ClockConfig+0x144>
 8001794:	e00e      	b.n	80017b4 <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001796:	f7fe fd99 	bl	80002cc <HAL_GetTick>
 800179a:	0002      	movs	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_RCC_ClockConfig+0x240>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e059      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	220c      	movs	r2, #12
 80017b0:	4013      	ands	r3, r2
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b4:	4b2c      	ldr	r3, [pc, #176]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	401a      	ands	r2, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	429a      	cmp	r2, r3
 80017c0:	d911      	bls.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c2:	4b29      	ldr	r3, [pc, #164]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 80017c4:	4a28      	ldr	r2, [pc, #160]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	438a      	bics	r2, r1
 80017cc:	0011      	movs	r1, r2
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	430a      	orrs	r2, r1
 80017d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <HAL_RCC_ClockConfig+0x238>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2201      	movs	r2, #1
 80017da:	401a      	ands	r2, r3
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e03b      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	2204      	movs	r2, #4
 80017ec:	4013      	ands	r3, r2
 80017ee:	d008      	beq.n	8001802 <HAL_RCC_ClockConfig+0x1d2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017f0:	4a1e      	ldr	r2, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80017f2:	4b1e      	ldr	r3, [pc, #120]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	491f      	ldr	r1, [pc, #124]	; (8001874 <HAL_RCC_ClockConfig+0x244>)
 80017f8:	4019      	ands	r1, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	430b      	orrs	r3, r1
 8001800:	60d3      	str	r3, [r2, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2208      	movs	r2, #8
 8001808:	4013      	ands	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 800180e:	4b17      	ldr	r3, [pc, #92]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	4919      	ldr	r1, [pc, #100]	; (8001878 <HAL_RCC_ClockConfig+0x248>)
 8001814:	4019      	ands	r1, r3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	00db      	lsls	r3, r3, #3
 800181c:	430b      	orrs	r3, r1
 800181e:	60d3      	str	r3, [r2, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001820:	f000 f830 	bl	8001884 <HAL_RCC_GetSysClockFreq>
 8001824:	0001      	movs	r1, r0
 8001826:	4b11      	ldr	r3, [pc, #68]	; (800186c <HAL_RCC_ClockConfig+0x23c>)
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	091b      	lsrs	r3, r3, #4
 800182c:	220f      	movs	r2, #15
 800182e:	4013      	ands	r3, r2
 8001830:	4a12      	ldr	r2, [pc, #72]	; (800187c <HAL_RCC_ClockConfig+0x24c>)
 8001832:	5cd3      	ldrb	r3, [r2, r3]
 8001834:	000a      	movs	r2, r1
 8001836:	40da      	lsrs	r2, r3
 8001838:	4b11      	ldr	r3, [pc, #68]	; (8001880 <HAL_RCC_ClockConfig+0x250>)
 800183a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 800183c:	230b      	movs	r3, #11
 800183e:	18fc      	adds	r4, r7, r3
 8001840:	2003      	movs	r0, #3
 8001842:	f7fe fd0d 	bl	8000260 <HAL_InitTick>
 8001846:	0003      	movs	r3, r0
 8001848:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800184a:	230b      	movs	r3, #11
 800184c:	18fb      	adds	r3, r7, r3
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <HAL_RCC_ClockConfig+0x22c>
  {
    return status;
 8001854:	230b      	movs	r3, #11
 8001856:	18fb      	adds	r3, r7, r3
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	e000      	b.n	800185e <HAL_RCC_ClockConfig+0x22e>
  }

  return HAL_OK;
 800185c:	2300      	movs	r3, #0
}
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b005      	add	sp, #20
 8001864:	bd90      	pop	{r4, r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	40022000 	.word	0x40022000
 800186c:	40021000 	.word	0x40021000
 8001870:	00001388 	.word	0x00001388
 8001874:	fffff8ff 	.word	0xfffff8ff
 8001878:	ffffc7ff 	.word	0xffffc7ff
 800187c:	08003098 	.word	0x08003098
 8001880:	20000004 	.word	0x20000004

08001884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b086      	sub	sp, #24
 8001888:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800188a:	4b32      	ldr	r3, [pc, #200]	; (8001954 <HAL_RCC_GetSysClockFreq+0xd0>)
 800188c:	68db      	ldr	r3, [r3, #12]
 800188e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	220c      	movs	r2, #12
 8001894:	4013      	ands	r3, r2
 8001896:	2b08      	cmp	r3, #8
 8001898:	d00e      	beq.n	80018b8 <HAL_RCC_GetSysClockFreq+0x34>
 800189a:	2b0c      	cmp	r3, #12
 800189c:	d00f      	beq.n	80018be <HAL_RCC_GetSysClockFreq+0x3a>
 800189e:	2b04      	cmp	r3, #4
 80018a0:	d145      	bne.n	800192e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018a2:	4b2c      	ldr	r3, [pc, #176]	; (8001954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2210      	movs	r2, #16
 80018a8:	4013      	ands	r3, r2
 80018aa:	d002      	beq.n	80018b2 <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80018ac:	4b2a      	ldr	r3, [pc, #168]	; (8001958 <HAL_RCC_GetSysClockFreq+0xd4>)
 80018ae:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80018b0:	e04b      	b.n	800194a <HAL_RCC_GetSysClockFreq+0xc6>
        sysclockfreq =  HSI_VALUE;
 80018b2:	4b2a      	ldr	r3, [pc, #168]	; (800195c <HAL_RCC_GetSysClockFreq+0xd8>)
 80018b4:	613b      	str	r3, [r7, #16]
      break;
 80018b6:	e048      	b.n	800194a <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018b8:	4b29      	ldr	r3, [pc, #164]	; (8001960 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018ba:	613b      	str	r3, [r7, #16]
      break;
 80018bc:	e045      	b.n	800194a <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	0c9b      	lsrs	r3, r3, #18
 80018c2:	220f      	movs	r2, #15
 80018c4:	4013      	ands	r3, r2
 80018c6:	4a27      	ldr	r2, [pc, #156]	; (8001964 <HAL_RCC_GetSysClockFreq+0xe0>)
 80018c8:	5cd3      	ldrb	r3, [r2, r3]
 80018ca:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	0d9b      	lsrs	r3, r3, #22
 80018d0:	2203      	movs	r2, #3
 80018d2:	4013      	ands	r3, r2
 80018d4:	3301      	adds	r3, #1
 80018d6:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018d8:	4b1e      	ldr	r3, [pc, #120]	; (8001954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018da:	68da      	ldr	r2, [r3, #12]
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	4013      	ands	r3, r2
 80018e2:	d009      	beq.n	80018f8 <HAL_RCC_GetSysClockFreq+0x74>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	4a1e      	ldr	r2, [pc, #120]	; (8001960 <HAL_RCC_GetSysClockFreq+0xdc>)
 80018e8:	4353      	muls	r3, r2
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	0018      	movs	r0, r3
 80018ee:	f7fe fc0b 	bl	8000108 <__udivsi3>
 80018f2:	0003      	movs	r3, r0
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	e017      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80018f8:	4b16      	ldr	r3, [pc, #88]	; (8001954 <HAL_RCC_GetSysClockFreq+0xd0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2210      	movs	r2, #16
 80018fe:	4013      	ands	r3, r2
 8001900:	d009      	beq.n	8001916 <HAL_RCC_GetSysClockFreq+0x92>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	4a14      	ldr	r2, [pc, #80]	; (8001958 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001906:	4353      	muls	r3, r2
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	0018      	movs	r0, r3
 800190c:	f7fe fbfc 	bl	8000108 <__udivsi3>
 8001910:	0003      	movs	r3, r0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e008      	b.n	8001928 <HAL_RCC_GetSysClockFreq+0xa4>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_RCC_GetSysClockFreq+0xd8>)
 800191a:	4353      	muls	r3, r2
 800191c:	6879      	ldr	r1, [r7, #4]
 800191e:	0018      	movs	r0, r3
 8001920:	f7fe fbf2 	bl	8000108 <__udivsi3>
 8001924:	0003      	movs	r3, r0
 8001926:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
      break;
 800192c:	e00d      	b.n	800194a <HAL_RCC_GetSysClockFreq+0xc6>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	0b5b      	lsrs	r3, r3, #13
 8001934:	2207      	movs	r2, #7
 8001936:	4013      	ands	r3, r2
 8001938:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	3301      	adds	r3, #1
 800193e:	2280      	movs	r2, #128	; 0x80
 8001940:	0212      	lsls	r2, r2, #8
 8001942:	409a      	lsls	r2, r3
 8001944:	0013      	movs	r3, r2
 8001946:	613b      	str	r3, [r7, #16]
      break;
 8001948:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800194a:	693b      	ldr	r3, [r7, #16]
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b006      	add	sp, #24
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	003d0900 	.word	0x003d0900
 800195c:	00f42400 	.word	0x00f42400
 8001960:	007a1200 	.word	0x007a1200
 8001964:	080030a8 	.word	0x080030a8

08001968 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2220      	movs	r2, #32
 8001976:	4013      	ands	r3, r2
 8001978:	d106      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x20>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	2380      	movs	r3, #128	; 0x80
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8001986:	e0dc      	b.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8001988:	2317      	movs	r3, #23
 800198a:	18fb      	adds	r3, r7, r3
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001990:	4b99      	ldr	r3, [pc, #612]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001994:	2380      	movs	r3, #128	; 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	d10a      	bne.n	80019b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b96      	ldr	r3, [pc, #600]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800199e:	4a96      	ldr	r2, [pc, #600]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80019a0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a2:	2180      	movs	r1, #128	; 0x80
 80019a4:	0549      	lsls	r1, r1, #21
 80019a6:	430a      	orrs	r2, r1
 80019a8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80019aa:	2317      	movs	r3, #23
 80019ac:	18fb      	adds	r3, r7, r3
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019b2:	4b92      	ldr	r3, [pc, #584]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	2380      	movs	r3, #128	; 0x80
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4013      	ands	r3, r2
 80019bc:	d11a      	bne.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019be:	4b8f      	ldr	r3, [pc, #572]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80019c0:	4a8e      	ldr	r2, [pc, #568]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80019c2:	6812      	ldr	r2, [r2, #0]
 80019c4:	2180      	movs	r1, #128	; 0x80
 80019c6:	0049      	lsls	r1, r1, #1
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019cc:	f7fe fc7e 	bl	80002cc <HAL_GetTick>
 80019d0:	0003      	movs	r3, r0
 80019d2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d4:	e008      	b.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d6:	f7fe fc79 	bl	80002cc <HAL_GetTick>
 80019da:	0002      	movs	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b64      	cmp	r3, #100	; 0x64
 80019e2:	d901      	bls.n	80019e8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e103      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x288>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	2380      	movs	r3, #128	; 0x80
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	4013      	ands	r3, r2
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80019f4:	4b80      	ldr	r3, [pc, #512]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	23c0      	movs	r3, #192	; 0xc0
 80019fa:	039b      	lsls	r3, r3, #14
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	039b      	lsls	r3, r3, #14
 8001a08:	401a      	ands	r2, r3
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d107      	bne.n	8001a20 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	23c0      	movs	r3, #192	; 0xc0
 8001a16:	039b      	lsls	r3, r3, #14
 8001a18:	401a      	ands	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	23c0      	movs	r3, #192	; 0xc0
 8001a26:	029b      	lsls	r3, r3, #10
 8001a28:	401a      	ands	r2, r3
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d10a      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001a32:	4b71      	ldr	r3, [pc, #452]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	029b      	lsls	r3, r3, #10
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d101      	bne.n	8001a48 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e0d3      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x288>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001a48:	4b6b      	ldr	r3, [pc, #428]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a4c:	23c0      	movs	r3, #192	; 0xc0
 8001a4e:	029b      	lsls	r3, r3, #10
 8001a50:	4013      	ands	r3, r2
 8001a52:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d049      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x186>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	23c0      	movs	r3, #192	; 0xc0
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	401a      	ands	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d004      	beq.n	8001a74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2220      	movs	r2, #32
 8001a70:	4013      	ands	r3, r2
 8001a72:	d10d      	bne.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	23c0      	movs	r3, #192	; 0xc0
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	401a      	ands	r2, r3
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d034      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d02e      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001a90:	4b59      	ldr	r3, [pc, #356]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a94:	4a5a      	ldr	r2, [pc, #360]	; (8001c00 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8001a96:	4013      	ands	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a9a:	4b57      	ldr	r3, [pc, #348]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a9c:	4a56      	ldr	r2, [pc, #344]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001a9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aa0:	2180      	movs	r1, #128	; 0x80
 8001aa2:	0309      	lsls	r1, r1, #12
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aa8:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001aaa:	4a53      	ldr	r2, [pc, #332]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001aac:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aae:	4955      	ldr	r1, [pc, #340]	; (8001c04 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001ab0:	400a      	ands	r2, r1
 8001ab2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ab4:	4b50      	ldr	r3, [pc, #320]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d014      	beq.n	8001aee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7fe fc02 	bl	80002cc <HAL_GetTick>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001acc:	e009      	b.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ace:	f7fe fbfd 	bl	80002cc <HAL_GetTick>
 8001ad2:	0002      	movs	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	4a4b      	ldr	r2, [pc, #300]	; (8001c08 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e086      	b.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0x288>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ae2:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ae6:	2380      	movs	r3, #128	; 0x80
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4013      	ands	r3, r2
 8001aec:	d0ef      	beq.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	23c0      	movs	r3, #192	; 0xc0
 8001af4:	029b      	lsls	r3, r3, #10
 8001af6:	401a      	ands	r2, r3
 8001af8:	23c0      	movs	r3, #192	; 0xc0
 8001afa:	029b      	lsls	r3, r3, #10
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10b      	bne.n	8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
 8001b00:	4a3d      	ldr	r2, [pc, #244]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b02:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4941      	ldr	r1, [pc, #260]	; (8001c0c <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 8001b08:	4019      	ands	r1, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6858      	ldr	r0, [r3, #4]
 8001b0e:	23c0      	movs	r3, #192	; 0xc0
 8001b10:	039b      	lsls	r3, r3, #14
 8001b12:	4003      	ands	r3, r0
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4a37      	ldr	r2, [pc, #220]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b1a:	4b37      	ldr	r3, [pc, #220]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6858      	ldr	r0, [r3, #4]
 8001b22:	23c0      	movs	r3, #192	; 0xc0
 8001b24:	029b      	lsls	r3, r3, #10
 8001b26:	4003      	ands	r3, r0
 8001b28:	430b      	orrs	r3, r1
 8001b2a:	6513      	str	r3, [r2, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b2c:	2317      	movs	r3, #23
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0x1da>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b36:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b38:	4a2f      	ldr	r2, [pc, #188]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b3c:	4934      	ldr	r1, [pc, #208]	; (8001c10 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8001b3e:	400a      	ands	r2, r1
 8001b40:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4013      	ands	r3, r2
 8001b4a:	d009      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b4c:	4a2a      	ldr	r2, [pc, #168]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	2103      	movs	r1, #3
 8001b54:	438b      	bics	r3, r1
 8001b56:	0019      	movs	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2202      	movs	r2, #2
 8001b66:	4013      	ands	r3, r2
 8001b68:	d009      	beq.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001b6a:	4a23      	ldr	r2, [pc, #140]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b6c:	4b22      	ldr	r3, [pc, #136]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b70:	210c      	movs	r1, #12
 8001b72:	438b      	bics	r3, r1
 8001b74:	0019      	movs	r1, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2204      	movs	r2, #4
 8001b84:	4013      	ands	r3, r2
 8001b86:	d008      	beq.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x232>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8e:	4921      	ldr	r1, [pc, #132]	; (8001c14 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8001b90:	4019      	ands	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x24e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ba4:	4a14      	ldr	r2, [pc, #80]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ba6:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	491b      	ldr	r1, [pc, #108]	; (8001c18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8001bac:	4019      	ands	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	430b      	orrs	r3, r1
 8001bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2240      	movs	r2, #64	; 0x40
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d008      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bc2:	4b0d      	ldr	r3, [pc, #52]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc6:	4915      	ldr	r1, [pc, #84]	; (8001c1c <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8001bc8:	4019      	ands	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2280      	movs	r2, #128	; 0x80
 8001bd8:	4013      	ands	r3, r2
 8001bda:	d008      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001bdc:	4a06      	ldr	r2, [pc, #24]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001bde:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	490f      	ldr	r1, [pc, #60]	; (8001c20 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8001be4:	4019      	ands	r1, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69db      	ldr	r3, [r3, #28]
 8001bea:	430b      	orrs	r3, r1
 8001bec:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	b006      	add	sp, #24
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40007000 	.word	0x40007000
 8001c00:	fffcffff 	.word	0xfffcffff
 8001c04:	fff7ffff 	.word	0xfff7ffff
 8001c08:	00001388 	.word	0x00001388
 8001c0c:	ffcfffff 	.word	0xffcfffff
 8001c10:	efffffff 	.word	0xefffffff
 8001c14:	fffff3ff 	.word	0xfffff3ff
 8001c18:	ffffcfff 	.word	0xffffcfff
 8001c1c:	fbffffff 	.word	0xfbffffff
 8001c20:	fff3ffff 	.word	0xfff3ffff

08001c24 <_ZN5Alarm4initEP12GPIO_TypeDeft>:
 *      Author: marcin
 */

#include "Alarm.h"

void Alarm::init(GPIO_TypeDef *port, uint16_t pin) {
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	1dbb      	adds	r3, r7, #6
 8001c30:	801a      	strh	r2, [r3, #0]
	this->port = port;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	68ba      	ldr	r2, [r7, #8]
 8001c36:	601a      	str	r2, [r3, #0]
	this->pin = pin;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1dba      	adds	r2, r7, #6
 8001c3c:	8812      	ldrh	r2, [r2, #0]
 8001c3e:	809a      	strh	r2, [r3, #4]

	GPIO_InitTypeDef GPIO_InitStruct;
	GPIO_InitStruct.Pin = pin;
 8001c40:	1dbb      	adds	r3, r7, #6
 8001c42:	881a      	ldrh	r2, [r3, #0]
 8001c44:	2314      	movs	r3, #20
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c4a:	2314      	movs	r3, #20
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	2201      	movs	r2, #1
 8001c50:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2314      	movs	r3, #20
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2314      	movs	r3, #20
 8001c5c:	18fb      	adds	r3, r7, r3
 8001c5e:	2200      	movs	r2, #0
 8001c60:	60da      	str	r2, [r3, #12]

	HAL_GPIO_Init(port, &GPIO_InitStruct);
 8001c62:	2314      	movs	r3, #20
 8001c64:	18fa      	adds	r2, r7, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0011      	movs	r1, r2
 8001c6a:	0018      	movs	r0, r3
 8001c6c:	f7fe fd90 	bl	8000790 <HAL_GPIO_Init>
	off();
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	0018      	movs	r0, r3
 8001c74:	f000 f804 	bl	8001c80 <_ZN5Alarm3offEv>
}
 8001c78:	46c0      	nop			; (mov r8, r8)
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	b00a      	add	sp, #40	; 0x28
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_ZN5Alarm3offEv>:

void Alarm::on() {
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_SET);
}

void Alarm::off() {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(port, pin, GPIO_PIN_RESET);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	889b      	ldrh	r3, [r3, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	0019      	movs	r1, r3
 8001c94:	f7fe fef2 	bl	8000a7c <HAL_GPIO_WritePin>
}
 8001c98:	46c0      	nop			; (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b002      	add	sp, #8
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <_ZN9EEPROMVarC1Et>:

#include "EEPROMVar.h"

uint32_t EEPROMVar::m_currentAddress = 0;

EEPROMVar::EEPROMVar(uint16_t size) {
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	000a      	movs	r2, r1
 8001caa:	1cbb      	adds	r3, r7, #2
 8001cac:	801a      	strh	r2, [r3, #0]
	m_size = size;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	1cba      	adds	r2, r7, #2
 8001cb2:	8812      	ldrh	r2, [r2, #0]
 8001cb4:	801a      	strh	r2, [r3, #0]
	m_address = m_currentAddress;
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <_ZN9EEPROMVarC1Et+0x38>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	605a      	str	r2, [r3, #4]
	m_currentAddress += m_size;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	001a      	movs	r2, r3
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <_ZN9EEPROMVarC1Et+0x38>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	18d2      	adds	r2, r2, r3
 8001cca:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <_ZN9EEPROMVarC1Et+0x38>)
 8001ccc:	601a      	str	r2, [r3, #0]
}
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	0018      	movs	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b002      	add	sp, #8
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20000088 	.word	0x20000088

08001cdc <_ZN9EEPROMVaraSEh>:

void EEPROMVar::operator=(uint8_t data) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	1cfb      	adds	r3, r7, #3
 8001ce8:	701a      	strb	r2, [r3, #0]
	if(m_size > sizeof(uint8_t)){
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	881b      	ldrh	r3, [r3, #0]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d80e      	bhi.n	8001d10 <_ZN9EEPROMVaraSEh+0x34>
		return;
	}
	HAL_DATA_EEPROMEx_Unlock();
 8001cf2:	f7fe fcb9 	bl	8000668 <HAL_FLASHEx_DATAEEPROM_Unlock>
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_BYTE, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_BYTE, EEPROM_START + m_address, data);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	4a07      	ldr	r2, [pc, #28]	; (8001d18 <_ZN9EEPROMVaraSEh+0x3c>)
 8001cfc:	1899      	adds	r1, r3, r2
 8001cfe:	1cfb      	adds	r3, r7, #3
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	001a      	movs	r2, r3
 8001d04:	2000      	movs	r0, #0
 8001d06:	f7fe fce9 	bl	80006dc <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_DATA_EEPROMEx_Lock();
 8001d0a:	f7fe fcd9 	bl	80006c0 <HAL_FLASHEx_DATAEEPROM_Lock>
 8001d0e:	e000      	b.n	8001d12 <_ZN9EEPROMVaraSEh+0x36>
		return;
 8001d10:	46c0      	nop			; (mov r8, r8)
}
 8001d12:	46bd      	mov	sp, r7
 8001d14:	b002      	add	sp, #8
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	08080000 	.word	0x08080000

08001d1c <_ZN9EEPROMVaraSEt>:

void EEPROMVar::operator=(uint16_t data) {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	000a      	movs	r2, r1
 8001d26:	1cbb      	adds	r3, r7, #2
 8001d28:	801a      	strh	r2, [r3, #0]
	if(m_size > sizeof(uint16_t)){
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	881b      	ldrh	r3, [r3, #0]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d80e      	bhi.n	8001d50 <_ZN9EEPROMVaraSEt+0x34>
		return;
	}
	HAL_DATA_EEPROMEx_Unlock();
 8001d32:	f7fe fc99 	bl	8000668 <HAL_FLASHEx_DATAEEPROM_Unlock>
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_HALFWORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_HALFWORD, EEPROM_START + m_address, data);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4a07      	ldr	r2, [pc, #28]	; (8001d58 <_ZN9EEPROMVaraSEt+0x3c>)
 8001d3c:	1899      	adds	r1, r3, r2
 8001d3e:	1cbb      	adds	r3, r7, #2
 8001d40:	881b      	ldrh	r3, [r3, #0]
 8001d42:	001a      	movs	r2, r3
 8001d44:	2001      	movs	r0, #1
 8001d46:	f7fe fcc9 	bl	80006dc <HAL_FLASHEx_DATAEEPROM_Program>
	HAL_DATA_EEPROMEx_Lock();
 8001d4a:	f7fe fcb9 	bl	80006c0 <HAL_FLASHEx_DATAEEPROM_Lock>
 8001d4e:	e000      	b.n	8001d52 <_ZN9EEPROMVaraSEt+0x36>
		return;
 8001d50:	46c0      	nop			; (mov r8, r8)
}
 8001d52:	46bd      	mov	sp, r7
 8001d54:	b002      	add	sp, #8
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	08080000 	.word	0x08080000

08001d5c <_ZN9EEPROMVarcvhEv>:
//	HAL_DATA_EEPROMEx_Program(TYPEPROGRAM_WORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Program(FLASH_TYPEPROGRAMDATA_WORD, EEPROM_START + m_address, data);
	HAL_DATA_EEPROMEx_Lock();
}

EEPROMVar::operator uint8_t() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
	uint8_t tmp = 0;
 8001d64:	230f      	movs	r3, #15
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]
	tmp = *(__IO uint8_t*)(EEPROM_START+m_address);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <_ZN9EEPROMVarcvhEv+0x34>)
 8001d72:	4694      	mov	ip, r2
 8001d74:	4463      	add	r3, ip
 8001d76:	001a      	movs	r2, r3
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	7812      	ldrb	r2, [r2, #0]
 8001d7e:	701a      	strb	r2, [r3, #0]
	return tmp;
 8001d80:	230f      	movs	r3, #15
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
}
 8001d86:	0018      	movs	r0, r3
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b004      	add	sp, #16
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	08080000 	.word	0x08080000

08001d94 <_ZN9EEPROMVarcvtEv>:

EEPROMVar::operator uint16_t() {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
	uint16_t tmp = 0;
 8001d9c:	230e      	movs	r3, #14
 8001d9e:	18fb      	adds	r3, r7, r3
 8001da0:	2200      	movs	r2, #0
 8001da2:	801a      	strh	r2, [r3, #0]
	tmp = *(uint16_t*)(EEPROM_START+m_address);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <_ZN9EEPROMVarcvtEv+0x34>)
 8001daa:	4694      	mov	ip, r2
 8001dac:	4463      	add	r3, ip
 8001dae:	001a      	movs	r2, r3
 8001db0:	230e      	movs	r3, #14
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	801a      	strh	r2, [r3, #0]
	return tmp;
 8001db8:	230e      	movs	r3, #14
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	881b      	ldrh	r3, [r3, #0]
}
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	b004      	add	sp, #16
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	08080000 	.word	0x08080000

08001dcc <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	af00      	add	r7, sp, #0
  while (1)
 8001dda:	e7fe      	b.n	8001dda <HardFault_Handler+0x4>

08001ddc <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	af00      	add	r7, sp, #0
}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001df4:	f7fe fa5e 	bl	80002b4 <HAL_IncTick>
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <_ZN5Digit4initEhh>:
 */

#include <Digit.h>
#include "digitMap.h"

void Digit::init(uint8_t d1, uint8_t d2){
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
 8001e06:	0008      	movs	r0, r1
 8001e08:	0011      	movs	r1, r2
 8001e0a:	1cfb      	adds	r3, r7, #3
 8001e0c:	1c02      	adds	r2, r0, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	1cbb      	adds	r3, r7, #2
 8001e12:	1c0a      	adds	r2, r1, #0
 8001e14:	701a      	strb	r2, [r3, #0]
	this->d1 = d1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	1cfa      	adds	r2, r7, #3
 8001e1a:	7812      	ldrb	r2, [r2, #0]
 8001e1c:	701a      	strb	r2, [r3, #0]
	this->d2 = d2;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	1cba      	adds	r2, r7, #2
 8001e22:	7812      	ldrb	r2, [r2, #0]
 8001e24:	705a      	strb	r2, [r3, #1]
}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b002      	add	sp, #8
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <_ZN5Digit9setNumberEh>:

void Digit::setNumber(uint8_t num){
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b082      	sub	sp, #8
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	000a      	movs	r2, r1
 8001e38:	1cfb      	adds	r3, r7, #3
 8001e3a:	701a      	strb	r2, [r3, #0]
	this->num = num;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	1cfa      	adds	r2, r7, #3
 8001e40:	7812      	ldrb	r2, [r2, #0]
 8001e42:	709a      	strb	r2, [r3, #2]
}
 8001e44:	46c0      	nop			; (mov r8, r8)
 8001e46:	46bd      	mov	sp, r7
 8001e48:	b002      	add	sp, #8
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN5Digit15getSegmentValueEv>:

uint8_t Digit::getSegmentValue() {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	return digitMap[num];
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	789b      	ldrb	r3, [r3, #2]
 8001e58:	001a      	movs	r2, r3
 8001e5a:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <_ZN5Digit15getSegmentValueEv+0x1c>)
 8001e5c:	5c9b      	ldrb	r3, [r3, r2]
}
 8001e5e:	0018      	movs	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	b002      	add	sp, #8
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	46c0      	nop			; (mov r8, r8)
 8001e68:	08003064 	.word	0x08003064

08001e6c <_ZN5Digit5getD1Ev>:
public:
	const static uint8_t NUMBER_OF_SEGMENTS = 7;
	void init(uint8_t d1, uint8_t d2);
	void setNumber(uint8_t num);
	uint8_t getSegmentValue();
	inline uint8_t getD1() { return d1; }
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	0018      	movs	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	b002      	add	sp, #8
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZN5Digit5getD2Ev>:
	inline uint8_t getD2() { return d2; }
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	0018      	movs	r0, r3
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	b002      	add	sp, #8
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_ZN3Lcd4initEv>:
 */

#include "Lcd.h"
#include "hardware.h"

void Lcd::init(){
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
	dig[0].init(9, 16);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	333c      	adds	r3, #60	; 0x3c
 8001ea0:	2210      	movs	r2, #16
 8001ea2:	2109      	movs	r1, #9
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f7ff ffaa 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[1].init(7, 8);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	333f      	adds	r3, #63	; 0x3f
 8001eae:	2208      	movs	r2, #8
 8001eb0:	2107      	movs	r1, #7
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	f7ff ffa3 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[2].init(27, 17);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3342      	adds	r3, #66	; 0x42
 8001ebc:	2211      	movs	r2, #17
 8001ebe:	211b      	movs	r1, #27
 8001ec0:	0018      	movs	r0, r3
 8001ec2:	f7ff ff9c 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[3].init(25, 26);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3345      	adds	r3, #69	; 0x45
 8001eca:	221a      	movs	r2, #26
 8001ecc:	2119      	movs	r1, #25
 8001ece:	0018      	movs	r0, r3
 8001ed0:	f7ff ff95 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[4].init(23, 22);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3348      	adds	r3, #72	; 0x48
 8001ed8:	2216      	movs	r2, #22
 8001eda:	2117      	movs	r1, #23
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ff8e 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[5].init(11, 10);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	334b      	adds	r3, #75	; 0x4b
 8001ee6:	220a      	movs	r2, #10
 8001ee8:	210b      	movs	r1, #11
 8001eea:	0018      	movs	r0, r3
 8001eec:	f7ff ff87 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[6].init(14, 13);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	334e      	adds	r3, #78	; 0x4e
 8001ef4:	220d      	movs	r2, #13
 8001ef6:	210e      	movs	r1, #14
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7ff ff80 	bl	8001dfe <_ZN5Digit4initEhh>
	dig[7].init(24, 15);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	3351      	adds	r3, #81	; 0x51
 8001f02:	220f      	movs	r2, #15
 8001f04:	2118      	movs	r1, #24
 8001f06:	0018      	movs	r0, r3
 8001f08:	f7ff ff79 	bl	8001dfe <_ZN5Digit4initEhh>

	__HAL_RCC_LCD_CLK_ENABLE();
 8001f0c:	4b20      	ldr	r3, [pc, #128]	; (8001f90 <_ZN3Lcd4initEv+0xfc>)
 8001f0e:	4a20      	ldr	r2, [pc, #128]	; (8001f90 <_ZN3Lcd4initEv+0xfc>)
 8001f10:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f12:	2180      	movs	r1, #128	; 0x80
 8001f14:	0089      	lsls	r1, r1, #2
 8001f16:	430a      	orrs	r2, r1
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
	lcdHandler.Instance = LCD;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a1d      	ldr	r2, [pc, #116]	; (8001f94 <_ZN3Lcd4initEv+0x100>)
 8001f1e:	601a      	str	r2, [r3, #0]
	lcdHandler.Init.Prescaler = LCD_PRESCALER_1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	605a      	str	r2, [r3, #4]
	lcdHandler.Init.Divider = LCD_DIVIDER_16;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	609a      	str	r2, [r3, #8]
	lcdHandler.Init.Duty = LCD_DUTY_1_4;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	220c      	movs	r2, #12
 8001f30:	60da      	str	r2, [r3, #12]
	lcdHandler.Init.Bias = LCD_BIAS_1_4;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2200      	movs	r2, #0
 8001f36:	611a      	str	r2, [r3, #16]
	lcdHandler.Init.VoltageSource = LCD_VOLTAGESOURCE_INTERNAL;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	615a      	str	r2, [r3, #20]
	lcdHandler.Init.Contrast = LCD_CONTRASTLEVEL_3;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	22c0      	movs	r2, #192	; 0xc0
 8001f42:	0112      	lsls	r2, r2, #4
 8001f44:	619a      	str	r2, [r3, #24]
	lcdHandler.Init.DeadTime = LCD_DEADTIME_0;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	61da      	str	r2, [r3, #28]
	lcdHandler.Init.PulseOnDuration = LCD_PULSEONDURATION_0;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	621a      	str	r2, [r3, #32]
	lcdHandler.Init.HighDrive = LCD_HIGHDRIVE_1;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2201      	movs	r2, #1
 8001f56:	625a      	str	r2, [r3, #36]	; 0x24
	lcdHandler.Init.BlinkMode = LCD_BLINKMODE_OFF;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	629a      	str	r2, [r3, #40]	; 0x28
	lcdHandler.Init.BlinkFrequency = LCD_BLINKFREQUENCY_DIV8;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
	lcdHandler.Init.MuxSegment = LCD_MUXSEGMENT_DISABLE;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	631a      	str	r2, [r3, #48]	; 0x30
	/* Initialize the LCD */
	HAL_LCD_Init(&lcdHandler);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	f7fe fda3 	bl	8000ab8 <HAL_LCD_Init>
	pinInit();
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	0018      	movs	r0, r3
 8001f76:	f000 f811 	bl	8001f9c <_ZN3Lcd7pinInitEv>
	//todo: poprawic bias i vlcd
	__HAL_SYSCFG_VLCD_CAPA_CONFIG(
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_ZN3Lcd4initEv+0x104>)
 8001f7c:	4a06      	ldr	r2, [pc, #24]	; (8001f98 <_ZN3Lcd4initEv+0x104>)
 8001f7e:	6852      	ldr	r2, [r2, #4]
 8001f80:	210e      	movs	r1, #14
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]
			SYSCFG_VLCD_PB0_EXT_CAPA_ON | SYSCFG_VLCD_PB2_EXT_CAPA_ON |SYSCFG_VLCD_PB12_EXT_CAPA_ON );
//	test();
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b002      	add	sp, #8
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	46c0      	nop			; (mov r8, r8)
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40002400 	.word	0x40002400
 8001f98:	40010000 	.word	0x40010000

08001f9c <_ZN3Lcd7pinInitEv>:

void Lcd::pinInit() {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa4:	230c      	movs	r3, #12
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2202      	movs	r2, #2
 8001faa:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fac:	230c      	movs	r3, #12
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	230c      	movs	r3, #12
 8001fb6:	18fb      	adds	r3, r7, r3
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]

	GPIO_InitStruct.Pin = LCD_VLCD1_PIN;
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	18fb      	adds	r3, r7, r3
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD1_PORT, &GPIO_InitStruct);
 8001fc4:	230c      	movs	r3, #12
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	4a8e      	ldr	r2, [pc, #568]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8001fca:	0019      	movs	r1, r3
 8001fcc:	0010      	movs	r0, r2
 8001fce:	f7fe fbdf 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_VLCD2_PIN;
 8001fd2:	230c      	movs	r3, #12
 8001fd4:	18fb      	adds	r3, r7, r3
 8001fd6:	2280      	movs	r2, #128	; 0x80
 8001fd8:	0152      	lsls	r2, r2, #5
 8001fda:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD2_PORT, &GPIO_InitStruct);
 8001fdc:	230c      	movs	r3, #12
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	4a88      	ldr	r2, [pc, #544]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	0010      	movs	r0, r2
 8001fe6:	f7fe fbd3 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_VLCD3_PIN;
 8001fea:	230c      	movs	r3, #12
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_VLCD3_PORT, &GPIO_InitStruct);
 8001ff2:	230c      	movs	r3, #12
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	4a83      	ldr	r2, [pc, #524]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	0010      	movs	r0, r2
 8001ffc:	f7fe fbc8 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	230c      	movs	r3, #12
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	2202      	movs	r2, #2
 8002006:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	230c      	movs	r3, #12
 800200a:	18fb      	adds	r3, r7, r3
 800200c:	2200      	movs	r2, #0
 800200e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002010:	230c      	movs	r3, #12
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	2200      	movs	r2, #0
 8002016:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF1_LCD;
 8002018:	230c      	movs	r3, #12
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	2201      	movs	r2, #1
 800201e:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Pin = LCD_COM0_PIN;
 8002020:	230c      	movs	r3, #12
 8002022:	18fb      	adds	r3, r7, r3
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	0052      	lsls	r2, r2, #1
 8002028:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM0_PORT, &GPIO_InitStruct);
 800202a:	230c      	movs	r3, #12
 800202c:	18fa      	adds	r2, r7, r3
 800202e:	23a0      	movs	r3, #160	; 0xa0
 8002030:	05db      	lsls	r3, r3, #23
 8002032:	0011      	movs	r1, r2
 8002034:	0018      	movs	r0, r3
 8002036:	f7fe fbab 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM1_PIN;
 800203a:	230c      	movs	r3, #12
 800203c:	18fb      	adds	r3, r7, r3
 800203e:	2280      	movs	r2, #128	; 0x80
 8002040:	0092      	lsls	r2, r2, #2
 8002042:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM1_PORT, &GPIO_InitStruct);
 8002044:	230c      	movs	r3, #12
 8002046:	18fa      	adds	r2, r7, r3
 8002048:	23a0      	movs	r3, #160	; 0xa0
 800204a:	05db      	lsls	r3, r3, #23
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f7fe fb9e 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM2_PIN;
 8002054:	230c      	movs	r3, #12
 8002056:	18fb      	adds	r3, r7, r3
 8002058:	2280      	movs	r2, #128	; 0x80
 800205a:	00d2      	lsls	r2, r2, #3
 800205c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM2_PORT, &GPIO_InitStruct);
 800205e:	230c      	movs	r3, #12
 8002060:	18fa      	adds	r2, r7, r3
 8002062:	23a0      	movs	r3, #160	; 0xa0
 8002064:	05db      	lsls	r3, r3, #23
 8002066:	0011      	movs	r1, r2
 8002068:	0018      	movs	r0, r3
 800206a:	f7fe fb91 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_COM3_PIN;
 800206e:	230c      	movs	r3, #12
 8002070:	18fb      	adds	r3, r7, r3
 8002072:	2280      	movs	r2, #128	; 0x80
 8002074:	0092      	lsls	r2, r2, #2
 8002076:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_COM3_PORT, &GPIO_InitStruct);
 8002078:	230c      	movs	r3, #12
 800207a:	18fb      	adds	r3, r7, r3
 800207c:	4a61      	ldr	r2, [pc, #388]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 800207e:	0019      	movs	r1, r3
 8002080:	0010      	movs	r0, r2
 8002082:	f7fe fb85 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG7_PIN;
 8002086:	230c      	movs	r3, #12
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2208      	movs	r2, #8
 800208c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG7_PORT, &GPIO_InitStruct);
 800208e:	230c      	movs	r3, #12
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	4a5c      	ldr	r2, [pc, #368]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8002094:	0019      	movs	r1, r3
 8002096:	0010      	movs	r0, r2
 8002098:	f7fe fb7a 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG8_PIN;
 800209c:	230c      	movs	r3, #12
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2210      	movs	r2, #16
 80020a2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG8_PORT, &GPIO_InitStruct);
 80020a4:	230c      	movs	r3, #12
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	4a56      	ldr	r2, [pc, #344]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 80020aa:	0019      	movs	r1, r3
 80020ac:	0010      	movs	r0, r2
 80020ae:	f7fe fb6f 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG9_PIN;
 80020b2:	230c      	movs	r3, #12
 80020b4:	18fb      	adds	r3, r7, r3
 80020b6:	2220      	movs	r2, #32
 80020b8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG9_PORT, &GPIO_InitStruct);
 80020ba:	230c      	movs	r3, #12
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	4a51      	ldr	r2, [pc, #324]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 80020c0:	0019      	movs	r1, r3
 80020c2:	0010      	movs	r0, r2
 80020c4:	f7fe fb64 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG10_PIN;
 80020c8:	230c      	movs	r3, #12
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2280      	movs	r2, #128	; 0x80
 80020ce:	00d2      	lsls	r2, r2, #3
 80020d0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG10_PORT, &GPIO_InitStruct);
 80020d2:	230c      	movs	r3, #12
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	4a4b      	ldr	r2, [pc, #300]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 80020d8:	0019      	movs	r1, r3
 80020da:	0010      	movs	r0, r2
 80020dc:	f7fe fb58 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG11_PIN;
 80020e0:	230c      	movs	r3, #12
 80020e2:	18fb      	adds	r3, r7, r3
 80020e4:	2280      	movs	r2, #128	; 0x80
 80020e6:	0112      	lsls	r2, r2, #4
 80020e8:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG11_PORT, &GPIO_InitStruct);
 80020ea:	230c      	movs	r3, #12
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	4a45      	ldr	r2, [pc, #276]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 80020f0:	0019      	movs	r1, r3
 80020f2:	0010      	movs	r0, r2
 80020f4:	f7fe fb4c 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG13_PIN;
 80020f8:	230c      	movs	r3, #12
 80020fa:	18fb      	adds	r3, r7, r3
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	0192      	lsls	r2, r2, #6
 8002100:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG13_PORT, &GPIO_InitStruct);
 8002102:	230c      	movs	r3, #12
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8002108:	0019      	movs	r1, r3
 800210a:	0010      	movs	r0, r2
 800210c:	f7fe fb40 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG14_PIN;
 8002110:	230c      	movs	r3, #12
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2280      	movs	r2, #128	; 0x80
 8002116:	01d2      	lsls	r2, r2, #7
 8002118:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG14_PORT, &GPIO_InitStruct);
 800211a:	230c      	movs	r3, #12
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	4a39      	ldr	r2, [pc, #228]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f7fe fb34 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG15_PIN;
 8002128:	230c      	movs	r3, #12
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2280      	movs	r2, #128	; 0x80
 800212e:	0212      	lsls	r2, r2, #8
 8002130:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG15_PORT, &GPIO_InitStruct);
 8002132:	230c      	movs	r3, #12
 8002134:	18fb      	adds	r3, r7, r3
 8002136:	4a33      	ldr	r2, [pc, #204]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8002138:	0019      	movs	r1, r3
 800213a:	0010      	movs	r0, r2
 800213c:	f7fe fb28 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG16_PIN;
 8002140:	230c      	movs	r3, #12
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	0052      	lsls	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG16_PORT, &GPIO_InitStruct);
 800214a:	230c      	movs	r3, #12
 800214c:	18fb      	adds	r3, r7, r3
 800214e:	4a2d      	ldr	r2, [pc, #180]	; (8002204 <_ZN3Lcd7pinInitEv+0x268>)
 8002150:	0019      	movs	r1, r3
 8002152:	0010      	movs	r0, r2
 8002154:	f7fe fb1c 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG17_PIN;
 8002158:	230c      	movs	r3, #12
 800215a:	18fb      	adds	r3, r7, r3
 800215c:	2280      	movs	r2, #128	; 0x80
 800215e:	0212      	lsls	r2, r2, #8
 8002160:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG17_PORT, &GPIO_InitStruct);
 8002162:	230c      	movs	r3, #12
 8002164:	18fa      	adds	r2, r7, r3
 8002166:	23a0      	movs	r3, #160	; 0xa0
 8002168:	05db      	lsls	r3, r3, #23
 800216a:	0011      	movs	r1, r2
 800216c:	0018      	movs	r0, r3
 800216e:	f7fe fb0f 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG22_PIN;
 8002172:	230c      	movs	r3, #12
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2210      	movs	r2, #16
 8002178:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG22_PORT, &GPIO_InitStruct);
 800217a:	230c      	movs	r3, #12
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	4a22      	ldr	r2, [pc, #136]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 8002180:	0019      	movs	r1, r3
 8002182:	0010      	movs	r0, r2
 8002184:	f7fe fb04 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG23_PIN;
 8002188:	230c      	movs	r3, #12
 800218a:	18fb      	adds	r3, r7, r3
 800218c:	2220      	movs	r2, #32
 800218e:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG23_PORT, &GPIO_InitStruct);
 8002190:	230c      	movs	r3, #12
 8002192:	18fb      	adds	r3, r7, r3
 8002194:	4a1c      	ldr	r2, [pc, #112]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 8002196:	0019      	movs	r1, r3
 8002198:	0010      	movs	r0, r2
 800219a:	f7fe faf9 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG24_PIN;
 800219e:	230c      	movs	r3, #12
 80021a0:	18fb      	adds	r3, r7, r3
 80021a2:	2240      	movs	r2, #64	; 0x40
 80021a4:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG24_PORT, &GPIO_InitStruct);
 80021a6:	230c      	movs	r3, #12
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	4a17      	ldr	r2, [pc, #92]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 80021ac:	0019      	movs	r1, r3
 80021ae:	0010      	movs	r0, r2
 80021b0:	f7fe faee 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG25_PIN;
 80021b4:	230c      	movs	r3, #12
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	2280      	movs	r2, #128	; 0x80
 80021ba:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG25_PORT, &GPIO_InitStruct);
 80021bc:	230c      	movs	r3, #12
 80021be:	18fb      	adds	r3, r7, r3
 80021c0:	4a11      	ldr	r2, [pc, #68]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 80021c2:	0019      	movs	r1, r3
 80021c4:	0010      	movs	r0, r2
 80021c6:	f7fe fae3 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG26_PIN;
 80021ca:	230c      	movs	r3, #12
 80021cc:	18fb      	adds	r3, r7, r3
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	0052      	lsls	r2, r2, #1
 80021d2:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG26_PORT, &GPIO_InitStruct);
 80021d4:	230c      	movs	r3, #12
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	4a0b      	ldr	r2, [pc, #44]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 80021da:	0019      	movs	r1, r3
 80021dc:	0010      	movs	r0, r2
 80021de:	f7fe fad7 	bl	8000790 <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = LCD_SEG27_PIN;
 80021e2:	230c      	movs	r3, #12
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	0092      	lsls	r2, r2, #2
 80021ea:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LCD_SEG27_PORT, &GPIO_InitStruct);
 80021ec:	230c      	movs	r3, #12
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	4a05      	ldr	r2, [pc, #20]	; (8002208 <_ZN3Lcd7pinInitEv+0x26c>)
 80021f2:	0019      	movs	r1, r3
 80021f4:	0010      	movs	r0, r2
 80021f6:	f7fe facb 	bl	8000790 <HAL_GPIO_Init>
}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	46bd      	mov	sp, r7
 80021fe:	b008      	add	sp, #32
 8002200:	bd80      	pop	{r7, pc}
 8002202:	46c0      	nop			; (mov r8, r8)
 8002204:	50000400 	.word	0x50000400
 8002208:	50000800 	.word	0x50000800

0800220c <_ZN3Lcd5clearEv>:

void Lcd::clear() {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
	HAL_LCD_Clear (&lcdHandler);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	0018      	movs	r0, r3
 8002218:	f7fe fd89 	bl	8000d2e <HAL_LCD_Clear>
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b002      	add	sp, #8
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZN3Lcd9writeCharEPhh>:

void Lcd::writeChar(uint8_t* ch, uint8_t pos) {
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	701a      	strb	r2, [r3, #0]
	dig[pos].setNumber(*ch - 0x30);
 8002232:	1dfb      	adds	r3, r7, #7
 8002234:	781a      	ldrb	r2, [r3, #0]
 8002236:	0013      	movs	r3, r2
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	189b      	adds	r3, r3, r2
 800223c:	3338      	adds	r3, #56	; 0x38
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	18d3      	adds	r3, r2, r3
 8002242:	1d1a      	adds	r2, r3, #4
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	3b30      	subs	r3, #48	; 0x30
 800224a:	b2db      	uxtb	r3, r3
 800224c:	0019      	movs	r1, r3
 800224e:	0010      	movs	r0, r2
 8002250:	f7ff fded 	bl	8001e2e <_ZN5Digit9setNumberEh>
	uint8_t segVal = dig[pos].getSegmentValue();
 8002254:	1dfb      	adds	r3, r7, #7
 8002256:	781a      	ldrb	r2, [r3, #0]
 8002258:	0013      	movs	r3, r2
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	189b      	adds	r3, r3, r2
 800225e:	3338      	adds	r3, #56	; 0x38
 8002260:	68fa      	ldr	r2, [r7, #12]
 8002262:	18d3      	adds	r3, r2, r3
 8002264:	3304      	adds	r3, #4
 8002266:	2227      	movs	r2, #39	; 0x27
 8002268:	18bc      	adds	r4, r7, r2
 800226a:	0018      	movs	r0, r3
 800226c:	f7ff fdee 	bl	8001e4c <_ZN5Digit15getSegmentValueEv>
 8002270:	0003      	movs	r3, r0
 8002272:	7023      	strb	r3, [r4, #0]

	uint32_t R0 = 0x00;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
	uint32_t R2 = 0x00;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
	uint32_t R4 = 0x00;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
	uint32_t R6 = 0x00;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]

	R0 = ((segVal >> 5) & 0x1) << dig[pos].getD2() | (segVal & 0x1) << dig[pos].getD1();
 8002284:	2327      	movs	r3, #39	; 0x27
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	115b      	asrs	r3, r3, #5
 800228c:	2201      	movs	r2, #1
 800228e:	4013      	ands	r3, r2
 8002290:	001c      	movs	r4, r3
 8002292:	1dfb      	adds	r3, r7, #7
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	0013      	movs	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	189b      	adds	r3, r3, r2
 800229c:	3338      	adds	r3, #56	; 0x38
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	18d3      	adds	r3, r2, r3
 80022a2:	3304      	adds	r3, #4
 80022a4:	0018      	movs	r0, r3
 80022a6:	f7ff fdeb 	bl	8001e80 <_ZN5Digit5getD2Ev>
 80022aa:	0003      	movs	r3, r0
 80022ac:	409c      	lsls	r4, r3
 80022ae:	2327      	movs	r3, #39	; 0x27
 80022b0:	18fb      	adds	r3, r7, r3
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	001d      	movs	r5, r3
 80022ba:	1dfb      	adds	r3, r7, #7
 80022bc:	781a      	ldrb	r2, [r3, #0]
 80022be:	0013      	movs	r3, r2
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	189b      	adds	r3, r3, r2
 80022c4:	3338      	adds	r3, #56	; 0x38
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	18d3      	adds	r3, r2, r3
 80022ca:	3304      	adds	r3, #4
 80022cc:	0018      	movs	r0, r3
 80022ce:	f7ff fdcd 	bl	8001e6c <_ZN5Digit5getD1Ev>
 80022d2:	0003      	movs	r3, r0
 80022d4:	409d      	lsls	r5, r3
 80022d6:	002b      	movs	r3, r5
 80022d8:	4323      	orrs	r3, r4
 80022da:	623b      	str	r3, [r7, #32]
	R2 = ((segVal >> 4) & 0x1) << dig[pos].getD2() | ((segVal >> 2) & 0x1) << dig[pos].getD1();
 80022dc:	2327      	movs	r3, #39	; 0x27
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	111b      	asrs	r3, r3, #4
 80022e4:	2201      	movs	r2, #1
 80022e6:	4013      	ands	r3, r2
 80022e8:	001c      	movs	r4, r3
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781a      	ldrb	r2, [r3, #0]
 80022ee:	0013      	movs	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	189b      	adds	r3, r3, r2
 80022f4:	3338      	adds	r3, #56	; 0x38
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	18d3      	adds	r3, r2, r3
 80022fa:	3304      	adds	r3, #4
 80022fc:	0018      	movs	r0, r3
 80022fe:	f7ff fdbf 	bl	8001e80 <_ZN5Digit5getD2Ev>
 8002302:	0003      	movs	r3, r0
 8002304:	409c      	lsls	r4, r3
 8002306:	2327      	movs	r3, #39	; 0x27
 8002308:	18fb      	adds	r3, r7, r3
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	109b      	asrs	r3, r3, #2
 800230e:	2201      	movs	r2, #1
 8002310:	4013      	ands	r3, r2
 8002312:	001d      	movs	r5, r3
 8002314:	1dfb      	adds	r3, r7, #7
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	0013      	movs	r3, r2
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	189b      	adds	r3, r3, r2
 800231e:	3338      	adds	r3, #56	; 0x38
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	18d3      	adds	r3, r2, r3
 8002324:	3304      	adds	r3, #4
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff fda0 	bl	8001e6c <_ZN5Digit5getD1Ev>
 800232c:	0003      	movs	r3, r0
 800232e:	409d      	lsls	r5, r3
 8002330:	002b      	movs	r3, r5
 8002332:	4323      	orrs	r3, r4
 8002334:	61fb      	str	r3, [r7, #28]
	R4 = ((segVal >> 6) & 0x1) << dig[pos].getD2() | ((segVal >> 1) & 0x1) << dig[pos].getD1();
 8002336:	2327      	movs	r3, #39	; 0x27
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	119b      	asrs	r3, r3, #6
 800233e:	2201      	movs	r2, #1
 8002340:	4013      	ands	r3, r2
 8002342:	001c      	movs	r4, r3
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	0013      	movs	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	189b      	adds	r3, r3, r2
 800234e:	3338      	adds	r3, #56	; 0x38
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	18d3      	adds	r3, r2, r3
 8002354:	3304      	adds	r3, #4
 8002356:	0018      	movs	r0, r3
 8002358:	f7ff fd92 	bl	8001e80 <_ZN5Digit5getD2Ev>
 800235c:	0003      	movs	r3, r0
 800235e:	409c      	lsls	r4, r3
 8002360:	2327      	movs	r3, #39	; 0x27
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	105b      	asrs	r3, r3, #1
 8002368:	2201      	movs	r2, #1
 800236a:	4013      	ands	r3, r2
 800236c:	001d      	movs	r5, r3
 800236e:	1dfb      	adds	r3, r7, #7
 8002370:	781a      	ldrb	r2, [r3, #0]
 8002372:	0013      	movs	r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	189b      	adds	r3, r3, r2
 8002378:	3338      	adds	r3, #56	; 0x38
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	18d3      	adds	r3, r2, r3
 800237e:	3304      	adds	r3, #4
 8002380:	0018      	movs	r0, r3
 8002382:	f7ff fd73 	bl	8001e6c <_ZN5Digit5getD1Ev>
 8002386:	0003      	movs	r3, r0
 8002388:	409d      	lsls	r5, r3
 800238a:	002b      	movs	r3, r5
 800238c:	4323      	orrs	r3, r4
 800238e:	61bb      	str	r3, [r7, #24]
	R6 = ((segVal >> 3) & 0x1) << dig[pos].getD2();
 8002390:	2327      	movs	r3, #39	; 0x27
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	10db      	asrs	r3, r3, #3
 8002398:	2201      	movs	r2, #1
 800239a:	4013      	ands	r3, r2
 800239c:	001c      	movs	r4, r3
 800239e:	1dfb      	adds	r3, r7, #7
 80023a0:	781a      	ldrb	r2, [r3, #0]
 80023a2:	0013      	movs	r3, r2
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	189b      	adds	r3, r3, r2
 80023a8:	3338      	adds	r3, #56	; 0x38
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	18d3      	adds	r3, r2, r3
 80023ae:	3304      	adds	r3, #4
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff fd65 	bl	8001e80 <_ZN5Digit5getD2Ev>
 80023b6:	0003      	movs	r3, r0
 80023b8:	409c      	lsls	r4, r3
 80023ba:	0023      	movs	r3, r4
 80023bc:	617b      	str	r3, [r7, #20]

	uint32_t MASK = 0xFFFFFFFF;
 80023be:	2301      	movs	r3, #1
 80023c0:	425b      	negs	r3, r3
 80023c2:	613b      	str	r3, [r7, #16]

	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER0, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R0);
 80023c4:	68fd      	ldr	r5, [r7, #12]
 80023c6:	1dfb      	adds	r3, r7, #7
 80023c8:	781a      	ldrb	r2, [r3, #0]
 80023ca:	0013      	movs	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	189b      	adds	r3, r3, r2
 80023d0:	3338      	adds	r3, #56	; 0x38
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	18d3      	adds	r3, r2, r3
 80023d6:	3304      	adds	r3, #4
 80023d8:	0018      	movs	r0, r3
 80023da:	f7ff fd51 	bl	8001e80 <_ZN5Digit5getD2Ev>
 80023de:	0003      	movs	r3, r0
 80023e0:	001a      	movs	r2, r3
 80023e2:	2301      	movs	r3, #1
 80023e4:	4093      	lsls	r3, r2
 80023e6:	43db      	mvns	r3, r3
 80023e8:	001a      	movs	r2, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	001c      	movs	r4, r3
 80023f0:	1dfb      	adds	r3, r7, #7
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	0013      	movs	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	189b      	adds	r3, r3, r2
 80023fa:	3338      	adds	r3, #56	; 0x38
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	18d3      	adds	r3, r2, r3
 8002400:	3304      	adds	r3, #4
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff fd32 	bl	8001e6c <_ZN5Digit5getD1Ev>
 8002408:	0003      	movs	r3, r0
 800240a:	001a      	movs	r2, r3
 800240c:	2301      	movs	r3, #1
 800240e:	4093      	lsls	r3, r2
 8002410:	43db      	mvns	r3, r3
 8002412:	4023      	ands	r3, r4
 8002414:	001a      	movs	r2, r3
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2100      	movs	r1, #0
 800241a:	0028      	movs	r0, r5
 800241c:	f7fe fc24 	bl	8000c68 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER2, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R2);
 8002420:	68fd      	ldr	r5, [r7, #12]
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	0013      	movs	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	189b      	adds	r3, r3, r2
 800242c:	3338      	adds	r3, #56	; 0x38
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	18d3      	adds	r3, r2, r3
 8002432:	3304      	adds	r3, #4
 8002434:	0018      	movs	r0, r3
 8002436:	f7ff fd23 	bl	8001e80 <_ZN5Digit5getD2Ev>
 800243a:	0003      	movs	r3, r0
 800243c:	001a      	movs	r2, r3
 800243e:	2301      	movs	r3, #1
 8002440:	4093      	lsls	r3, r2
 8002442:	43db      	mvns	r3, r3
 8002444:	001a      	movs	r2, r3
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4013      	ands	r3, r2
 800244a:	001c      	movs	r4, r3
 800244c:	1dfb      	adds	r3, r7, #7
 800244e:	781a      	ldrb	r2, [r3, #0]
 8002450:	0013      	movs	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	189b      	adds	r3, r3, r2
 8002456:	3338      	adds	r3, #56	; 0x38
 8002458:	68fa      	ldr	r2, [r7, #12]
 800245a:	18d3      	adds	r3, r2, r3
 800245c:	3304      	adds	r3, #4
 800245e:	0018      	movs	r0, r3
 8002460:	f7ff fd04 	bl	8001e6c <_ZN5Digit5getD1Ev>
 8002464:	0003      	movs	r3, r0
 8002466:	001a      	movs	r2, r3
 8002468:	2301      	movs	r3, #1
 800246a:	4093      	lsls	r3, r2
 800246c:	43db      	mvns	r3, r3
 800246e:	4023      	ands	r3, r4
 8002470:	001a      	movs	r2, r3
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	2102      	movs	r1, #2
 8002476:	0028      	movs	r0, r5
 8002478:	f7fe fbf6 	bl	8000c68 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER4, (MASK & ~(1 << dig[pos].getD2())) & ~(1 << dig[pos].getD1()), R4);
 800247c:	68fd      	ldr	r5, [r7, #12]
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	0013      	movs	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	189b      	adds	r3, r3, r2
 8002488:	3338      	adds	r3, #56	; 0x38
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	18d3      	adds	r3, r2, r3
 800248e:	3304      	adds	r3, #4
 8002490:	0018      	movs	r0, r3
 8002492:	f7ff fcf5 	bl	8001e80 <_ZN5Digit5getD2Ev>
 8002496:	0003      	movs	r3, r0
 8002498:	001a      	movs	r2, r3
 800249a:	2301      	movs	r3, #1
 800249c:	4093      	lsls	r3, r2
 800249e:	43db      	mvns	r3, r3
 80024a0:	001a      	movs	r2, r3
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	4013      	ands	r3, r2
 80024a6:	001c      	movs	r4, r3
 80024a8:	1dfb      	adds	r3, r7, #7
 80024aa:	781a      	ldrb	r2, [r3, #0]
 80024ac:	0013      	movs	r3, r2
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	189b      	adds	r3, r3, r2
 80024b2:	3338      	adds	r3, #56	; 0x38
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	18d3      	adds	r3, r2, r3
 80024b8:	3304      	adds	r3, #4
 80024ba:	0018      	movs	r0, r3
 80024bc:	f7ff fcd6 	bl	8001e6c <_ZN5Digit5getD1Ev>
 80024c0:	0003      	movs	r3, r0
 80024c2:	001a      	movs	r2, r3
 80024c4:	2301      	movs	r3, #1
 80024c6:	4093      	lsls	r3, r2
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4023      	ands	r3, r4
 80024cc:	001a      	movs	r2, r3
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2104      	movs	r1, #4
 80024d2:	0028      	movs	r0, r5
 80024d4:	f7fe fbc8 	bl	8000c68 <HAL_LCD_Write>
	HAL_LCD_Write(&lcdHandler, LCD_RAM_REGISTER6, MASK & ~(1 << dig[pos].getD2()), R6);
 80024d8:	68fc      	ldr	r4, [r7, #12]
 80024da:	1dfb      	adds	r3, r7, #7
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	0013      	movs	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	189b      	adds	r3, r3, r2
 80024e4:	3338      	adds	r3, #56	; 0x38
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	3304      	adds	r3, #4
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff fcc7 	bl	8001e80 <_ZN5Digit5getD2Ev>
 80024f2:	0003      	movs	r3, r0
 80024f4:	001a      	movs	r2, r3
 80024f6:	2301      	movs	r3, #1
 80024f8:	4093      	lsls	r3, r2
 80024fa:	43db      	mvns	r3, r3
 80024fc:	001a      	movs	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	401a      	ands	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	2106      	movs	r1, #6
 8002506:	0020      	movs	r0, r4
 8002508:	f7fe fbae 	bl	8000c68 <HAL_LCD_Write>

	HAL_LCD_UpdateDisplayRequest (&lcdHandler);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	0018      	movs	r0, r3
 8002510:	f7fe fc6b 	bl	8000dea <HAL_LCD_UpdateDisplayRequest>
}
 8002514:	46c0      	nop			; (mov r8, r8)
 8002516:	46bd      	mov	sp, r7
 8002518:	b00a      	add	sp, #40	; 0x28
 800251a:	bdb0      	pop	{r4, r5, r7, pc}

0800251c <_ZN7IButtonC1Ev>:
#define IBUTTON_H_

/**
 * \brief Klasa interfejsowa dla klasy button
 */
class IButton
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	0018      	movs	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	b002      	add	sp, #8
 800252c:	bd80      	pop	{r7, pc}

0800252e <_ZN7CButtonC1Ev>:
 ****************************/

#include "button.h"

//------------------------------------------------------------------------------
CButton::CButton()
 800252e:	b580      	push	{r7, lr}
 8002530:	b082      	sub	sp, #8
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	0018      	movs	r0, r3
 800253a:	f7ff ffef 	bl	800251c <_ZN7IButtonC1Ev>
//------------------------------------------------------------------------------
{
}
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	0018      	movs	r0, r3
 8002542:	46bd      	mov	sp, r7
 8002544:	b002      	add	sp, #8
 8002546:	bd80      	pop	{r7, pc}

08002548 <_ZN7CButton4initEP12GPIO_TypeDeftb>:

//------------------------------------------------------------------------------
void CButton::init(GPIO_TypeDef *port, uint16_t pin, bool reversed)
//------------------------------------------------------------------------------
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b08a      	sub	sp, #40	; 0x28
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	0019      	movs	r1, r3
 8002554:	1dbb      	adds	r3, r7, #6
 8002556:	801a      	strh	r2, [r3, #0]
 8002558:	1d7b      	adds	r3, r7, #5
 800255a:	1c0a      	adds	r2, r1, #0
 800255c:	701a      	strb	r2, [r3, #0]
    m_port = port;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	601a      	str	r2, [r3, #0]
    m_pin = pin;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	1dba      	adds	r2, r7, #6
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	809a      	strh	r2, [r3, #4]
    GPIO_InitTypeDef GPIO_InitStructure = GPIO_InitTypeDef();
 800256c:	2314      	movs	r3, #20
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	0018      	movs	r0, r3
 8002572:	2314      	movs	r3, #20
 8002574:	001a      	movs	r2, r3
 8002576:	2100      	movs	r1, #0
 8002578:	f000 fcd0 	bl	8002f1c <memset>
    GPIO_InitStructure.Pin = pin;
 800257c:	1dbb      	adds	r3, r7, #6
 800257e:	881a      	ldrh	r2, [r3, #0]
 8002580:	2314      	movs	r3, #20
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	601a      	str	r2, [r3, #0]
    GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2314      	movs	r3, #20
 8002588:	18fb      	adds	r3, r7, r3
 800258a:	2200      	movs	r2, #0
 800258c:	60da      	str	r2, [r3, #12]
    GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 800258e:	2314      	movs	r3, #20
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	2200      	movs	r2, #0
 8002594:	605a      	str	r2, [r3, #4]
    GPIO_InitStructure.Pull = GPIO_PULLUP;
 8002596:	2314      	movs	r3, #20
 8002598:	18fb      	adds	r3, r7, r3
 800259a:	2201      	movs	r2, #1
 800259c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(m_port, &GPIO_InitStructure);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2214      	movs	r2, #20
 80025a4:	18ba      	adds	r2, r7, r2
 80025a6:	0011      	movs	r1, r2
 80025a8:	0018      	movs	r0, r3
 80025aa:	f7fe f8f1 	bl	8000790 <HAL_GPIO_Init>
    m_buttonDown = false;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	721a      	strb	r2, [r3, #8]
    m_akceptedState = TAS_RELEASED;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2200      	movs	r2, #0
 80025b8:	71da      	strb	r2, [r3, #7]
    m_reveresed = reversed;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	1d7a      	adds	r2, r7, #5
 80025be:	7812      	ldrb	r2, [r2, #0]
 80025c0:	72da      	strb	r2, [r3, #11]
}
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	46bd      	mov	sp, r7
 80025c6:	b00a      	add	sp, #40	; 0x28
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <_ZN6CTimer13classInit1000EPFmvE>:
uint32_t (*CTimer::getTickFunc)() = CTimer::defaultGetTickFunc;

/*---CLASS FUNCTIONS-------------------------------------*/
/*-------------------------------------------------------*/
void CTimer::classInit1000(uint32_t (*getterTick1000)())
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
    getTickFunc = getterTick1000;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <_ZN6CTimer13classInit1000EPFmvE+0x18>)
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	601a      	str	r2, [r3, #0]
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b002      	add	sp, #8
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000000 	.word	0x20000000

080025e8 <_ZN6CTimer18defaultGetTickFuncEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::defaultGetTickFunc()
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
    return 0;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <_ZN6CTimer7getTickEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::getTick()
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
    return getTickFunc();
 80025f8:	4b03      	ldr	r3, [pc, #12]	; (8002608 <_ZN6CTimer7getTickEv+0x14>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4798      	blx	r3
 80025fe:	0003      	movs	r3, r0
}
 8002600:	0018      	movs	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	20000000 	.word	0x20000000

0800260c <_ZN6CTimerC1ENS_4UnitE>:

/*---OBJECT FUNCTIONS------------------------------------*/
/*-------------------------------------------------------*/
CTimer::CTimer(Unit unit)
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	000a      	movs	r2, r1
 8002616:	1cfb      	adds	r3, r7, #3
 8002618:	701a      	strb	r2, [r3, #0]
{
    setCounterUnit(unit);
 800261a:	1cfb      	adds	r3, r7, #3
 800261c:	781a      	ldrb	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0011      	movs	r1, r2
 8002622:	0018      	movs	r0, r3
 8002624:	f000 f805 	bl	8002632 <_ZN6CTimer14setCounterUnitENS_4UnitE>
}
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	0018      	movs	r0, r3
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}

08002632 <_ZN6CTimer14setCounterUnitENS_4UnitE>:

/*-------------------------------------------------------*/
void CTimer::setCounterUnit(Unit unit)
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	000a      	movs	r2, r1
 800263c:	1cfb      	adds	r3, r7, #3
 800263e:	701a      	strb	r2, [r3, #0]
    turnOff();
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 f81c 	bl	8002680 <_ZN6CTimer7turnOffEv>
    this->unit = unit;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1cfa      	adds	r2, r7, #3
 800264c:	7812      	ldrb	r2, [r2, #0]
 800264e:	721a      	strb	r2, [r3, #8]
}
 8002650:	46c0      	nop			; (mov r8, r8)
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <_ZN6CTimer5startEm>:
    setCounterUnit(unit);
}

/*-------------------------------------------------------*/
void CTimer::start(uint32_t time)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
	timState = TS_DOWNCOUNTING;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	725a      	strb	r2, [r3, #9]
    startTick = getTick();
 8002668:	f7ff ffc4 	bl	80025f4 <_ZN6CTimer7getTickEv>
 800266c:	0002      	movs	r2, r0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	601a      	str	r2, [r3, #0]
    duration = time;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	605a      	str	r2, [r3, #4]
}
 8002678:	46c0      	nop			; (mov r8, r8)
 800267a:	46bd      	mov	sp, r7
 800267c:	b002      	add	sp, #8
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN6CTimer7turnOffEv>:
    return result;
}

/*-------------------------------------------------------*/
void CTimer::turnOff()
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    timState = TS_OFF;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	725a      	strb	r2, [r3, #9]
}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	46bd      	mov	sp, r7
 8002692:	b002      	add	sp, #8
 8002694:	bd80      	pop	{r7, pc}

08002696 <_ZN6CTimer9isElapsedEv>:
    return !isZero();
}

/*-------------------------------------------------------*/
bool CTimer::isElapsed()
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b084      	sub	sp, #16
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
    bool elapsedFlag = false;
 800269e:	230f      	movs	r3, #15
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]

    _updateDowncounter();
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	0018      	movs	r0, r3
 80026aa:	f000 f82d 	bl	8002708 <_ZN6CTimer18_updateDowncounterEv>
    switch(timState)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	7a5b      	ldrb	r3, [r3, #9]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d003      	beq.n	80026be <_ZN6CTimer9isElapsedEv+0x28>
 80026b6:	dc07      	bgt.n	80026c8 <_ZN6CTimer9isElapsedEv+0x32>
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db06      	blt.n	80026ca <_ZN6CTimer9isElapsedEv+0x34>
        elapsedFlag = true;
        break;
    case TS_OFF:
    case TS_DOWNCOUNTING:
    case TS_FREE_RUN:
        break;
 80026bc:	e004      	b.n	80026c8 <_ZN6CTimer9isElapsedEv+0x32>
        elapsedFlag = true;
 80026be:	230f      	movs	r3, #15
 80026c0:	18fb      	adds	r3, r7, r3
 80026c2:	2201      	movs	r2, #1
 80026c4:	701a      	strb	r2, [r3, #0]
        break;
 80026c6:	e000      	b.n	80026ca <_ZN6CTimer9isElapsedEv+0x34>
        break;
 80026c8:	46c0      	nop			; (mov r8, r8)
    }
    return elapsedFlag;
 80026ca:	230f      	movs	r3, #15
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	781b      	ldrb	r3, [r3, #0]
}
 80026d0:	0018      	movs	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	b004      	add	sp, #16
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <_ZN6CTimer18_getTimeSinceStartEv>:
}

//--------PRIVATE----------------------------------------------------
/*-------------------------------------------------------*/
uint32_t CTimer::_getTimeSinceStart()
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
    uint32_t ticksDuration;
    uint32_t unitsDuration;

    ticksDuration = getTick() - startTick;
 80026e0:	f7ff ff88 	bl	80025f4 <_ZN6CTimer7getTickEv>
 80026e4:	0002      	movs	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	60fb      	str	r3, [r7, #12]
    unitsDuration = _ticks2timerUnits(ticksDuration);
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	0011      	movs	r1, r2
 80026f4:	0018      	movs	r0, r3
 80026f6:	f000 f86f 	bl	80027d8 <_ZN6CTimer17_ticks2timerUnitsEm>
 80026fa:	0003      	movs	r3, r0
 80026fc:	60bb      	str	r3, [r7, #8]

    return unitsDuration;
 80026fe:	68bb      	ldr	r3, [r7, #8]
}
 8002700:	0018      	movs	r0, r3
 8002702:	46bd      	mov	sp, r7
 8002704:	b004      	add	sp, #16
 8002706:	bd80      	pop	{r7, pc}

08002708 <_ZN6CTimer18_updateDowncounterEv>:

/*-------------------------------------------------------*/
uint32_t CTimer::_updateDowncounter()
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b084      	sub	sp, #16
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
    uint32_t timeSinceStart = 0;
 8002710:	2300      	movs	r3, #0
 8002712:	60fb      	str	r3, [r7, #12]

    switch(timState)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	7a5b      	ldrb	r3, [r3, #9]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d003      	beq.n	8002724 <_ZN6CTimer18_updateDowncounterEv+0x1c>
 800271c:	dd14      	ble.n	8002748 <_ZN6CTimer18_updateDowncounterEv+0x40>
 800271e:	2b03      	cmp	r3, #3
 8002720:	dc15      	bgt.n	800274e <_ZN6CTimer18_updateDowncounterEv+0x46>
            timState = TS_ELAPSED;
        }
        break;
    case TS_ELAPSED:
    case TS_FREE_RUN:
        break;
 8002722:	e014      	b.n	800274e <_ZN6CTimer18_updateDowncounterEv+0x46>
        timeSinceStart = _getTimeSinceStart();
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff ffd6 	bl	80026d8 <_ZN6CTimer18_getTimeSinceStartEv>
 800272c:	0003      	movs	r3, r0
 800272e:	60fb      	str	r3, [r7, #12]
        if (_isTimeElapsed(timeSinceStart))
 8002730:	68fa      	ldr	r2, [r7, #12]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	0011      	movs	r1, r2
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f80e 	bl	8002758 <_ZN6CTimer14_isTimeElapsedEm>
 800273c:	1e03      	subs	r3, r0, #0
 800273e:	d005      	beq.n	800274c <_ZN6CTimer18_updateDowncounterEv+0x44>
            timState = TS_ELAPSED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	725a      	strb	r2, [r3, #9]
        break;
 8002746:	e001      	b.n	800274c <_ZN6CTimer18_updateDowncounterEv+0x44>
        break;
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	e000      	b.n	800274e <_ZN6CTimer18_updateDowncounterEv+0x46>
        break;
 800274c:	46c0      	nop			; (mov r8, r8)
    }

    return timeSinceStart;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b004      	add	sp, #16
 8002756:	bd80      	pop	{r7, pc}

08002758 <_ZN6CTimer14_isTimeElapsedEm>:
    return result;
}

/*-------------------------------------------------------*/
bool CTimer::_isTimeElapsed(uint32_t _timeSinceStart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
 8002760:	6039      	str	r1, [r7, #0]
    return _timeSinceStart >= duration;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	6839      	ldr	r1, [r7, #0]
 8002768:	2300      	movs	r3, #0
 800276a:	4291      	cmp	r1, r2
 800276c:	415b      	adcs	r3, r3
 800276e:	b2db      	uxtb	r3, r3
}
 8002770:	0018      	movs	r0, r3
 8002772:	46bd      	mov	sp, r7
 8002774:	b002      	add	sp, #8
 8002776:	bd80      	pop	{r7, pc}

08002778 <_ZN6CTimer13getFactor1000ENS_4UnitE>:

/*-------------------------------------------------------*/
uint32_t CTimer::getFactor1000(Unit unit)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	0002      	movs	r2, r0
 8002780:	1dfb      	adds	r3, r7, #7
 8002782:	701a      	strb	r2, [r3, #0]
    uint32_t factor;

    switch (unit)
 8002784:	1dfb      	adds	r3, r7, #7
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b05      	cmp	r3, #5
 800278a:	d817      	bhi.n	80027bc <_ZN6CTimer13getFactor1000ENS_4UnitE+0x44>
 800278c:	009a      	lsls	r2, r3, #2
 800278e:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <_ZN6CTimer13getFactor1000ENS_4UnitE+0x54>)
 8002790:	18d3      	adds	r3, r2, r3
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	469f      	mov	pc, r3
    {
        case UNIT_MILISEC:
            //0.001s <-> 0.001s
            factor = 1U;
 8002796:	2301      	movs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
            break;
 800279a:	e012      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_HUNDRETHS_SEC:
            //0.001s <-> 0.01s
            factor = 10U;
 800279c:	230a      	movs	r3, #10
 800279e:	60fb      	str	r3, [r7, #12]
            break;
 80027a0:	e00f      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_TENTHS_SEC:
            //0.001s <-> 0.1s
            factor = 100U;
 80027a2:	2364      	movs	r3, #100	; 0x64
 80027a4:	60fb      	str	r3, [r7, #12]
            break;
 80027a6:	e00c      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_SEC:
            //0.001s <-> 1s
            factor = 1000U;
 80027a8:	23fa      	movs	r3, #250	; 0xfa
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	60fb      	str	r3, [r7, #12]
            break;
 80027ae:	e008      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_MIN:
            //0.001s <-> 1min
            factor = 60000U;
 80027b0:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x58>)
 80027b2:	60fb      	str	r3, [r7, #12]
            break;
 80027b4:	e005      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        case UNIT_HOUR:
            //0.001s <-> 1hour
            factor = 3600000U;
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x5c>)
 80027b8:	60fb      	str	r3, [r7, #12]
            break;
 80027ba:	e002      	b.n	80027c2 <_ZN6CTimer13getFactor1000ENS_4UnitE+0x4a>
        default:
            factor = 1U;
 80027bc:	2301      	movs	r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
            break;
 80027c0:	46c0      	nop			; (mov r8, r8)
    }
    return factor;
 80027c2:	68fb      	ldr	r3, [r7, #12]
}
 80027c4:	0018      	movs	r0, r3
 80027c6:	46bd      	mov	sp, r7
 80027c8:	b004      	add	sp, #16
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	08003070 	.word	0x08003070
 80027d0:	0000ea60 	.word	0x0000ea60
 80027d4:	0036ee80 	.word	0x0036ee80

080027d8 <_ZN6CTimer17_ticks2timerUnitsEm>:
    return timerUnits * getFactor1000(unit);
}

/*-------------------------------------------------------*/
uint32_t CTimer::_ticks2timerUnits(uint32_t ticks)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
    return ticks / getFactor1000(unit);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	7a1b      	ldrb	r3, [r3, #8]
 80027e6:	0018      	movs	r0, r3
 80027e8:	f7ff ffc6 	bl	8002778 <_ZN6CTimer13getFactor1000ENS_4UnitE>
 80027ec:	0003      	movs	r3, r0
 80027ee:	0019      	movs	r1, r3
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	f7fd fc89 	bl	8000108 <__udivsi3>
 80027f6:	0003      	movs	r3, r0
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b002      	add	sp, #8
 80027fe:	bd80      	pop	{r7, pc}

08002800 <_ZN14CControlerInfoC1Ev>:
EEPROMVar CControlerInfo::m_eepromInitialization = EEPROMVar(sizeof(uint8_t));
EEPROMVar CControlerInfo::m_eeppromMotominutes = EEPROMVar(sizeof(uint8_t));
EEPROMVar CControlerInfo::m_eeppromMotohours = EEPROMVar(sizeof(MOTOHOUR));
EEPROMVar CControlerInfo::m_eeppromMaxMotohours = EEPROMVar(sizeof(MOTOHOUR));

CControlerInfo::CControlerInfo() {
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
	if (getStatusInitialization() != INITIATED) {
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	0018      	movs	r0, r3
 800280c:	f000 f82a 	bl	8002864 <_ZN14CControlerInfo23getStatusInitializationEv>
 8002810:	0003      	movs	r3, r0
 8002812:	3b02      	subs	r3, #2
 8002814:	1e5a      	subs	r2, r3, #1
 8002816:	4193      	sbcs	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d015      	beq.n	800284a <_ZN14CControlerInfoC1Ev+0x4a>
		m_eepromInitialization = (uint8_t) INITIATED;
 800281e:	4b0d      	ldr	r3, [pc, #52]	; (8002854 <_ZN14CControlerInfoC1Ev+0x54>)
 8002820:	2102      	movs	r1, #2
 8002822:	0018      	movs	r0, r3
 8002824:	f7ff fa5a 	bl	8001cdc <_ZN9EEPROMVaraSEh>
		m_eeppromMotohours = (MOTOHOUR)0;
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <_ZN14CControlerInfoC1Ev+0x58>)
 800282a:	2100      	movs	r1, #0
 800282c:	0018      	movs	r0, r3
 800282e:	f7ff fa75 	bl	8001d1c <_ZN9EEPROMVaraSEt>
		m_eeppromMotominutes = (uint8_t)0;
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <_ZN14CControlerInfoC1Ev+0x5c>)
 8002834:	2100      	movs	r1, #0
 8002836:	0018      	movs	r0, r3
 8002838:	f7ff fa50 	bl	8001cdc <_ZN9EEPROMVaraSEh>
		m_eeppromMaxMotohours = (MOTOHOUR)400;
 800283c:	23c8      	movs	r3, #200	; 0xc8
 800283e:	005a      	lsls	r2, r3, #1
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <_ZN14CControlerInfoC1Ev+0x60>)
 8002842:	0011      	movs	r1, r2
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff fa69 	bl	8001d1c <_ZN9EEPROMVaraSEt>
	}
}
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0018      	movs	r0, r3
 800284e:	46bd      	mov	sp, r7
 8002850:	b002      	add	sp, #8
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000098 	.word	0x20000098
 8002858:	200000a8 	.word	0x200000a8
 800285c:	200000a0 	.word	0x200000a0
 8002860:	200000b0 	.word	0x200000b0

08002864 <_ZN14CControlerInfo23getStatusInitializationEv>:

CControlerInfo::TStatusInitialization CControlerInfo::getStatusInitialization() {
 8002864:	b590      	push	{r4, r7, lr}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = m_eepromInitialization;
 800286c:	230f      	movs	r3, #15
 800286e:	18fc      	adds	r4, r7, r3
 8002870:	4b06      	ldr	r3, [pc, #24]	; (800288c <_ZN14CControlerInfo23getStatusInitializationEv+0x28>)
 8002872:	0018      	movs	r0, r3
 8002874:	f7ff fa72 	bl	8001d5c <_ZN9EEPROMVarcvhEv>
 8002878:	0003      	movs	r3, r0
 800287a:	7023      	strb	r3, [r4, #0]
	return (TStatusInitialization) temp;
 800287c:	230f      	movs	r3, #15
 800287e:	18fb      	adds	r3, r7, r3
 8002880:	781b      	ldrb	r3, [r3, #0]
}
 8002882:	0018      	movs	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	b005      	add	sp, #20
 8002888:	bd90      	pop	{r4, r7, pc}
 800288a:	46c0      	nop			; (mov r8, r8)
 800288c:	20000098 	.word	0x20000098

08002890 <_ZN14CControlerInfo12getMotohoursEv>:

void CControlerInfo::deinitialization() {
	m_eepromInitialization = (uint8_t) NO_INITIATED;
}

MOTOHOUR CControlerInfo::getMotohours() {
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	MOTOHOUR temp;
	temp = m_eeppromMotohours;
 8002898:	230e      	movs	r3, #14
 800289a:	18fc      	adds	r4, r7, r3
 800289c:	4b06      	ldr	r3, [pc, #24]	; (80028b8 <_ZN14CControlerInfo12getMotohoursEv+0x28>)
 800289e:	0018      	movs	r0, r3
 80028a0:	f7ff fa78 	bl	8001d94 <_ZN9EEPROMVarcvtEv>
 80028a4:	0003      	movs	r3, r0
 80028a6:	8023      	strh	r3, [r4, #0]
	return temp;
 80028a8:	230e      	movs	r3, #14
 80028aa:	18fb      	adds	r3, r7, r3
 80028ac:	881b      	ldrh	r3, [r3, #0]
}
 80028ae:	0018      	movs	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	b005      	add	sp, #20
 80028b4:	bd90      	pop	{r4, r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	200000a8 	.word	0x200000a8

080028bc <_ZN14CControlerInfo12setMotohoursEt>:

void CControlerInfo::setMotohours(MOTOHOUR val) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	000a      	movs	r2, r1
 80028c6:	1cbb      	adds	r3, r7, #2
 80028c8:	801a      	strh	r2, [r3, #0]
	m_eeppromMotohours = val;
 80028ca:	1cbb      	adds	r3, r7, #2
 80028cc:	881a      	ldrh	r2, [r3, #0]
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <_ZN14CControlerInfo12setMotohoursEt+0x24>)
 80028d0:	0011      	movs	r1, r2
 80028d2:	0018      	movs	r0, r3
 80028d4:	f7ff fa22 	bl	8001d1c <_ZN9EEPROMVaraSEt>
}
 80028d8:	46c0      	nop			; (mov r8, r8)
 80028da:	46bd      	mov	sp, r7
 80028dc:	b002      	add	sp, #8
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	200000a8 	.word	0x200000a8

080028e4 <_ZN14CControlerInfo14getMotominutesEv>:

uint8_t CControlerInfo::getMotominutes() {
 80028e4:	b590      	push	{r4, r7, lr}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
	uint8_t temp;
	temp = m_eeppromMotominutes;
 80028ec:	230f      	movs	r3, #15
 80028ee:	18fc      	adds	r4, r7, r3
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <_ZN14CControlerInfo14getMotominutesEv+0x28>)
 80028f2:	0018      	movs	r0, r3
 80028f4:	f7ff fa32 	bl	8001d5c <_ZN9EEPROMVarcvhEv>
 80028f8:	0003      	movs	r3, r0
 80028fa:	7023      	strb	r3, [r4, #0]
	return temp;
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	781b      	ldrb	r3, [r3, #0]
}
 8002902:	0018      	movs	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	b005      	add	sp, #20
 8002908:	bd90      	pop	{r4, r7, pc}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	200000a0 	.word	0x200000a0

08002910 <_ZN14CControlerInfo14setMotominutesEh>:

void CControlerInfo::setMotominutes(uint8_t val) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	000a      	movs	r2, r1
 800291a:	1cfb      	adds	r3, r7, #3
 800291c:	701a      	strb	r2, [r3, #0]
	m_eeppromMotominutes = val;
 800291e:	1cfb      	adds	r3, r7, #3
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <_ZN14CControlerInfo14setMotominutesEh+0x24>)
 8002924:	0011      	movs	r1, r2
 8002926:	0018      	movs	r0, r3
 8002928:	f7ff f9d8 	bl	8001cdc <_ZN9EEPROMVaraSEh>
}
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}
 8002934:	200000a0 	.word	0x200000a0

08002938 <_Z41__static_initialization_and_destruction_0ii>:
	return m_cpuid_2;
}

uint32_t CControlerInfo::getCpuId_3() {
	return m_cpuid_3;
}
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d123      	bne.n	8002990 <_Z41__static_initialization_and_destruction_0ii+0x58>
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	4a13      	ldr	r2, [pc, #76]	; (8002998 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d11f      	bne.n	8002990 <_Z41__static_initialization_and_destruction_0ii+0x58>
uint32_t CControlerInfo::m_cpuid_1 = *(uint32_t *) 0x1FF80050;
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002956:	601a      	str	r2, [r3, #0]
uint32_t CControlerInfo::m_cpuid_2 = *(uint32_t *) 0x1FF80054;
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800295e:	601a      	str	r2, [r3, #0]
uint32_t CControlerInfo::m_cpuid_3 = *(uint32_t *) 0x1FF80064;
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002966:	601a      	str	r2, [r3, #0]
EEPROMVar CControlerInfo::m_eepromInitialization = EEPROMVar(sizeof(uint8_t));
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800296a:	2101      	movs	r1, #1
 800296c:	0018      	movs	r0, r3
 800296e:	f7ff f997 	bl	8001ca0 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMotominutes = EEPROMVar(sizeof(uint8_t));
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002974:	2101      	movs	r1, #1
 8002976:	0018      	movs	r0, r3
 8002978:	f7ff f992 	bl	8001ca0 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMotohours = EEPROMVar(sizeof(MOTOHOUR));
 800297c:	4b0f      	ldr	r3, [pc, #60]	; (80029bc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800297e:	2102      	movs	r1, #2
 8002980:	0018      	movs	r0, r3
 8002982:	f7ff f98d 	bl	8001ca0 <_ZN9EEPROMVarC1Et>
EEPROMVar CControlerInfo::m_eeppromMaxMotohours = EEPROMVar(sizeof(MOTOHOUR));
 8002986:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002988:	2102      	movs	r1, #2
 800298a:	0018      	movs	r0, r3
 800298c:	f7ff f988 	bl	8001ca0 <_ZN9EEPROMVarC1Et>
}
 8002990:	46c0      	nop			; (mov r8, r8)
 8002992:	46bd      	mov	sp, r7
 8002994:	b002      	add	sp, #8
 8002996:	bd80      	pop	{r7, pc}
 8002998:	0000ffff 	.word	0x0000ffff
 800299c:	1ff80050 	.word	0x1ff80050
 80029a0:	2000008c 	.word	0x2000008c
 80029a4:	1ff80054 	.word	0x1ff80054
 80029a8:	20000090 	.word	0x20000090
 80029ac:	1ff80064 	.word	0x1ff80064
 80029b0:	20000094 	.word	0x20000094
 80029b4:	20000098 	.word	0x20000098
 80029b8:	200000a0 	.word	0x200000a0
 80029bc:	200000a8 	.word	0x200000a8
 80029c0:	200000b0 	.word	0x200000b0

080029c4 <_GLOBAL__sub_I__ZN14CControlerInfo9m_cpuid_1E>:
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	4b03      	ldr	r3, [pc, #12]	; (80029d8 <_GLOBAL__sub_I__ZN14CControlerInfo9m_cpuid_1E+0x14>)
 80029ca:	0019      	movs	r1, r3
 80029cc:	2001      	movs	r0, #1
 80029ce:	f7ff ffb3 	bl	8002938 <_Z41__static_initialization_and_destruction_0ii>
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	46c0      	nop			; (mov r8, r8)
 80029d8:	0000ffff 	.word	0x0000ffff

080029dc <_ZN6Driver4initEv>:

const uint8_t Driver::MINUTE = 60;
const uint8_t Driver::TIME_UPDATE_MINUTES_EEPROM = 15;
const uint8_t Driver::TIME_UPDATE_HOURS_EEPROM = 60;

void Driver::init() {
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	lcd.init();
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	3308      	adds	r3, #8
 80029e8:	0018      	movs	r0, r3
 80029ea:	f7ff fa53 	bl	8001e94 <_ZN3Lcd4initEv>
	lcd.clear();
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3308      	adds	r3, #8
 80029f2:	0018      	movs	r0, r3
 80029f4:	f7ff fc0a 	bl	800220c <_ZN3Lcd5clearEv>
	alarm.init(BUZZER_PORT, BUZZER_PIN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	335c      	adds	r3, #92	; 0x5c
 80029fc:	4910      	ldr	r1, [pc, #64]	; (8002a40 <_ZN6Driver4initEv+0x64>)
 80029fe:	2240      	movs	r2, #64	; 0x40
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff f90f 	bl	8001c24 <_ZN5Alarm4initEP12GPIO_TypeDeft>

	actualMotohours = controlerInfo.getMotohours();
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	3307      	adds	r3, #7
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f7ff ff40 	bl	8002890 <_ZN14CControlerInfo12getMotohoursEv>
 8002a10:	0003      	movs	r3, r0
 8002a12:	001a      	movs	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	809a      	strh	r2, [r3, #4]
	actualMotominutes = controlerInfo.getMotominutes();
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff ff61 	bl	80028e4 <_ZN14CControlerInfo14getMotominutesEv>
 8002a22:	0003      	movs	r3, r0
 8002a24:	001a      	movs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	719a      	strb	r2, [r3, #6]

	minuteTimer.start(MINUTE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3364      	adds	r3, #100	; 0x64
 8002a2e:	213c      	movs	r1, #60	; 0x3c
 8002a30:	0018      	movs	r0, r3
 8002a32:	f7ff fe11 	bl	8002658 <_ZN6CTimer5startEm>
}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	b002      	add	sp, #8
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	46c0      	nop			; (mov r8, r8)
 8002a40:	50000400 	.word	0x50000400

08002a44 <_ZN6Driver6updateEv>:

void Driver::update() {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
//	checkMotohours();
	updateMinutes();
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f844 	bl	8002adc <_ZN6Driver13updateMinutesEv>
	printMotohour();
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f804 	bl	8002a64 <_ZN6Driver13printMotohourEv>
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <_ZN6Driver13printMotohourEv>:

void Driver::printMotohour() {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
	char buffer[Lcd::NUM_OF_DIG] = {0};
 8002a6c:	230c      	movs	r3, #12
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	0018      	movs	r0, r3
 8002a72:	2308      	movs	r3, #8
 8002a74:	001a      	movs	r2, r3
 8002a76:	2100      	movs	r1, #0
 8002a78:	f000 fa50 	bl	8002f1c <memset>
	itoa(actualMotohours, buffer, 10);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	889b      	ldrh	r3, [r3, #4]
 8002a80:	0018      	movs	r0, r3
 8002a82:	230c      	movs	r3, #12
 8002a84:	18fb      	adds	r3, r7, r3
 8002a86:	220a      	movs	r2, #10
 8002a88:	0019      	movs	r1, r3
 8002a8a:	f000 fa39 	bl	8002f00 <itoa>
	uint8_t i = 0;
 8002a8e:	2317      	movs	r3, #23
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8002a96:	2317      	movs	r3, #23
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	220c      	movs	r2, #12
 8002a9e:	18ba      	adds	r2, r7, r2
 8002aa0:	5cd3      	ldrb	r3, [r2, r3]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d016      	beq.n	8002ad4 <_ZN6Driver13printMotohourEv+0x70>
		lcd.writeChar((uint8_t*)&buffer[i], i);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3308      	adds	r3, #8
 8002aaa:	0018      	movs	r0, r3
 8002aac:	2317      	movs	r3, #23
 8002aae:	18fb      	adds	r3, r7, r3
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	220c      	movs	r2, #12
 8002ab4:	18ba      	adds	r2, r7, r2
 8002ab6:	18d1      	adds	r1, r2, r3
 8002ab8:	2317      	movs	r3, #23
 8002aba:	18fb      	adds	r3, r7, r3
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	001a      	movs	r2, r3
 8002ac0:	f7ff fbb0 	bl	8002224 <_ZN3Lcd9writeCharEPhh>
		i++;
 8002ac4:	2317      	movs	r3, #23
 8002ac6:	18fb      	adds	r3, r7, r3
 8002ac8:	781a      	ldrb	r2, [r3, #0]
 8002aca:	2317      	movs	r3, #23
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	3201      	adds	r2, #1
 8002ad0:	701a      	strb	r2, [r3, #0]
	while(buffer[i]) {
 8002ad2:	e7e0      	b.n	8002a96 <_ZN6Driver13printMotohourEv+0x32>
	}
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}

08002adc <_ZN6Driver13updateMinutesEv>:
	} else {
		alarm.off();
	}
}

void Driver::updateMinutes() {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
	if(minuteTimer.isElapsed()) {
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3364      	adds	r3, #100	; 0x64
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f7ff fdd4 	bl	8002696 <_ZN6CTimer9isElapsedEv>
 8002aee:	1e03      	subs	r3, r0, #0
 8002af0:	d032      	beq.n	8002b58 <_ZN6Driver13updateMinutesEv+0x7c>
		minuteTimer.start(MINUTE);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3364      	adds	r3, #100	; 0x64
 8002af6:	213c      	movs	r1, #60	; 0x3c
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff fdad 	bl	8002658 <_ZN6CTimer5startEm>
		actualMotominutes++;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	799b      	ldrb	r3, [r3, #6]
 8002b02:	3301      	adds	r3, #1
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	719a      	strb	r2, [r3, #6]
		if (actualMotominutes % TIME_UPDATE_MINUTES_EEPROM == 0) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	799b      	ldrb	r3, [r3, #6]
 8002b0e:	210f      	movs	r1, #15
 8002b10:	0018      	movs	r0, r3
 8002b12:	f7fd fb7f 	bl	8000214 <__aeabi_uidivmod>
 8002b16:	000b      	movs	r3, r1
 8002b18:	b2db      	uxtb	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d107      	bne.n	8002b2e <_ZN6Driver13updateMinutesEv+0x52>
			controlerInfo.setMotominutes(actualMotominutes);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	1dda      	adds	r2, r3, #7
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	799b      	ldrb	r3, [r3, #6]
 8002b26:	0019      	movs	r1, r3
 8002b28:	0010      	movs	r0, r2
 8002b2a:	f7ff fef1 	bl	8002910 <_ZN14CControlerInfo14setMotominutesEh>
		}
		if(actualMotominutes == TIME_UPDATE_HOURS_EEPROM) {
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	799b      	ldrb	r3, [r3, #6]
 8002b32:	2b3c      	cmp	r3, #60	; 0x3c
 8002b34:	d110      	bne.n	8002b58 <_ZN6Driver13updateMinutesEv+0x7c>
			actualMotominutes = 0;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	719a      	strb	r2, [r3, #6]
			actualMotohours++;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	889b      	ldrh	r3, [r3, #4]
 8002b40:	3301      	adds	r3, #1
 8002b42:	b29a      	uxth	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	809a      	strh	r2, [r3, #4]
			controlerInfo.setMotohours(actualMotohours);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1dda      	adds	r2, r3, #7
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	889b      	ldrh	r3, [r3, #4]
 8002b50:	0019      	movs	r1, r3
 8002b52:	0010      	movs	r0, r2
 8002b54:	f7ff feb2 	bl	80028bc <_ZN14CControlerInfo12setMotohoursEt>
		}
	}
}
 8002b58:	46c0      	nop			; (mov r8, r8)
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	b002      	add	sp, #8
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_ZN6DriverC1Ev>:
#include "CControlerInfo.h"
#include "timer.h"

class Driver {
public:
	Driver(){}
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	4a09      	ldr	r2, [pc, #36]	; (8002b90 <_ZN6DriverC1Ev+0x30>)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3307      	adds	r3, #7
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7ff fe44 	bl	8002800 <_ZN14CControlerInfoC1Ev>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3364      	adds	r3, #100	; 0x64
 8002b7c:	2103      	movs	r1, #3
 8002b7e:	0018      	movs	r0, r3
 8002b80:	f7ff fd44 	bl	800260c <_ZN6CTimerC1ENS_4UnitE>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	08003090 	.word	0x08003090

08002b94 <_ZN6DriverD1Ev>:
	virtual ~Driver(){}
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4a03      	ldr	r2, [pc, #12]	; (8002bac <_ZN6DriverD1Ev+0x18>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	08003090 	.word	0x08003090

08002bb0 <_ZN6DriverD0Ev>:
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	0018      	movs	r0, r3
 8002bbc:	f7ff ffea 	bl	8002b94 <_ZN6DriverD1Ev>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 f95c 	bl	8002e80 <_ZdlPv>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b002      	add	sp, #8
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <main>:
void SystemClock_Config();
void TurnOnWorkingClock();
void initPinBuzzer();

int main(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b0b0      	sub	sp, #192	; 0xc0
 8002bd8:	af00      	add	r7, sp, #0
	HAL_Init();
 8002bda:	f7fd fb21 	bl	8000220 <HAL_Init>
	SystemClock_Config();
 8002bde:	f000 f84d 	bl	8002c7c <_Z18SystemClock_Configv>
	TurnOnWorkingClock();
 8002be2:	f000 f8ab 	bl	8002d3c <_Z18TurnOnWorkingClockv>
	CTimer::classInit1000(HAL_GetTick);
 8002be6:	4b22      	ldr	r3, [pc, #136]	; (8002c70 <main+0x9c>)
 8002be8:	0018      	movs	r0, r3
 8002bea:	f7ff fcef 	bl	80025cc <_ZN6CTimer13classInit1000EPFmvE>
	CButton button1;
 8002bee:	23ac      	movs	r3, #172	; 0xac
 8002bf0:	18fb      	adds	r3, r7, r3
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff fc9b 	bl	800252e <_ZN7CButtonC1Ev>
	CButton button2;
 8002bf8:	2398      	movs	r3, #152	; 0x98
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7ff fc96 	bl	800252e <_ZN7CButtonC1Ev>
	CButton button3;
 8002c02:	2384      	movs	r3, #132	; 0x84
 8002c04:	18fb      	adds	r3, r7, r3
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff fc91 	bl	800252e <_ZN7CButtonC1Ev>
	CButton button4;
 8002c0c:	2370      	movs	r3, #112	; 0x70
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	0018      	movs	r0, r3
 8002c12:	f7ff fc8c 	bl	800252e <_ZN7CButtonC1Ev>
	Driver driver;
 8002c16:	003b      	movs	r3, r7
 8002c18:	0018      	movs	r0, r3
 8002c1a:	f7ff ffa1 	bl	8002b60 <_ZN6DriverC1Ev>

	button1.init(BUTTON_1_PORT, BUTTON_1_PIN);
 8002c1e:	2380      	movs	r3, #128	; 0x80
 8002c20:	00da      	lsls	r2, r3, #3
 8002c22:	4914      	ldr	r1, [pc, #80]	; (8002c74 <main+0xa0>)
 8002c24:	23ac      	movs	r3, #172	; 0xac
 8002c26:	18f8      	adds	r0, r7, r3
 8002c28:	2300      	movs	r3, #0
 8002c2a:	f7ff fc8d 	bl	8002548 <_ZN7CButton4initEP12GPIO_TypeDeftb>
	button2.init(BUTTON_2_PORT, BUTTON_2_PIN);
 8002c2e:	2380      	movs	r3, #128	; 0x80
 8002c30:	011a      	lsls	r2, r3, #4
 8002c32:	4910      	ldr	r1, [pc, #64]	; (8002c74 <main+0xa0>)
 8002c34:	2398      	movs	r3, #152	; 0x98
 8002c36:	18f8      	adds	r0, r7, r3
 8002c38:	2300      	movs	r3, #0
 8002c3a:	f7ff fc85 	bl	8002548 <_ZN7CButton4initEP12GPIO_TypeDeftb>
	button3.init(BUTTON_3_PORT, BUTTON_3_PIN);
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	015a      	lsls	r2, r3, #5
 8002c42:	490c      	ldr	r1, [pc, #48]	; (8002c74 <main+0xa0>)
 8002c44:	2384      	movs	r3, #132	; 0x84
 8002c46:	18f8      	adds	r0, r7, r3
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f7ff fc7d 	bl	8002548 <_ZN7CButton4initEP12GPIO_TypeDeftb>
	button4.init(BUTTON_4_PORT, BUTTON_4_PIN);
 8002c4e:	490a      	ldr	r1, [pc, #40]	; (8002c78 <main+0xa4>)
 8002c50:	2370      	movs	r3, #112	; 0x70
 8002c52:	18f8      	adds	r0, r7, r3
 8002c54:	2300      	movs	r3, #0
 8002c56:	2204      	movs	r2, #4
 8002c58:	f7ff fc76 	bl	8002548 <_ZN7CButton4initEP12GPIO_TypeDeftb>

	driver.init();
 8002c5c:	003b      	movs	r3, r7
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f7ff febc 	bl	80029dc <_ZN6Driver4initEv>
	while(true){
		driver.update();
 8002c64:	003b      	movs	r3, r7
 8002c66:	0018      	movs	r0, r3
 8002c68:	f7ff feec 	bl	8002a44 <_ZN6Driver6updateEv>
 8002c6c:	e7fa      	b.n	8002c64 <main+0x90>
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	080002cd 	.word	0x080002cd
 8002c74:	50000800 	.word	0x50000800
 8002c78:	50000c00 	.word	0x50000c00

08002c7c <_Z18SystemClock_Configv>:
	}
}

void SystemClock_Config() {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b09c      	sub	sp, #112	; 0x70
 8002c80:	af00      	add	r7, sp, #0
	  RCC_ClkInitTypeDef RCC_ClkInitStruct;
	  RCC_OscInitTypeDef RCC_OscInitStruct;
	  RCC_PeriphCLKInitTypeDef PeriphClkInit;

	  __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	4b2b      	ldr	r3, [pc, #172]	; (8002d30 <_Z18SystemClock_Configv+0xb4>)
 8002c84:	4a2a      	ldr	r2, [pc, #168]	; (8002d30 <_Z18SystemClock_Configv+0xb4>)
 8002c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c88:	2180      	movs	r1, #128	; 0x80
 8002c8a:	0549      	lsls	r1, r1, #21
 8002c8c:	430a      	orrs	r2, r1
 8002c8e:	639a      	str	r2, [r3, #56]	; 0x38

	  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c90:	4b28      	ldr	r3, [pc, #160]	; (8002d34 <_Z18SystemClock_Configv+0xb8>)
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <_Z18SystemClock_Configv+0xb8>)
 8002c94:	6812      	ldr	r2, [r2, #0]
 8002c96:	4928      	ldr	r1, [pc, #160]	; (8002d38 <_Z18SystemClock_Configv+0xbc>)
 8002c98:	400a      	ands	r2, r1
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	0109      	lsls	r1, r1, #4
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

	  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
 8002ca2:	2324      	movs	r3, #36	; 0x24
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	2218      	movs	r2, #24
 8002ca8:	601a      	str	r2, [r3, #0]
	  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002caa:	2324      	movs	r3, #36	; 0x24
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	2201      	movs	r2, #1
 8002cb0:	615a      	str	r2, [r3, #20]
	  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002cb2:	2324      	movs	r3, #36	; 0x24
 8002cb4:	18fb      	adds	r3, r7, r3
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	61da      	str	r2, [r3, #28]
	  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002cba:	2324      	movs	r3, #36	; 0x24
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	22a0      	movs	r2, #160	; 0xa0
 8002cc0:	0212      	lsls	r2, r2, #8
 8002cc2:	625a      	str	r2, [r3, #36]	; 0x24
	  RCC_OscInitStruct.MSICalibrationValue=0x00;
 8002cc4:	2324      	movs	r3, #36	; 0x24
 8002cc6:	18fb      	adds	r3, r7, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	621a      	str	r2, [r3, #32]
	  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ccc:	2324      	movs	r3, #36	; 0x24
 8002cce:	18fb      	adds	r3, r7, r3
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	629a      	str	r2, [r3, #40]	; 0x28
	  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8002cd4:	2324      	movs	r3, #36	; 0x24
 8002cd6:	18fb      	adds	r3, r7, r3
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe f8ed 	bl	8000eb8 <HAL_RCC_OscConfig>

	  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002cde:	235c      	movs	r3, #92	; 0x5c
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	220f      	movs	r2, #15
 8002ce4:	601a      	str	r2, [r3, #0]
	  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002ce6:	235c      	movs	r3, #92	; 0x5c
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2200      	movs	r2, #0
 8002cec:	605a      	str	r2, [r3, #4]
	  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cee:	235c      	movs	r3, #92	; 0x5c
 8002cf0:	18fb      	adds	r3, r7, r3
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	609a      	str	r2, [r3, #8]
	  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cf6:	235c      	movs	r3, #92	; 0x5c
 8002cf8:	18fb      	adds	r3, r7, r3
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	60da      	str	r2, [r3, #12]
	  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cfe:	235c      	movs	r3, #92	; 0x5c
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2200      	movs	r2, #0
 8002d04:	611a      	str	r2, [r3, #16]
	  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0);
 8002d06:	235c      	movs	r3, #92	; 0x5c
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2100      	movs	r1, #0
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fe fc8f 	bl	8001630 <HAL_RCC_ClockConfig>

	  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002d12:	003b      	movs	r3, r7
 8002d14:	2220      	movs	r2, #32
 8002d16:	601a      	str	r2, [r3, #0]
	  PeriphClkInit.RTCClockSelection = RCC_CSR_RTCSEL_LSI;
 8002d18:	003b      	movs	r3, r7
 8002d1a:	2280      	movs	r2, #128	; 0x80
 8002d1c:	0292      	lsls	r2, r2, #10
 8002d1e:	605a      	str	r2, [r3, #4]
	  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8002d20:	003b      	movs	r3, r7
 8002d22:	0018      	movs	r0, r3
 8002d24:	f7fe fe20 	bl	8001968 <HAL_RCCEx_PeriphCLKConfig>
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b01c      	add	sp, #112	; 0x70
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40007000 	.word	0x40007000
 8002d38:	ffffe7ff 	.word	0xffffe7ff

08002d3c <_Z18TurnOnWorkingClockv>:

void TurnOnWorkingClock(void) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 8002d42:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d44:	4a19      	ldr	r2, [pc, #100]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d46:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	2201      	movs	r2, #1
 8002d54:	4013      	ands	r3, r2
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]
	__GPIOB_CLK_ENABLE();
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d60:	2102      	movs	r1, #2
 8002d62:	430a      	orrs	r2, r1
 8002d64:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d66:	4b11      	ldr	r3, [pc, #68]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]
	__GPIOC_CLK_ENABLE();
 8002d72:	4b0e      	ldr	r3, [pc, #56]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d74:	4a0d      	ldr	r2, [pc, #52]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d76:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d78:	2104      	movs	r1, #4
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d7e:	4b0b      	ldr	r3, [pc, #44]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	2204      	movs	r2, #4
 8002d84:	4013      	ands	r3, r2
 8002d86:	607b      	str	r3, [r7, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
	__GPIOD_CLK_ENABLE();
 8002d8a:	4b08      	ldr	r3, [pc, #32]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d8c:	4a07      	ldr	r2, [pc, #28]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d90:	2108      	movs	r1, #8
 8002d92:	430a      	orrs	r2, r1
 8002d94:	62da      	str	r2, [r3, #44]	; 0x2c
 8002d96:	4b05      	ldr	r3, [pc, #20]	; (8002dac <_Z18TurnOnWorkingClockv+0x70>)
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	2208      	movs	r2, #8
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	603b      	str	r3, [r7, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	46bd      	mov	sp, r7
 8002da6:	b004      	add	sp, #16
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	40021000 	.word	0x40021000

08002db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8002db0:	480d      	ldr	r0, [pc, #52]	; (8002de8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002db2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8002db4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002db6:	e003      	b.n	8002dc0 <LoopCopyDataInit>

08002db8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db8:	4b0c      	ldr	r3, [pc, #48]	; (8002dec <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8002dba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002dbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dbe:	3104      	adds	r1, #4

08002dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dc0:	480b      	ldr	r0, [pc, #44]	; (8002df0 <LoopForever+0xa>)
  ldr  r3, =_edata
 8002dc2:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <LoopForever+0xe>)
  adds  r2, r0, r1
 8002dc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc8:	d3f6      	bcc.n	8002db8 <CopyDataInit>
  ldr  r2, =_sbss
 8002dca:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <LoopForever+0x12>)
  b  LoopFillZerobss
 8002dcc:	e002      	b.n	8002dd4 <LoopFillZerobss>

08002dce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002dce:	2300      	movs	r3, #0
  str  r3, [r2]
 8002dd0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dd2:	3204      	adds	r2, #4

08002dd4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8002dd4:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <LoopForever+0x16>)
  cmp  r2, r3
 8002dd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd8:	d3f9      	bcc.n	8002dce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002dda:	f000 f813 	bl	8002e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dde:	f000 f853 	bl	8002e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002de2:	f7ff fef7 	bl	8002bd4 <main>

08002de6 <LoopForever>:

LoopForever:
    b LoopForever
 8002de6:	e7fe      	b.n	8002de6 <LoopForever>
  ldr   r0, =_estack
 8002de8:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8002dec:	080030e4 	.word	0x080030e4
  ldr  r0, =_sdata
 8002df0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002df4:	2000006c 	.word	0x2000006c
  ldr  r2, =_sbss
 8002df8:	2000006c 	.word	0x2000006c
  ldr  r3, = _ebss
 8002dfc:	200000d8 	.word	0x200000d8

08002e00 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e00:	e7fe      	b.n	8002e00 <ADC1_COMP_IRQHandler>
	...

08002e04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
 /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8002e08:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <SystemInit+0x64>)
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <SystemInit+0x64>)
 8002e0c:	6812      	ldr	r2, [r2, #0]
 8002e0e:	2180      	movs	r1, #128	; 0x80
 8002e10:	0049      	lsls	r1, r1, #1
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400C;
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <SystemInit+0x64>)
 8002e18:	4a13      	ldr	r2, [pc, #76]	; (8002e68 <SystemInit+0x64>)
 8002e1a:	68d2      	ldr	r2, [r2, #12]
 8002e1c:	4913      	ldr	r1, [pc, #76]	; (8002e6c <SystemInit+0x68>)
 8002e1e:	400a      	ands	r2, r1
 8002e20:	60da      	str	r2, [r3, #12]
 
  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6;
 8002e22:	4b11      	ldr	r3, [pc, #68]	; (8002e68 <SystemInit+0x64>)
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <SystemInit+0x64>)
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	4911      	ldr	r1, [pc, #68]	; (8002e70 <SystemInit+0x6c>)
 8002e2a:	400a      	ands	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFE;
 8002e2e:	4b0e      	ldr	r3, [pc, #56]	; (8002e68 <SystemInit+0x64>)
 8002e30:	4a0d      	ldr	r2, [pc, #52]	; (8002e68 <SystemInit+0x64>)
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	2101      	movs	r1, #1
 8002e36:	438a      	bics	r2, r1
 8002e38:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e3a:	4b0b      	ldr	r3, [pc, #44]	; (8002e68 <SystemInit+0x64>)
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <SystemInit+0x64>)
 8002e3e:	6812      	ldr	r2, [r2, #0]
 8002e40:	490c      	ldr	r1, [pc, #48]	; (8002e74 <SystemInit+0x70>)
 8002e42:	400a      	ands	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <SystemInit+0x64>)
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <SystemInit+0x64>)
 8002e4a:	68d2      	ldr	r2, [r2, #12]
 8002e4c:	490a      	ldr	r1, [pc, #40]	; (8002e78 <SystemInit+0x74>)
 8002e4e:	400a      	ands	r2, r1
 8002e50:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <SystemInit+0x64>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	611a      	str	r2, [r3, #16]
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <SystemInit+0x78>)
 8002e5a:	2280      	movs	r2, #128	; 0x80
 8002e5c:	0512      	lsls	r2, r2, #20
 8002e5e:	609a      	str	r2, [r3, #8]
#endif
  
}
 8002e60:	46c0      	nop			; (mov r8, r8)
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	40021000 	.word	0x40021000
 8002e6c:	88ff400c 	.word	0x88ff400c
 8002e70:	fef6fff6 	.word	0xfef6fff6
 8002e74:	fffbffff 	.word	0xfffbffff
 8002e78:	ff02ffff 	.word	0xff02ffff
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <_ZdlPv>:
 8002e80:	b510      	push	{r4, lr}
 8002e82:	f000 f841 	bl	8002f08 <free>
 8002e86:	bd10      	pop	{r4, pc}

08002e88 <__libc_init_array>:
 8002e88:	b570      	push	{r4, r5, r6, lr}
 8002e8a:	2600      	movs	r6, #0
 8002e8c:	4d0c      	ldr	r5, [pc, #48]	; (8002ec0 <__libc_init_array+0x38>)
 8002e8e:	4c0d      	ldr	r4, [pc, #52]	; (8002ec4 <__libc_init_array+0x3c>)
 8002e90:	1b64      	subs	r4, r4, r5
 8002e92:	10a4      	asrs	r4, r4, #2
 8002e94:	42a6      	cmp	r6, r4
 8002e96:	d109      	bne.n	8002eac <__libc_init_array+0x24>
 8002e98:	2600      	movs	r6, #0
 8002e9a:	f000 f8d7 	bl	800304c <_init>
 8002e9e:	4d0a      	ldr	r5, [pc, #40]	; (8002ec8 <__libc_init_array+0x40>)
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	; (8002ecc <__libc_init_array+0x44>)
 8002ea2:	1b64      	subs	r4, r4, r5
 8002ea4:	10a4      	asrs	r4, r4, #2
 8002ea6:	42a6      	cmp	r6, r4
 8002ea8:	d105      	bne.n	8002eb6 <__libc_init_array+0x2e>
 8002eaa:	bd70      	pop	{r4, r5, r6, pc}
 8002eac:	00b3      	lsls	r3, r6, #2
 8002eae:	58eb      	ldr	r3, [r5, r3]
 8002eb0:	4798      	blx	r3
 8002eb2:	3601      	adds	r6, #1
 8002eb4:	e7ee      	b.n	8002e94 <__libc_init_array+0xc>
 8002eb6:	00b3      	lsls	r3, r6, #2
 8002eb8:	58eb      	ldr	r3, [r5, r3]
 8002eba:	4798      	blx	r3
 8002ebc:	3601      	adds	r6, #1
 8002ebe:	e7f2      	b.n	8002ea6 <__libc_init_array+0x1e>
 8002ec0:	080030d8 	.word	0x080030d8
 8002ec4:	080030d8 	.word	0x080030d8
 8002ec8:	080030d8 	.word	0x080030d8
 8002ecc:	080030e0 	.word	0x080030e0

08002ed0 <__itoa>:
 8002ed0:	1e93      	subs	r3, r2, #2
 8002ed2:	b510      	push	{r4, lr}
 8002ed4:	000c      	movs	r4, r1
 8002ed6:	2b22      	cmp	r3, #34	; 0x22
 8002ed8:	d904      	bls.n	8002ee4 <__itoa+0x14>
 8002eda:	2300      	movs	r3, #0
 8002edc:	001c      	movs	r4, r3
 8002ede:	700b      	strb	r3, [r1, #0]
 8002ee0:	0020      	movs	r0, r4
 8002ee2:	bd10      	pop	{r4, pc}
 8002ee4:	2a0a      	cmp	r2, #10
 8002ee6:	d109      	bne.n	8002efc <__itoa+0x2c>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	da07      	bge.n	8002efc <__itoa+0x2c>
 8002eec:	232d      	movs	r3, #45	; 0x2d
 8002eee:	700b      	strb	r3, [r1, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	4240      	negs	r0, r0
 8002ef4:	1861      	adds	r1, r4, r1
 8002ef6:	f000 f863 	bl	8002fc0 <__utoa>
 8002efa:	e7f1      	b.n	8002ee0 <__itoa+0x10>
 8002efc:	2100      	movs	r1, #0
 8002efe:	e7f9      	b.n	8002ef4 <__itoa+0x24>

08002f00 <itoa>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	f7ff ffe5 	bl	8002ed0 <__itoa>
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <free>:
 8002f08:	b510      	push	{r4, lr}
 8002f0a:	4b03      	ldr	r3, [pc, #12]	; (8002f18 <free+0x10>)
 8002f0c:	0001      	movs	r1, r0
 8002f0e:	6818      	ldr	r0, [r3, #0]
 8002f10:	f000 f80c 	bl	8002f2c <_free_r>
 8002f14:	bd10      	pop	{r4, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	20000008 	.word	0x20000008

08002f1c <memset>:
 8002f1c:	0003      	movs	r3, r0
 8002f1e:	1882      	adds	r2, r0, r2
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d100      	bne.n	8002f26 <memset+0xa>
 8002f24:	4770      	bx	lr
 8002f26:	7019      	strb	r1, [r3, #0]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	e7f9      	b.n	8002f20 <memset+0x4>

08002f2c <_free_r>:
 8002f2c:	b570      	push	{r4, r5, r6, lr}
 8002f2e:	0005      	movs	r5, r0
 8002f30:	2900      	cmp	r1, #0
 8002f32:	d010      	beq.n	8002f56 <_free_r+0x2a>
 8002f34:	1f0c      	subs	r4, r1, #4
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	da00      	bge.n	8002f3e <_free_r+0x12>
 8002f3c:	18e4      	adds	r4, r4, r3
 8002f3e:	0028      	movs	r0, r5
 8002f40:	f000 f881 	bl	8003046 <__malloc_lock>
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <_free_r+0x90>)
 8002f46:	6813      	ldr	r3, [r2, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d105      	bne.n	8002f58 <_free_r+0x2c>
 8002f4c:	6063      	str	r3, [r4, #4]
 8002f4e:	6014      	str	r4, [r2, #0]
 8002f50:	0028      	movs	r0, r5
 8002f52:	f000 f879 	bl	8003048 <__malloc_unlock>
 8002f56:	bd70      	pop	{r4, r5, r6, pc}
 8002f58:	42a3      	cmp	r3, r4
 8002f5a:	d909      	bls.n	8002f70 <_free_r+0x44>
 8002f5c:	6821      	ldr	r1, [r4, #0]
 8002f5e:	1860      	adds	r0, r4, r1
 8002f60:	4283      	cmp	r3, r0
 8002f62:	d1f3      	bne.n	8002f4c <_free_r+0x20>
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	1841      	adds	r1, r0, r1
 8002f6a:	6021      	str	r1, [r4, #0]
 8002f6c:	e7ee      	b.n	8002f4c <_free_r+0x20>
 8002f6e:	0013      	movs	r3, r2
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	2a00      	cmp	r2, #0
 8002f74:	d001      	beq.n	8002f7a <_free_r+0x4e>
 8002f76:	42a2      	cmp	r2, r4
 8002f78:	d9f9      	bls.n	8002f6e <_free_r+0x42>
 8002f7a:	6819      	ldr	r1, [r3, #0]
 8002f7c:	1858      	adds	r0, r3, r1
 8002f7e:	42a0      	cmp	r0, r4
 8002f80:	d10b      	bne.n	8002f9a <_free_r+0x6e>
 8002f82:	6820      	ldr	r0, [r4, #0]
 8002f84:	1809      	adds	r1, r1, r0
 8002f86:	1858      	adds	r0, r3, r1
 8002f88:	6019      	str	r1, [r3, #0]
 8002f8a:	4282      	cmp	r2, r0
 8002f8c:	d1e0      	bne.n	8002f50 <_free_r+0x24>
 8002f8e:	6810      	ldr	r0, [r2, #0]
 8002f90:	6852      	ldr	r2, [r2, #4]
 8002f92:	1841      	adds	r1, r0, r1
 8002f94:	6019      	str	r1, [r3, #0]
 8002f96:	605a      	str	r2, [r3, #4]
 8002f98:	e7da      	b.n	8002f50 <_free_r+0x24>
 8002f9a:	42a0      	cmp	r0, r4
 8002f9c:	d902      	bls.n	8002fa4 <_free_r+0x78>
 8002f9e:	230c      	movs	r3, #12
 8002fa0:	602b      	str	r3, [r5, #0]
 8002fa2:	e7d5      	b.n	8002f50 <_free_r+0x24>
 8002fa4:	6821      	ldr	r1, [r4, #0]
 8002fa6:	1860      	adds	r0, r4, r1
 8002fa8:	4282      	cmp	r2, r0
 8002faa:	d103      	bne.n	8002fb4 <_free_r+0x88>
 8002fac:	6810      	ldr	r0, [r2, #0]
 8002fae:	6852      	ldr	r2, [r2, #4]
 8002fb0:	1841      	adds	r1, r0, r1
 8002fb2:	6021      	str	r1, [r4, #0]
 8002fb4:	6062      	str	r2, [r4, #4]
 8002fb6:	605c      	str	r4, [r3, #4]
 8002fb8:	e7ca      	b.n	8002f50 <_free_r+0x24>
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	200000b8 	.word	0x200000b8

08002fc0 <__utoa>:
 8002fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fc2:	0017      	movs	r7, r2
 8002fc4:	b08f      	sub	sp, #60	; 0x3c
 8002fc6:	2225      	movs	r2, #37	; 0x25
 8002fc8:	0006      	movs	r6, r0
 8002fca:	000d      	movs	r5, r1
 8002fcc:	a804      	add	r0, sp, #16
 8002fce:	4918      	ldr	r1, [pc, #96]	; (8003030 <__utoa+0x70>)
 8002fd0:	f000 f830 	bl	8003034 <memcpy>
 8002fd4:	aa04      	add	r2, sp, #16
 8002fd6:	1ebb      	subs	r3, r7, #2
 8002fd8:	2400      	movs	r4, #0
 8002fda:	9203      	str	r2, [sp, #12]
 8002fdc:	2b22      	cmp	r3, #34	; 0x22
 8002fde:	d905      	bls.n	8002fec <__utoa+0x2c>
 8002fe0:	702c      	strb	r4, [r5, #0]
 8002fe2:	0025      	movs	r5, r4
 8002fe4:	0028      	movs	r0, r5
 8002fe6:	b00f      	add	sp, #60	; 0x3c
 8002fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fea:	9c01      	ldr	r4, [sp, #4]
 8002fec:	1c63      	adds	r3, r4, #1
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	18eb      	adds	r3, r5, r3
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	0030      	movs	r0, r6
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	0039      	movs	r1, r7
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	f7fd f90a 	bl	8000214 <__aeabi_uidivmod>
 8003000:	9b03      	ldr	r3, [sp, #12]
 8003002:	9a02      	ldr	r2, [sp, #8]
 8003004:	5c5b      	ldrb	r3, [r3, r1]
 8003006:	0030      	movs	r0, r6
 8003008:	7013      	strb	r3, [r2, #0]
 800300a:	0039      	movs	r1, r7
 800300c:	f7fd f87c 	bl	8000108 <__udivsi3>
 8003010:	1e06      	subs	r6, r0, #0
 8003012:	d1ea      	bne.n	8002fea <__utoa+0x2a>
 8003014:	9b00      	ldr	r3, [sp, #0]
 8003016:	7018      	strb	r0, [r3, #0]
 8003018:	002b      	movs	r3, r5
 800301a:	1b5a      	subs	r2, r3, r5
 800301c:	4294      	cmp	r4, r2
 800301e:	dde1      	ble.n	8002fe4 <__utoa+0x24>
 8003020:	781a      	ldrb	r2, [r3, #0]
 8003022:	5d29      	ldrb	r1, [r5, r4]
 8003024:	7019      	strb	r1, [r3, #0]
 8003026:	552a      	strb	r2, [r5, r4]
 8003028:	3301      	adds	r3, #1
 800302a:	3c01      	subs	r4, #1
 800302c:	e7f5      	b.n	800301a <__utoa+0x5a>
 800302e:	46c0      	nop			; (mov r8, r8)
 8003030:	080030b1 	.word	0x080030b1

08003034 <memcpy>:
 8003034:	2300      	movs	r3, #0
 8003036:	b510      	push	{r4, lr}
 8003038:	429a      	cmp	r2, r3
 800303a:	d100      	bne.n	800303e <memcpy+0xa>
 800303c:	bd10      	pop	{r4, pc}
 800303e:	5ccc      	ldrb	r4, [r1, r3]
 8003040:	54c4      	strb	r4, [r0, r3]
 8003042:	3301      	adds	r3, #1
 8003044:	e7f8      	b.n	8003038 <memcpy+0x4>

08003046 <__malloc_lock>:
 8003046:	4770      	bx	lr

08003048 <__malloc_unlock>:
 8003048:	4770      	bx	lr
	...

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	46c0      	nop			; (mov r8, r8)
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
